/*
 * FreeRTOS V202112.00
 * Copyright (C) 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * https://www.FreeRTOS.org
 * https://github.com/FreeRTOS
 *
 */
#ifndef DEMO_TASKS_H
#define DEMO_TASKS_H

/* ------------------------------ Demo Option ------------------------------ */

/** @brief A Demo that uses static Queues to send info between two tasks */
#define BLINKY_DEMO 0x1

/** @brief A Demo that causes data aborts and clears them to show MPU usage */
#define MPU_DEMO    0x2

/** @brief Set to 1 to select the Blinky Demo, or 2 to select the MPU demo.
 * @note This project provides two demo applications. A simple blinky demo,
 * and a MPU demo that triggers and clears data aborts.
 *
 * If mainDEMO_TYPE is 1 then the blinky demo from main_blinky.c will be built.
 *
 * If mainDEMO_TYPE is 2 then the MPU demo from mpu_demo.c will be built.
 *
 * If mainDEMO_TYPE is 3 then both of the above demos will be built.
 *
 */
#ifndef mainDEMO_TYPE
    #define mainDEMO_TYPE ( BLINKY_DEMO | MPU_DEMO )
#endif /* mainDEMO_TYPE */

/* FreeRTOS includes. */
#include "FreeRTOS.h"

/* -------------------------- Register Test Tasks -------------------------- */

/** @brief ASM function in reg_test_GCC.S that tests proper context swaps. */
void vRegTest1Implementation( void );

/** @brief ASM function in reg_test_GCC.S that tests proper context swaps. */
void vRegTest2Implementation( void );

/** @brief Creates the Register Test Tasks implemented in reg_test_GCC.S
 * @return pdPASS if all tasks are created, pdFAIL if they are not.
 */
BaseType_t xCreateRegisterTestTasks( void );

/* ------------------------ Demo Tasks Declarations ------------------------ */

/** @brief Create two tasks, a queue, and a timer, which are used to blink an LED.
 *
 * @return
 * pdPASS if all objects are created.
 * pdFAIL if any object cannot be created.
 */
BaseType_t xCreateBlinkyTasks( void );

/** @brief Create the MPU Tasks that trigger data aborts.
 *
 * @note The MPU demo creates 2 unprivileged tasks - One of which has Read Only
 * access to a shared memory region while the other has Read Write access. The
 * task with Read Only access then tries to write to the shared memory which
 * results in a Memory fault. The fault handler examines that it is the fault
 * generated by the task with Read Only access and if so, it recovers from the
 * fault gracefully by moving the Program Counter to the next instruction to the
 * one which generated the fault. If any other memory access violation occurs,
 * the fault handler will get stuck in an infinite loop.
 */
BaseType_t xCreateMPUTasks( void );

/* ---------------------- Shared Function Deceleration ---------------------- */

/** @brief Function to toggle LEDs on the RM57-XL2 Launchpad
 * @param ulLED Which LED to flicker
 */
void vToggleLED( uint32_t ulLED );

/* ------------------------------------------------------------------------- */

#endif /* DEMO_TASKS_H */
