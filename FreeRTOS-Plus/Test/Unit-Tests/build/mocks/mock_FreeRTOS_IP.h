/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_IP_H
#define _MOCK_FREERTOS_IP_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include "FreeRTOS.h"
#include "task.h"
#include "list.h"
#include "queue.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_IP.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_IP_Init(void);
void mock_FreeRTOS_IP_Destroy(void);
void mock_FreeRTOS_IP_Verify(void);




#define FreeRTOS_IPInit_IgnoreAndReturn(cmock_retval) FreeRTOS_IPInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_IPInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_IPInit_StopIgnore() FreeRTOS_IPInit_CMockStopIgnore()
void FreeRTOS_IPInit_CMockStopIgnore(void);
#define FreeRTOS_IPInit_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_IPInit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_IPInit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_IPInit_ExpectAndReturn(ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress, cmock_retval) FreeRTOS_IPInit_CMockExpectAndReturn(__LINE__, ucIPAddress, ucNetMask, ucGatewayAddress, ucDNSServerAddress, ucMACAddress, cmock_retval)
void FreeRTOS_IPInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* ucIPAddress, const uint8_t* ucNetMask, const uint8_t* ucGatewayAddress, const uint8_t* ucDNSServerAddress, const uint8_t* ucMACAddress, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_IPInit_CALLBACK)(const uint8_t* ucIPAddress, const uint8_t* ucNetMask, const uint8_t* ucGatewayAddress, const uint8_t* ucDNSServerAddress, const uint8_t* ucMACAddress, int cmock_num_calls);
void FreeRTOS_IPInit_AddCallback(CMOCK_FreeRTOS_IPInit_CALLBACK Callback);
void FreeRTOS_IPInit_Stub(CMOCK_FreeRTOS_IPInit_CALLBACK Callback);
#define FreeRTOS_IPInit_StubWithCallback FreeRTOS_IPInit_Stub
#define FreeRTOS_IPInit_ExpectWithArrayAndReturn(ucIPAddress, ucIPAddress_Depth, ucNetMask, ucNetMask_Depth, ucGatewayAddress, ucGatewayAddress_Depth, ucDNSServerAddress, ucDNSServerAddress_Depth, ucMACAddress, ucMACAddress_Depth, cmock_retval) FreeRTOS_IPInit_CMockExpectWithArrayAndReturn(__LINE__, ucIPAddress, ucIPAddress_Depth, ucNetMask, ucNetMask_Depth, ucGatewayAddress, ucGatewayAddress_Depth, ucDNSServerAddress, ucDNSServerAddress_Depth, ucMACAddress, ucMACAddress_Depth, cmock_retval)
void FreeRTOS_IPInit_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* ucIPAddress, int ucIPAddress_Depth, const uint8_t* ucNetMask, int ucNetMask_Depth, const uint8_t* ucGatewayAddress, int ucGatewayAddress_Depth, const uint8_t* ucDNSServerAddress, int ucDNSServerAddress_Depth, const uint8_t* ucMACAddress, int ucMACAddress_Depth, BaseType_t cmock_to_return);
#define FreeRTOS_IPInit_IgnoreArg_ucIPAddress() FreeRTOS_IPInit_CMockIgnoreArg_ucIPAddress(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreArg_ucNetMask() FreeRTOS_IPInit_CMockIgnoreArg_ucNetMask(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreArg_ucGatewayAddress() FreeRTOS_IPInit_CMockIgnoreArg_ucGatewayAddress(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreArg_ucDNSServerAddress() FreeRTOS_IPInit_CMockIgnoreArg_ucDNSServerAddress(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IPInit_IgnoreArg_ucMACAddress() FreeRTOS_IPInit_CMockIgnoreArg_ucMACAddress(__LINE__)
void FreeRTOS_IPInit_CMockIgnoreArg_ucMACAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetUDPPayloadBuffer_IgnoreAndReturn(cmock_retval) FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define FreeRTOS_GetUDPPayloadBuffer_StopIgnore() FreeRTOS_GetUDPPayloadBuffer_CMockStopIgnore()
void FreeRTOS_GetUDPPayloadBuffer_CMockStopIgnore(void);
#define FreeRTOS_GetUDPPayloadBuffer_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_GetUDPPayloadBuffer_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetUDPPayloadBuffer_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define FreeRTOS_GetUDPPayloadBuffer_ExpectAndReturn(xRequestedSizeBytes, xBlockTimeTicks, cmock_retval) FreeRTOS_GetUDPPayloadBuffer_CMockExpectAndReturn(__LINE__, xRequestedSizeBytes, xBlockTimeTicks, cmock_retval)
void FreeRTOS_GetUDPPayloadBuffer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks, void* cmock_to_return);
typedef void* (* CMOCK_FreeRTOS_GetUDPPayloadBuffer_CALLBACK)(size_t xRequestedSizeBytes, TickType_t xBlockTimeTicks, int cmock_num_calls);
void FreeRTOS_GetUDPPayloadBuffer_AddCallback(CMOCK_FreeRTOS_GetUDPPayloadBuffer_CALLBACK Callback);
void FreeRTOS_GetUDPPayloadBuffer_Stub(CMOCK_FreeRTOS_GetUDPPayloadBuffer_CALLBACK Callback);
#define FreeRTOS_GetUDPPayloadBuffer_StubWithCallback FreeRTOS_GetUDPPayloadBuffer_Stub
#define FreeRTOS_GetUDPPayloadBuffer_IgnoreArg_xRequestedSizeBytes() FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_xRequestedSizeBytes(__LINE__)
void FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_xRequestedSizeBytes(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetUDPPayloadBuffer_IgnoreArg_xBlockTimeTicks() FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_xBlockTimeTicks(__LINE__)
void FreeRTOS_GetUDPPayloadBuffer_CMockIgnoreArg_xBlockTimeTicks(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_Ignore() FreeRTOS_GetAddressConfiguration_CMockIgnore()
void FreeRTOS_GetAddressConfiguration_CMockIgnore(void);
#define FreeRTOS_GetAddressConfiguration_StopIgnore() FreeRTOS_GetAddressConfiguration_CMockStopIgnore()
void FreeRTOS_GetAddressConfiguration_CMockStopIgnore(void);
#define FreeRTOS_GetAddressConfiguration_ExpectAnyArgs() FreeRTOS_GetAddressConfiguration_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_Expect(pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress) FreeRTOS_GetAddressConfiguration_CMockExpect(__LINE__, pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress)
void FreeRTOS_GetAddressConfiguration_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, uint32_t* pulNetMask, uint32_t* pulGatewayAddress, uint32_t* pulDNSServerAddress);
typedef void (* CMOCK_FreeRTOS_GetAddressConfiguration_CALLBACK)(uint32_t* pulIPAddress, uint32_t* pulNetMask, uint32_t* pulGatewayAddress, uint32_t* pulDNSServerAddress, int cmock_num_calls);
void FreeRTOS_GetAddressConfiguration_AddCallback(CMOCK_FreeRTOS_GetAddressConfiguration_CALLBACK Callback);
void FreeRTOS_GetAddressConfiguration_Stub(CMOCK_FreeRTOS_GetAddressConfiguration_CALLBACK Callback);
#define FreeRTOS_GetAddressConfiguration_StubWithCallback FreeRTOS_GetAddressConfiguration_Stub
#define FreeRTOS_GetAddressConfiguration_ExpectWithArray(pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth) FreeRTOS_GetAddressConfiguration_CMockExpectWithArray(__LINE__, pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth)
void FreeRTOS_GetAddressConfiguration_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int pulIPAddress_Depth, uint32_t* pulNetMask, int pulNetMask_Depth, uint32_t* pulGatewayAddress, int pulGatewayAddress_Depth, uint32_t* pulDNSServerAddress, int pulDNSServerAddress_Depth);
#define FreeRTOS_GetAddressConfiguration_ReturnThruPtr_pulIPAddress(pulIPAddress) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, sizeof(uint32_t))
#define FreeRTOS_GetAddressConfiguration_ReturnArrayThruPtr_pulIPAddress(pulIPAddress, cmock_len) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, (int)(cmock_len * (int)sizeof(*pulIPAddress)))
#define FreeRTOS_GetAddressConfiguration_ReturnMemThruPtr_pulIPAddress(pulIPAddress, cmock_size) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulIPAddress(__LINE__, pulIPAddress, cmock_size)
void FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulIPAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulIPAddress, int cmock_size);
#define FreeRTOS_GetAddressConfiguration_ReturnThruPtr_pulNetMask(pulNetMask) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, sizeof(uint32_t))
#define FreeRTOS_GetAddressConfiguration_ReturnArrayThruPtr_pulNetMask(pulNetMask, cmock_len) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, (int)(cmock_len * (int)sizeof(*pulNetMask)))
#define FreeRTOS_GetAddressConfiguration_ReturnMemThruPtr_pulNetMask(pulNetMask, cmock_size) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulNetMask(__LINE__, pulNetMask, cmock_size)
void FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulNetMask(UNITY_LINE_TYPE cmock_line, uint32_t* pulNetMask, int cmock_size);
#define FreeRTOS_GetAddressConfiguration_ReturnThruPtr_pulGatewayAddress(pulGatewayAddress) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, sizeof(uint32_t))
#define FreeRTOS_GetAddressConfiguration_ReturnArrayThruPtr_pulGatewayAddress(pulGatewayAddress, cmock_len) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, (int)(cmock_len * (int)sizeof(*pulGatewayAddress)))
#define FreeRTOS_GetAddressConfiguration_ReturnMemThruPtr_pulGatewayAddress(pulGatewayAddress, cmock_size) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(__LINE__, pulGatewayAddress, cmock_size)
void FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulGatewayAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulGatewayAddress, int cmock_size);
#define FreeRTOS_GetAddressConfiguration_ReturnThruPtr_pulDNSServerAddress(pulDNSServerAddress) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, sizeof(uint32_t))
#define FreeRTOS_GetAddressConfiguration_ReturnArrayThruPtr_pulDNSServerAddress(pulDNSServerAddress, cmock_len) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, (int)(cmock_len * (int)sizeof(*pulDNSServerAddress)))
#define FreeRTOS_GetAddressConfiguration_ReturnMemThruPtr_pulDNSServerAddress(pulDNSServerAddress, cmock_size) FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(__LINE__, pulDNSServerAddress, cmock_size)
void FreeRTOS_GetAddressConfiguration_CMockReturnMemThruPtr_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line, uint32_t* pulDNSServerAddress, int cmock_size);
#define FreeRTOS_GetAddressConfiguration_IgnoreArg_pulIPAddress() FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulIPAddress(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_IgnoreArg_pulNetMask() FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulNetMask(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_IgnoreArg_pulGatewayAddress() FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulGatewayAddress(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetAddressConfiguration_IgnoreArg_pulDNSServerAddress() FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulDNSServerAddress(__LINE__)
void FreeRTOS_GetAddressConfiguration_CMockIgnoreArg_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_Ignore() FreeRTOS_SetAddressConfiguration_CMockIgnore()
void FreeRTOS_SetAddressConfiguration_CMockIgnore(void);
#define FreeRTOS_SetAddressConfiguration_StopIgnore() FreeRTOS_SetAddressConfiguration_CMockStopIgnore()
void FreeRTOS_SetAddressConfiguration_CMockStopIgnore(void);
#define FreeRTOS_SetAddressConfiguration_ExpectAnyArgs() FreeRTOS_SetAddressConfiguration_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_Expect(pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress) FreeRTOS_SetAddressConfiguration_CMockExpect(__LINE__, pulIPAddress, pulNetMask, pulGatewayAddress, pulDNSServerAddress)
void FreeRTOS_SetAddressConfiguration_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint32_t* pulIPAddress, const uint32_t* pulNetMask, const uint32_t* pulGatewayAddress, const uint32_t* pulDNSServerAddress);
typedef void (* CMOCK_FreeRTOS_SetAddressConfiguration_CALLBACK)(const uint32_t* pulIPAddress, const uint32_t* pulNetMask, const uint32_t* pulGatewayAddress, const uint32_t* pulDNSServerAddress, int cmock_num_calls);
void FreeRTOS_SetAddressConfiguration_AddCallback(CMOCK_FreeRTOS_SetAddressConfiguration_CALLBACK Callback);
void FreeRTOS_SetAddressConfiguration_Stub(CMOCK_FreeRTOS_SetAddressConfiguration_CALLBACK Callback);
#define FreeRTOS_SetAddressConfiguration_StubWithCallback FreeRTOS_SetAddressConfiguration_Stub
#define FreeRTOS_SetAddressConfiguration_ExpectWithArray(pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth) FreeRTOS_SetAddressConfiguration_CMockExpectWithArray(__LINE__, pulIPAddress, pulIPAddress_Depth, pulNetMask, pulNetMask_Depth, pulGatewayAddress, pulGatewayAddress_Depth, pulDNSServerAddress, pulDNSServerAddress_Depth)
void FreeRTOS_SetAddressConfiguration_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const uint32_t* pulIPAddress, int pulIPAddress_Depth, const uint32_t* pulNetMask, int pulNetMask_Depth, const uint32_t* pulGatewayAddress, int pulGatewayAddress_Depth, const uint32_t* pulDNSServerAddress, int pulDNSServerAddress_Depth);
#define FreeRTOS_SetAddressConfiguration_IgnoreArg_pulIPAddress() FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulIPAddress(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_IgnoreArg_pulNetMask() FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulNetMask(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulNetMask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_IgnoreArg_pulGatewayAddress() FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulGatewayAddress(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetAddressConfiguration_IgnoreArg_pulDNSServerAddress() FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulDNSServerAddress(__LINE__)
void FreeRTOS_SetAddressConfiguration_CMockIgnoreArg_pulDNSServerAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SendPingRequest_IgnoreAndReturn(cmock_retval) FreeRTOS_SendPingRequest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_SendPingRequest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_SendPingRequest_StopIgnore() FreeRTOS_SendPingRequest_CMockStopIgnore()
void FreeRTOS_SendPingRequest_CMockStopIgnore(void);
#define FreeRTOS_SendPingRequest_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_SendPingRequest_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_SendPingRequest_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_SendPingRequest_ExpectAndReturn(ulIPAddress, xNumberOfBytesToSend, xBlockTimeTicks, cmock_retval) FreeRTOS_SendPingRequest_CMockExpectAndReturn(__LINE__, ulIPAddress, xNumberOfBytesToSend, xBlockTimeTicks, cmock_retval)
void FreeRTOS_SendPingRequest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulIPAddress, size_t xNumberOfBytesToSend, TickType_t xBlockTimeTicks, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_SendPingRequest_CALLBACK)(uint32_t ulIPAddress, size_t xNumberOfBytesToSend, TickType_t xBlockTimeTicks, int cmock_num_calls);
void FreeRTOS_SendPingRequest_AddCallback(CMOCK_FreeRTOS_SendPingRequest_CALLBACK Callback);
void FreeRTOS_SendPingRequest_Stub(CMOCK_FreeRTOS_SendPingRequest_CALLBACK Callback);
#define FreeRTOS_SendPingRequest_StubWithCallback FreeRTOS_SendPingRequest_Stub
#define FreeRTOS_SendPingRequest_IgnoreArg_ulIPAddress() FreeRTOS_SendPingRequest_CMockIgnoreArg_ulIPAddress(__LINE__)
void FreeRTOS_SendPingRequest_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SendPingRequest_IgnoreArg_xNumberOfBytesToSend() FreeRTOS_SendPingRequest_CMockIgnoreArg_xNumberOfBytesToSend(__LINE__)
void FreeRTOS_SendPingRequest_CMockIgnoreArg_xNumberOfBytesToSend(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SendPingRequest_IgnoreArg_xBlockTimeTicks() FreeRTOS_SendPingRequest_CMockIgnoreArg_xBlockTimeTicks(__LINE__)
void FreeRTOS_SendPingRequest_CMockIgnoreArg_xBlockTimeTicks(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_ReleaseUDPPayloadBuffer_Ignore() FreeRTOS_ReleaseUDPPayloadBuffer_CMockIgnore()
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockIgnore(void);
#define FreeRTOS_ReleaseUDPPayloadBuffer_StopIgnore() FreeRTOS_ReleaseUDPPayloadBuffer_CMockStopIgnore()
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockStopIgnore(void);
#define FreeRTOS_ReleaseUDPPayloadBuffer_ExpectAnyArgs() FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_ReleaseUDPPayloadBuffer_Expect(pvBuffer) FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpect(__LINE__, pvBuffer)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpect(UNITY_LINE_TYPE cmock_line, void* pvBuffer);
typedef void (* CMOCK_FreeRTOS_ReleaseUDPPayloadBuffer_CALLBACK)(void* pvBuffer, int cmock_num_calls);
void FreeRTOS_ReleaseUDPPayloadBuffer_AddCallback(CMOCK_FreeRTOS_ReleaseUDPPayloadBuffer_CALLBACK Callback);
void FreeRTOS_ReleaseUDPPayloadBuffer_Stub(CMOCK_FreeRTOS_ReleaseUDPPayloadBuffer_CALLBACK Callback);
#define FreeRTOS_ReleaseUDPPayloadBuffer_StubWithCallback FreeRTOS_ReleaseUDPPayloadBuffer_Stub
#define FreeRTOS_ReleaseUDPPayloadBuffer_ExpectWithArray(pvBuffer, pvBuffer_Depth) FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpectWithArray(__LINE__, pvBuffer, pvBuffer_Depth)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int pvBuffer_Depth);
#define FreeRTOS_ReleaseUDPPayloadBuffer_ReturnThruPtr_pvBuffer(pvBuffer) FreeRTOS_ReleaseUDPPayloadBuffer_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(void))
#define FreeRTOS_ReleaseUDPPayloadBuffer_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) FreeRTOS_ReleaseUDPPayloadBuffer_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define FreeRTOS_ReleaseUDPPayloadBuffer_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) FreeRTOS_ReleaseUDPPayloadBuffer_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define FreeRTOS_ReleaseUDPPayloadBuffer_IgnoreArg_pvBuffer() FreeRTOS_ReleaseUDPPayloadBuffer_CMockIgnoreArg_pvBuffer(__LINE__)
void FreeRTOS_ReleaseUDPPayloadBuffer_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetMACAddress_IgnoreAndReturn(cmock_retval) FreeRTOS_GetMACAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetMACAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* cmock_to_return);
#define FreeRTOS_GetMACAddress_StopIgnore() FreeRTOS_GetMACAddress_CMockStopIgnore()
void FreeRTOS_GetMACAddress_CMockStopIgnore(void);
#define FreeRTOS_GetMACAddress_ExpectAndReturn(cmock_retval) FreeRTOS_GetMACAddress_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetMACAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint8_t* cmock_to_return);
typedef const uint8_t* (* CMOCK_FreeRTOS_GetMACAddress_CALLBACK)(int cmock_num_calls);
void FreeRTOS_GetMACAddress_AddCallback(CMOCK_FreeRTOS_GetMACAddress_CALLBACK Callback);
void FreeRTOS_GetMACAddress_Stub(CMOCK_FreeRTOS_GetMACAddress_CALLBACK Callback);
#define FreeRTOS_GetMACAddress_StubWithCallback FreeRTOS_GetMACAddress_Stub
#define FreeRTOS_UpdateMACAddress_Ignore() FreeRTOS_UpdateMACAddress_CMockIgnore()
void FreeRTOS_UpdateMACAddress_CMockIgnore(void);
#define FreeRTOS_UpdateMACAddress_StopIgnore() FreeRTOS_UpdateMACAddress_CMockStopIgnore()
void FreeRTOS_UpdateMACAddress_CMockStopIgnore(void);
#define FreeRTOS_UpdateMACAddress_ExpectAnyArgs() FreeRTOS_UpdateMACAddress_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_UpdateMACAddress_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_UpdateMACAddress_Expect(ucMACAddress) FreeRTOS_UpdateMACAddress_CMockExpect(__LINE__, ucMACAddress)
void FreeRTOS_UpdateMACAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint8_t* ucMACAddress);
typedef void (* CMOCK_FreeRTOS_UpdateMACAddress_CALLBACK)(const uint8_t* ucMACAddress, int cmock_num_calls);
void FreeRTOS_UpdateMACAddress_AddCallback(CMOCK_FreeRTOS_UpdateMACAddress_CALLBACK Callback);
void FreeRTOS_UpdateMACAddress_Stub(CMOCK_FreeRTOS_UpdateMACAddress_CALLBACK Callback);
#define FreeRTOS_UpdateMACAddress_StubWithCallback FreeRTOS_UpdateMACAddress_Stub
#define FreeRTOS_UpdateMACAddress_ExpectWithArray(ucMACAddress, ucMACAddress_Depth) FreeRTOS_UpdateMACAddress_CMockExpectWithArray(__LINE__, ucMACAddress, ucMACAddress_Depth)
void FreeRTOS_UpdateMACAddress_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const uint8_t* ucMACAddress, int ucMACAddress_Depth);
#define FreeRTOS_UpdateMACAddress_IgnoreArg_ucMACAddress() FreeRTOS_UpdateMACAddress_CMockIgnoreArg_ucMACAddress(__LINE__)
void FreeRTOS_UpdateMACAddress_CMockIgnoreArg_ucMACAddress(UNITY_LINE_TYPE cmock_line);
#define vApplicationIPNetworkEventHook_Ignore() vApplicationIPNetworkEventHook_CMockIgnore()
void vApplicationIPNetworkEventHook_CMockIgnore(void);
#define vApplicationIPNetworkEventHook_StopIgnore() vApplicationIPNetworkEventHook_CMockStopIgnore()
void vApplicationIPNetworkEventHook_CMockStopIgnore(void);
#define vApplicationIPNetworkEventHook_ExpectAnyArgs() vApplicationIPNetworkEventHook_CMockExpectAnyArgs(__LINE__)
void vApplicationIPNetworkEventHook_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vApplicationIPNetworkEventHook_Expect(eNetworkEvent) vApplicationIPNetworkEventHook_CMockExpect(__LINE__, eNetworkEvent)
void vApplicationIPNetworkEventHook_CMockExpect(UNITY_LINE_TYPE cmock_line, eIPCallbackEvent_t eNetworkEvent);
typedef void (* CMOCK_vApplicationIPNetworkEventHook_CALLBACK)(eIPCallbackEvent_t eNetworkEvent, int cmock_num_calls);
void vApplicationIPNetworkEventHook_AddCallback(CMOCK_vApplicationIPNetworkEventHook_CALLBACK Callback);
void vApplicationIPNetworkEventHook_Stub(CMOCK_vApplicationIPNetworkEventHook_CALLBACK Callback);
#define vApplicationIPNetworkEventHook_StubWithCallback vApplicationIPNetworkEventHook_Stub
#define vApplicationIPNetworkEventHook_IgnoreArg_eNetworkEvent() vApplicationIPNetworkEventHook_CMockIgnoreArg_eNetworkEvent(__LINE__)
void vApplicationIPNetworkEventHook_CMockIgnoreArg_eNetworkEvent(UNITY_LINE_TYPE cmock_line);
#define vApplicationPingReplyHook_Ignore() vApplicationPingReplyHook_CMockIgnore()
void vApplicationPingReplyHook_CMockIgnore(void);
#define vApplicationPingReplyHook_StopIgnore() vApplicationPingReplyHook_CMockStopIgnore()
void vApplicationPingReplyHook_CMockStopIgnore(void);
#define vApplicationPingReplyHook_ExpectAnyArgs() vApplicationPingReplyHook_CMockExpectAnyArgs(__LINE__)
void vApplicationPingReplyHook_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vApplicationPingReplyHook_Expect(eStatus, usIdentifier) vApplicationPingReplyHook_CMockExpect(__LINE__, eStatus, usIdentifier)
void vApplicationPingReplyHook_CMockExpect(UNITY_LINE_TYPE cmock_line, ePingReplyStatus_t eStatus, uint16_t usIdentifier);
typedef void (* CMOCK_vApplicationPingReplyHook_CALLBACK)(ePingReplyStatus_t eStatus, uint16_t usIdentifier, int cmock_num_calls);
void vApplicationPingReplyHook_AddCallback(CMOCK_vApplicationPingReplyHook_CALLBACK Callback);
void vApplicationPingReplyHook_Stub(CMOCK_vApplicationPingReplyHook_CALLBACK Callback);
#define vApplicationPingReplyHook_StubWithCallback vApplicationPingReplyHook_Stub
#define vApplicationPingReplyHook_IgnoreArg_eStatus() vApplicationPingReplyHook_CMockIgnoreArg_eStatus(__LINE__)
void vApplicationPingReplyHook_CMockIgnoreArg_eStatus(UNITY_LINE_TYPE cmock_line);
#define vApplicationPingReplyHook_IgnoreArg_usIdentifier() vApplicationPingReplyHook_CMockIgnoreArg_usIdentifier(__LINE__)
void vApplicationPingReplyHook_CMockIgnoreArg_usIdentifier(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetIPAddress_IgnoreAndReturn(cmock_retval) FreeRTOS_GetIPAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetIPAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_GetIPAddress_StopIgnore() FreeRTOS_GetIPAddress_CMockStopIgnore()
void FreeRTOS_GetIPAddress_CMockStopIgnore(void);
#define FreeRTOS_GetIPAddress_ExpectAndReturn(cmock_retval) FreeRTOS_GetIPAddress_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetIPAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_GetIPAddress_CALLBACK)(int cmock_num_calls);
void FreeRTOS_GetIPAddress_AddCallback(CMOCK_FreeRTOS_GetIPAddress_CALLBACK Callback);
void FreeRTOS_GetIPAddress_Stub(CMOCK_FreeRTOS_GetIPAddress_CALLBACK Callback);
#define FreeRTOS_GetIPAddress_StubWithCallback FreeRTOS_GetIPAddress_Stub
#define FreeRTOS_SetIPAddress_Ignore() FreeRTOS_SetIPAddress_CMockIgnore()
void FreeRTOS_SetIPAddress_CMockIgnore(void);
#define FreeRTOS_SetIPAddress_StopIgnore() FreeRTOS_SetIPAddress_CMockStopIgnore()
void FreeRTOS_SetIPAddress_CMockStopIgnore(void);
#define FreeRTOS_SetIPAddress_ExpectAnyArgs() FreeRTOS_SetIPAddress_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_SetIPAddress_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetIPAddress_Expect(ulIPAddress) FreeRTOS_SetIPAddress_CMockExpect(__LINE__, ulIPAddress)
void FreeRTOS_SetIPAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ulIPAddress);
typedef void (* CMOCK_FreeRTOS_SetIPAddress_CALLBACK)(uint32_t ulIPAddress, int cmock_num_calls);
void FreeRTOS_SetIPAddress_AddCallback(CMOCK_FreeRTOS_SetIPAddress_CALLBACK Callback);
void FreeRTOS_SetIPAddress_Stub(CMOCK_FreeRTOS_SetIPAddress_CALLBACK Callback);
#define FreeRTOS_SetIPAddress_StubWithCallback FreeRTOS_SetIPAddress_Stub
#define FreeRTOS_SetIPAddress_IgnoreArg_ulIPAddress() FreeRTOS_SetIPAddress_CMockIgnoreArg_ulIPAddress(__LINE__)
void FreeRTOS_SetIPAddress_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetNetmask_Ignore() FreeRTOS_SetNetmask_CMockIgnore()
void FreeRTOS_SetNetmask_CMockIgnore(void);
#define FreeRTOS_SetNetmask_StopIgnore() FreeRTOS_SetNetmask_CMockStopIgnore()
void FreeRTOS_SetNetmask_CMockStopIgnore(void);
#define FreeRTOS_SetNetmask_ExpectAnyArgs() FreeRTOS_SetNetmask_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_SetNetmask_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetNetmask_Expect(ulNetmask) FreeRTOS_SetNetmask_CMockExpect(__LINE__, ulNetmask)
void FreeRTOS_SetNetmask_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ulNetmask);
typedef void (* CMOCK_FreeRTOS_SetNetmask_CALLBACK)(uint32_t ulNetmask, int cmock_num_calls);
void FreeRTOS_SetNetmask_AddCallback(CMOCK_FreeRTOS_SetNetmask_CALLBACK Callback);
void FreeRTOS_SetNetmask_Stub(CMOCK_FreeRTOS_SetNetmask_CALLBACK Callback);
#define FreeRTOS_SetNetmask_StubWithCallback FreeRTOS_SetNetmask_Stub
#define FreeRTOS_SetNetmask_IgnoreArg_ulNetmask() FreeRTOS_SetNetmask_CMockIgnoreArg_ulNetmask(__LINE__)
void FreeRTOS_SetNetmask_CMockIgnoreArg_ulNetmask(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetGatewayAddress_Ignore() FreeRTOS_SetGatewayAddress_CMockIgnore()
void FreeRTOS_SetGatewayAddress_CMockIgnore(void);
#define FreeRTOS_SetGatewayAddress_StopIgnore() FreeRTOS_SetGatewayAddress_CMockStopIgnore()
void FreeRTOS_SetGatewayAddress_CMockStopIgnore(void);
#define FreeRTOS_SetGatewayAddress_ExpectAnyArgs() FreeRTOS_SetGatewayAddress_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_SetGatewayAddress_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SetGatewayAddress_Expect(ulGatewayAddress) FreeRTOS_SetGatewayAddress_CMockExpect(__LINE__, ulGatewayAddress)
void FreeRTOS_SetGatewayAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ulGatewayAddress);
typedef void (* CMOCK_FreeRTOS_SetGatewayAddress_CALLBACK)(uint32_t ulGatewayAddress, int cmock_num_calls);
void FreeRTOS_SetGatewayAddress_AddCallback(CMOCK_FreeRTOS_SetGatewayAddress_CALLBACK Callback);
void FreeRTOS_SetGatewayAddress_Stub(CMOCK_FreeRTOS_SetGatewayAddress_CALLBACK Callback);
#define FreeRTOS_SetGatewayAddress_StubWithCallback FreeRTOS_SetGatewayAddress_Stub
#define FreeRTOS_SetGatewayAddress_IgnoreArg_ulGatewayAddress() FreeRTOS_SetGatewayAddress_CMockIgnoreArg_ulGatewayAddress(__LINE__)
void FreeRTOS_SetGatewayAddress_CMockIgnoreArg_ulGatewayAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetGatewayAddress_IgnoreAndReturn(cmock_retval) FreeRTOS_GetGatewayAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetGatewayAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_GetGatewayAddress_StopIgnore() FreeRTOS_GetGatewayAddress_CMockStopIgnore()
void FreeRTOS_GetGatewayAddress_CMockStopIgnore(void);
#define FreeRTOS_GetGatewayAddress_ExpectAndReturn(cmock_retval) FreeRTOS_GetGatewayAddress_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetGatewayAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_GetGatewayAddress_CALLBACK)(int cmock_num_calls);
void FreeRTOS_GetGatewayAddress_AddCallback(CMOCK_FreeRTOS_GetGatewayAddress_CALLBACK Callback);
void FreeRTOS_GetGatewayAddress_Stub(CMOCK_FreeRTOS_GetGatewayAddress_CALLBACK Callback);
#define FreeRTOS_GetGatewayAddress_StubWithCallback FreeRTOS_GetGatewayAddress_Stub
#define FreeRTOS_GetDNSServerAddress_IgnoreAndReturn(cmock_retval) FreeRTOS_GetDNSServerAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetDNSServerAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_GetDNSServerAddress_StopIgnore() FreeRTOS_GetDNSServerAddress_CMockStopIgnore()
void FreeRTOS_GetDNSServerAddress_CMockStopIgnore(void);
#define FreeRTOS_GetDNSServerAddress_ExpectAndReturn(cmock_retval) FreeRTOS_GetDNSServerAddress_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetDNSServerAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_GetDNSServerAddress_CALLBACK)(int cmock_num_calls);
void FreeRTOS_GetDNSServerAddress_AddCallback(CMOCK_FreeRTOS_GetDNSServerAddress_CALLBACK Callback);
void FreeRTOS_GetDNSServerAddress_Stub(CMOCK_FreeRTOS_GetDNSServerAddress_CALLBACK Callback);
#define FreeRTOS_GetDNSServerAddress_StubWithCallback FreeRTOS_GetDNSServerAddress_Stub
#define FreeRTOS_GetNetmask_IgnoreAndReturn(cmock_retval) FreeRTOS_GetNetmask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetNetmask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_GetNetmask_StopIgnore() FreeRTOS_GetNetmask_CMockStopIgnore()
void FreeRTOS_GetNetmask_CMockStopIgnore(void);
#define FreeRTOS_GetNetmask_ExpectAndReturn(cmock_retval) FreeRTOS_GetNetmask_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetNetmask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_GetNetmask_CALLBACK)(int cmock_num_calls);
void FreeRTOS_GetNetmask_AddCallback(CMOCK_FreeRTOS_GetNetmask_CALLBACK Callback);
void FreeRTOS_GetNetmask_Stub(CMOCK_FreeRTOS_GetNetmask_CALLBACK Callback);
#define FreeRTOS_GetNetmask_StubWithCallback FreeRTOS_GetNetmask_Stub
#define FreeRTOS_OutputARPRequest_Ignore() FreeRTOS_OutputARPRequest_CMockIgnore()
void FreeRTOS_OutputARPRequest_CMockIgnore(void);
#define FreeRTOS_OutputARPRequest_StopIgnore() FreeRTOS_OutputARPRequest_CMockStopIgnore()
void FreeRTOS_OutputARPRequest_CMockStopIgnore(void);
#define FreeRTOS_OutputARPRequest_ExpectAnyArgs() FreeRTOS_OutputARPRequest_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_OutputARPRequest_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_OutputARPRequest_Expect(ulIPAddress) FreeRTOS_OutputARPRequest_CMockExpect(__LINE__, ulIPAddress)
void FreeRTOS_OutputARPRequest_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ulIPAddress);
typedef void (* CMOCK_FreeRTOS_OutputARPRequest_CALLBACK)(uint32_t ulIPAddress, int cmock_num_calls);
void FreeRTOS_OutputARPRequest_AddCallback(CMOCK_FreeRTOS_OutputARPRequest_CALLBACK Callback);
void FreeRTOS_OutputARPRequest_Stub(CMOCK_FreeRTOS_OutputARPRequest_CALLBACK Callback);
#define FreeRTOS_OutputARPRequest_StubWithCallback FreeRTOS_OutputARPRequest_Stub
#define FreeRTOS_OutputARPRequest_IgnoreArg_ulIPAddress() FreeRTOS_OutputARPRequest_CMockIgnoreArg_ulIPAddress(__LINE__)
void FreeRTOS_OutputARPRequest_CMockIgnoreArg_ulIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_IsNetworkUp_IgnoreAndReturn(cmock_retval) FreeRTOS_IsNetworkUp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_IsNetworkUp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_IsNetworkUp_StopIgnore() FreeRTOS_IsNetworkUp_CMockStopIgnore()
void FreeRTOS_IsNetworkUp_CMockStopIgnore(void);
#define FreeRTOS_IsNetworkUp_ExpectAndReturn(cmock_retval) FreeRTOS_IsNetworkUp_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_IsNetworkUp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_IsNetworkUp_CALLBACK)(int cmock_num_calls);
void FreeRTOS_IsNetworkUp_AddCallback(CMOCK_FreeRTOS_IsNetworkUp_CALLBACK Callback);
void FreeRTOS_IsNetworkUp_Stub(CMOCK_FreeRTOS_IsNetworkUp_CALLBACK Callback);
#define FreeRTOS_IsNetworkUp_StubWithCallback FreeRTOS_IsNetworkUp_Stub
#define uxGetMinimumIPQueueSpace_IgnoreAndReturn(cmock_retval) uxGetMinimumIPQueueSpace_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxGetMinimumIPQueueSpace_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxGetMinimumIPQueueSpace_StopIgnore() uxGetMinimumIPQueueSpace_CMockStopIgnore()
void uxGetMinimumIPQueueSpace_CMockStopIgnore(void);
#define uxGetMinimumIPQueueSpace_ExpectAndReturn(cmock_retval) uxGetMinimumIPQueueSpace_CMockExpectAndReturn(__LINE__, cmock_retval)
void uxGetMinimumIPQueueSpace_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxGetMinimumIPQueueSpace_CALLBACK)(int cmock_num_calls);
void uxGetMinimumIPQueueSpace_AddCallback(CMOCK_uxGetMinimumIPQueueSpace_CALLBACK Callback);
void uxGetMinimumIPQueueSpace_Stub(CMOCK_uxGetMinimumIPQueueSpace_CALLBACK Callback);
#define uxGetMinimumIPQueueSpace_StubWithCallback uxGetMinimumIPQueueSpace_Stub
#define FreeRTOS_GetTCPStateName_IgnoreAndReturn(cmock_retval) FreeRTOS_GetTCPStateName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetTCPStateName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define FreeRTOS_GetTCPStateName_StopIgnore() FreeRTOS_GetTCPStateName_CMockStopIgnore()
void FreeRTOS_GetTCPStateName_CMockStopIgnore(void);
#define FreeRTOS_GetTCPStateName_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_GetTCPStateName_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetTCPStateName_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define FreeRTOS_GetTCPStateName_ExpectAndReturn(ulState, cmock_retval) FreeRTOS_GetTCPStateName_CMockExpectAndReturn(__LINE__, ulState, cmock_retval)
void FreeRTOS_GetTCPStateName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t ulState, const char* cmock_to_return);
typedef const char* (* CMOCK_FreeRTOS_GetTCPStateName_CALLBACK)(UBaseType_t ulState, int cmock_num_calls);
void FreeRTOS_GetTCPStateName_AddCallback(CMOCK_FreeRTOS_GetTCPStateName_CALLBACK Callback);
void FreeRTOS_GetTCPStateName_Stub(CMOCK_FreeRTOS_GetTCPStateName_CALLBACK Callback);
#define FreeRTOS_GetTCPStateName_StubWithCallback FreeRTOS_GetTCPStateName_Stub
#define FreeRTOS_GetTCPStateName_IgnoreArg_ulState() FreeRTOS_GetTCPStateName_CMockIgnoreArg_ulState(__LINE__)
void FreeRTOS_GetTCPStateName_CMockIgnoreArg_ulState(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_PrintARPCache_Ignore() FreeRTOS_PrintARPCache_CMockIgnore()
void FreeRTOS_PrintARPCache_CMockIgnore(void);
#define FreeRTOS_PrintARPCache_StopIgnore() FreeRTOS_PrintARPCache_CMockStopIgnore()
void FreeRTOS_PrintARPCache_CMockStopIgnore(void);
#define FreeRTOS_PrintARPCache_Expect() FreeRTOS_PrintARPCache_CMockExpect(__LINE__)
void FreeRTOS_PrintARPCache_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_FreeRTOS_PrintARPCache_CALLBACK)(int cmock_num_calls);
void FreeRTOS_PrintARPCache_AddCallback(CMOCK_FreeRTOS_PrintARPCache_CALLBACK Callback);
void FreeRTOS_PrintARPCache_Stub(CMOCK_FreeRTOS_PrintARPCache_CALLBACK Callback);
#define FreeRTOS_PrintARPCache_StubWithCallback FreeRTOS_PrintARPCache_Stub
#define FreeRTOS_ClearARP_Ignore() FreeRTOS_ClearARP_CMockIgnore()
void FreeRTOS_ClearARP_CMockIgnore(void);
#define FreeRTOS_ClearARP_StopIgnore() FreeRTOS_ClearARP_CMockStopIgnore()
void FreeRTOS_ClearARP_CMockStopIgnore(void);
#define FreeRTOS_ClearARP_Expect() FreeRTOS_ClearARP_CMockExpect(__LINE__)
void FreeRTOS_ClearARP_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_FreeRTOS_ClearARP_CALLBACK)(int cmock_num_calls);
void FreeRTOS_ClearARP_AddCallback(CMOCK_FreeRTOS_ClearARP_CALLBACK Callback);
void FreeRTOS_ClearARP_Stub(CMOCK_FreeRTOS_ClearARP_CALLBACK Callback);
#define FreeRTOS_ClearARP_StubWithCallback FreeRTOS_ClearARP_Stub
#define pcApplicationHostnameHook_IgnoreAndReturn(cmock_retval) pcApplicationHostnameHook_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pcApplicationHostnameHook_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define pcApplicationHostnameHook_StopIgnore() pcApplicationHostnameHook_CMockStopIgnore()
void pcApplicationHostnameHook_CMockStopIgnore(void);
#define pcApplicationHostnameHook_ExpectAndReturn(cmock_retval) pcApplicationHostnameHook_CMockExpectAndReturn(__LINE__, cmock_retval)
void pcApplicationHostnameHook_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
typedef const char* (* CMOCK_pcApplicationHostnameHook_CALLBACK)(int cmock_num_calls);
void pcApplicationHostnameHook_AddCallback(CMOCK_pcApplicationHostnameHook_CALLBACK Callback);
void pcApplicationHostnameHook_Stub(CMOCK_pcApplicationHostnameHook_CALLBACK Callback);
#define pcApplicationHostnameHook_StubWithCallback pcApplicationHostnameHook_Stub
#define xApplicationGetRandomNumber_IgnoreAndReturn(cmock_retval) xApplicationGetRandomNumber_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xApplicationGetRandomNumber_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xApplicationGetRandomNumber_StopIgnore() xApplicationGetRandomNumber_CMockStopIgnore()
void xApplicationGetRandomNumber_CMockStopIgnore(void);
#define xApplicationGetRandomNumber_ExpectAnyArgsAndReturn(cmock_retval) xApplicationGetRandomNumber_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xApplicationGetRandomNumber_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xApplicationGetRandomNumber_ExpectAndReturn(pulNumber, cmock_retval) xApplicationGetRandomNumber_CMockExpectAndReturn(__LINE__, pulNumber, cmock_retval)
void xApplicationGetRandomNumber_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* pulNumber, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xApplicationGetRandomNumber_CALLBACK)(uint32_t* pulNumber, int cmock_num_calls);
void xApplicationGetRandomNumber_AddCallback(CMOCK_xApplicationGetRandomNumber_CALLBACK Callback);
void xApplicationGetRandomNumber_Stub(CMOCK_xApplicationGetRandomNumber_CALLBACK Callback);
#define xApplicationGetRandomNumber_StubWithCallback xApplicationGetRandomNumber_Stub
#define xApplicationGetRandomNumber_ExpectWithArrayAndReturn(pulNumber, pulNumber_Depth, cmock_retval) xApplicationGetRandomNumber_CMockExpectWithArrayAndReturn(__LINE__, pulNumber, pulNumber_Depth, cmock_retval)
void xApplicationGetRandomNumber_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t* pulNumber, int pulNumber_Depth, BaseType_t cmock_to_return);
#define xApplicationGetRandomNumber_ReturnThruPtr_pulNumber(pulNumber) xApplicationGetRandomNumber_CMockReturnMemThruPtr_pulNumber(__LINE__, pulNumber, sizeof(uint32_t))
#define xApplicationGetRandomNumber_ReturnArrayThruPtr_pulNumber(pulNumber, cmock_len) xApplicationGetRandomNumber_CMockReturnMemThruPtr_pulNumber(__LINE__, pulNumber, (int)(cmock_len * (int)sizeof(*pulNumber)))
#define xApplicationGetRandomNumber_ReturnMemThruPtr_pulNumber(pulNumber, cmock_size) xApplicationGetRandomNumber_CMockReturnMemThruPtr_pulNumber(__LINE__, pulNumber, cmock_size)
void xApplicationGetRandomNumber_CMockReturnMemThruPtr_pulNumber(UNITY_LINE_TYPE cmock_line, uint32_t* pulNumber, int cmock_size);
#define xApplicationGetRandomNumber_IgnoreArg_pulNumber() xApplicationGetRandomNumber_CMockIgnoreArg_pulNumber(__LINE__)
void xApplicationGetRandomNumber_CMockIgnoreArg_pulNumber(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
