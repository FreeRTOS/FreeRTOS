/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_TASK_H
#define _MOCK_TASK_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include "FreeRTOS.h"
#include "task.h"
#include "list.h"
#include "queue.h"
#include "FreeRTOS_IP.h"
#include "task.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_task_Init(void);
void mock_task_Destroy(void);
void mock_task_Verify(void);




#define xTaskCreate_IgnoreAndReturn(cmock_retval) xTaskCreate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskCreate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCreate_StopIgnore() xTaskCreate_CMockStopIgnore()
void xTaskCreate_CMockStopIgnore(void);
#define xTaskCreate_ExpectAnyArgsAndReturn(cmock_retval) xTaskCreate_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskCreate_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCreate_ExpectAndReturn(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask, cmock_retval) xTaskCreate_CMockExpectAndReturn(__LINE__, pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask, cmock_retval)
void xTaskCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskFunction_t pxTaskCode, const char* const pcName, const configSTACK_DEPTH_TYPE usStackDepth, void* const pvParameters, UBaseType_t uxPriority, TaskHandle_t* const pxCreatedTask, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskCreate_CALLBACK)(TaskFunction_t pxTaskCode, const char* const pcName, const configSTACK_DEPTH_TYPE usStackDepth, void* const pvParameters, UBaseType_t uxPriority, TaskHandle_t* const pxCreatedTask, int cmock_num_calls);
void xTaskCreate_AddCallback(CMOCK_xTaskCreate_CALLBACK Callback);
void xTaskCreate_Stub(CMOCK_xTaskCreate_CALLBACK Callback);
#define xTaskCreate_StubWithCallback xTaskCreate_Stub
#define xTaskCreate_ExpectWithArrayAndReturn(pxTaskCode, pcName, usStackDepth, pvParameters, pvParameters_Depth, uxPriority, pxCreatedTask, pxCreatedTask_Depth, cmock_retval) xTaskCreate_CMockExpectWithArrayAndReturn(__LINE__, pxTaskCode, pcName, usStackDepth, pvParameters, pvParameters_Depth, uxPriority, pxCreatedTask, pxCreatedTask_Depth, cmock_retval)
void xTaskCreate_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TaskFunction_t pxTaskCode, const char* const pcName, const configSTACK_DEPTH_TYPE usStackDepth, void* const pvParameters, int pvParameters_Depth, UBaseType_t uxPriority, TaskHandle_t* const pxCreatedTask, int pxCreatedTask_Depth, BaseType_t cmock_to_return);
#define xTaskCreate_ReturnThruPtr_pvParameters(pvParameters) xTaskCreate_CMockReturnMemThruPtr_pvParameters(__LINE__, pvParameters, sizeof(void))
#define xTaskCreate_ReturnArrayThruPtr_pvParameters(pvParameters, cmock_len) xTaskCreate_CMockReturnMemThruPtr_pvParameters(__LINE__, pvParameters, (int)(cmock_len * (int)sizeof(*pvParameters)))
#define xTaskCreate_ReturnMemThruPtr_pvParameters(pvParameters, cmock_size) xTaskCreate_CMockReturnMemThruPtr_pvParameters(__LINE__, pvParameters, cmock_size)
void xTaskCreate_CMockReturnMemThruPtr_pvParameters(UNITY_LINE_TYPE cmock_line, void* pvParameters, int cmock_size);
#define xTaskCreate_ReturnThruPtr_pxCreatedTask(pxCreatedTask) xTaskCreate_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, sizeof(TaskHandle_t))
#define xTaskCreate_ReturnArrayThruPtr_pxCreatedTask(pxCreatedTask, cmock_len) xTaskCreate_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, (int)(cmock_len * (int)sizeof(*pxCreatedTask)))
#define xTaskCreate_ReturnMemThruPtr_pxCreatedTask(pxCreatedTask, cmock_size) xTaskCreate_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, cmock_size)
void xTaskCreate_CMockReturnMemThruPtr_pxCreatedTask(UNITY_LINE_TYPE cmock_line, TaskHandle_t* pxCreatedTask, int cmock_size);
#define xTaskCreate_IgnoreArg_pxTaskCode() xTaskCreate_CMockIgnoreArg_pxTaskCode(__LINE__)
void xTaskCreate_CMockIgnoreArg_pxTaskCode(UNITY_LINE_TYPE cmock_line);
#define xTaskCreate_IgnoreArg_pcName() xTaskCreate_CMockIgnoreArg_pcName(__LINE__)
void xTaskCreate_CMockIgnoreArg_pcName(UNITY_LINE_TYPE cmock_line);
#define xTaskCreate_IgnoreArg_usStackDepth() xTaskCreate_CMockIgnoreArg_usStackDepth(__LINE__)
void xTaskCreate_CMockIgnoreArg_usStackDepth(UNITY_LINE_TYPE cmock_line);
#define xTaskCreate_IgnoreArg_pvParameters() xTaskCreate_CMockIgnoreArg_pvParameters(__LINE__)
void xTaskCreate_CMockIgnoreArg_pvParameters(UNITY_LINE_TYPE cmock_line);
#define xTaskCreate_IgnoreArg_uxPriority() xTaskCreate_CMockIgnoreArg_uxPriority(__LINE__)
void xTaskCreate_CMockIgnoreArg_uxPriority(UNITY_LINE_TYPE cmock_line);
#define xTaskCreate_IgnoreArg_pxCreatedTask() xTaskCreate_CMockIgnoreArg_pxCreatedTask(__LINE__)
void xTaskCreate_CMockIgnoreArg_pxCreatedTask(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateStatic_IgnoreAndReturn(cmock_retval) xTaskCreateStatic_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskCreateStatic_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define xTaskCreateStatic_StopIgnore() xTaskCreateStatic_CMockStopIgnore()
void xTaskCreateStatic_CMockStopIgnore(void);
#define xTaskCreateStatic_ExpectAnyArgsAndReturn(cmock_retval) xTaskCreateStatic_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskCreateStatic_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define xTaskCreateStatic_ExpectAndReturn(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, cmock_retval) xTaskCreateStatic_CMockExpectAndReturn(__LINE__, pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, cmock_retval)
void xTaskCreateStatic_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskFunction_t pxTaskCode, const char* const pcName, const uint32_t ulStackDepth, void* const pvParameters, UBaseType_t uxPriority, StackType_t* const puxStackBuffer, StaticTask_t* const pxTaskBuffer, TaskHandle_t cmock_to_return);
typedef TaskHandle_t (* CMOCK_xTaskCreateStatic_CALLBACK)(TaskFunction_t pxTaskCode, const char* const pcName, const uint32_t ulStackDepth, void* const pvParameters, UBaseType_t uxPriority, StackType_t* const puxStackBuffer, StaticTask_t* const pxTaskBuffer, int cmock_num_calls);
void xTaskCreateStatic_AddCallback(CMOCK_xTaskCreateStatic_CALLBACK Callback);
void xTaskCreateStatic_Stub(CMOCK_xTaskCreateStatic_CALLBACK Callback);
#define xTaskCreateStatic_StubWithCallback xTaskCreateStatic_Stub
#define xTaskCreateStatic_ExpectWithArrayAndReturn(pxTaskCode, pcName, ulStackDepth, pvParameters, pvParameters_Depth, uxPriority, puxStackBuffer, puxStackBuffer_Depth, pxTaskBuffer, pxTaskBuffer_Depth, cmock_retval) xTaskCreateStatic_CMockExpectWithArrayAndReturn(__LINE__, pxTaskCode, pcName, ulStackDepth, pvParameters, pvParameters_Depth, uxPriority, puxStackBuffer, puxStackBuffer_Depth, pxTaskBuffer, pxTaskBuffer_Depth, cmock_retval)
void xTaskCreateStatic_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TaskFunction_t pxTaskCode, const char* const pcName, const uint32_t ulStackDepth, void* const pvParameters, int pvParameters_Depth, UBaseType_t uxPriority, StackType_t* const puxStackBuffer, int puxStackBuffer_Depth, StaticTask_t* const pxTaskBuffer, int pxTaskBuffer_Depth, TaskHandle_t cmock_to_return);
#define xTaskCreateStatic_ReturnThruPtr_pvParameters(pvParameters) xTaskCreateStatic_CMockReturnMemThruPtr_pvParameters(__LINE__, pvParameters, sizeof(void))
#define xTaskCreateStatic_ReturnArrayThruPtr_pvParameters(pvParameters, cmock_len) xTaskCreateStatic_CMockReturnMemThruPtr_pvParameters(__LINE__, pvParameters, (int)(cmock_len * (int)sizeof(*pvParameters)))
#define xTaskCreateStatic_ReturnMemThruPtr_pvParameters(pvParameters, cmock_size) xTaskCreateStatic_CMockReturnMemThruPtr_pvParameters(__LINE__, pvParameters, cmock_size)
void xTaskCreateStatic_CMockReturnMemThruPtr_pvParameters(UNITY_LINE_TYPE cmock_line, void* pvParameters, int cmock_size);
#define xTaskCreateStatic_ReturnThruPtr_puxStackBuffer(puxStackBuffer) xTaskCreateStatic_CMockReturnMemThruPtr_puxStackBuffer(__LINE__, puxStackBuffer, sizeof(StackType_t))
#define xTaskCreateStatic_ReturnArrayThruPtr_puxStackBuffer(puxStackBuffer, cmock_len) xTaskCreateStatic_CMockReturnMemThruPtr_puxStackBuffer(__LINE__, puxStackBuffer, (int)(cmock_len * (int)sizeof(*puxStackBuffer)))
#define xTaskCreateStatic_ReturnMemThruPtr_puxStackBuffer(puxStackBuffer, cmock_size) xTaskCreateStatic_CMockReturnMemThruPtr_puxStackBuffer(__LINE__, puxStackBuffer, cmock_size)
void xTaskCreateStatic_CMockReturnMemThruPtr_puxStackBuffer(UNITY_LINE_TYPE cmock_line, StackType_t* puxStackBuffer, int cmock_size);
#define xTaskCreateStatic_ReturnThruPtr_pxTaskBuffer(pxTaskBuffer) xTaskCreateStatic_CMockReturnMemThruPtr_pxTaskBuffer(__LINE__, pxTaskBuffer, sizeof(StaticTask_t))
#define xTaskCreateStatic_ReturnArrayThruPtr_pxTaskBuffer(pxTaskBuffer, cmock_len) xTaskCreateStatic_CMockReturnMemThruPtr_pxTaskBuffer(__LINE__, pxTaskBuffer, (int)(cmock_len * (int)sizeof(*pxTaskBuffer)))
#define xTaskCreateStatic_ReturnMemThruPtr_pxTaskBuffer(pxTaskBuffer, cmock_size) xTaskCreateStatic_CMockReturnMemThruPtr_pxTaskBuffer(__LINE__, pxTaskBuffer, cmock_size)
void xTaskCreateStatic_CMockReturnMemThruPtr_pxTaskBuffer(UNITY_LINE_TYPE cmock_line, StaticTask_t* pxTaskBuffer, int cmock_size);
#define xTaskCreateStatic_IgnoreArg_pxTaskCode() xTaskCreateStatic_CMockIgnoreArg_pxTaskCode(__LINE__)
void xTaskCreateStatic_CMockIgnoreArg_pxTaskCode(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateStatic_IgnoreArg_pcName() xTaskCreateStatic_CMockIgnoreArg_pcName(__LINE__)
void xTaskCreateStatic_CMockIgnoreArg_pcName(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateStatic_IgnoreArg_ulStackDepth() xTaskCreateStatic_CMockIgnoreArg_ulStackDepth(__LINE__)
void xTaskCreateStatic_CMockIgnoreArg_ulStackDepth(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateStatic_IgnoreArg_pvParameters() xTaskCreateStatic_CMockIgnoreArg_pvParameters(__LINE__)
void xTaskCreateStatic_CMockIgnoreArg_pvParameters(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateStatic_IgnoreArg_uxPriority() xTaskCreateStatic_CMockIgnoreArg_uxPriority(__LINE__)
void xTaskCreateStatic_CMockIgnoreArg_uxPriority(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateStatic_IgnoreArg_puxStackBuffer() xTaskCreateStatic_CMockIgnoreArg_puxStackBuffer(__LINE__)
void xTaskCreateStatic_CMockIgnoreArg_puxStackBuffer(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateStatic_IgnoreArg_pxTaskBuffer() xTaskCreateStatic_CMockIgnoreArg_pxTaskBuffer(__LINE__)
void xTaskCreateStatic_CMockIgnoreArg_pxTaskBuffer(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateRestricted_IgnoreAndReturn(cmock_retval) xTaskCreateRestricted_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskCreateRestricted_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCreateRestricted_StopIgnore() xTaskCreateRestricted_CMockStopIgnore()
void xTaskCreateRestricted_CMockStopIgnore(void);
#define xTaskCreateRestricted_ExpectAnyArgsAndReturn(cmock_retval) xTaskCreateRestricted_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskCreateRestricted_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCreateRestricted_ExpectAndReturn(pxTaskDefinition, pxCreatedTask, cmock_retval) xTaskCreateRestricted_CMockExpectAndReturn(__LINE__, pxTaskDefinition, pxCreatedTask, cmock_retval)
void xTaskCreateRestricted_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TaskParameters_t* const pxTaskDefinition, TaskHandle_t* pxCreatedTask, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskCreateRestricted_CALLBACK)(const TaskParameters_t* const pxTaskDefinition, TaskHandle_t* pxCreatedTask, int cmock_num_calls);
void xTaskCreateRestricted_AddCallback(CMOCK_xTaskCreateRestricted_CALLBACK Callback);
void xTaskCreateRestricted_Stub(CMOCK_xTaskCreateRestricted_CALLBACK Callback);
#define xTaskCreateRestricted_StubWithCallback xTaskCreateRestricted_Stub
#define xTaskCreateRestricted_ExpectWithArrayAndReturn(pxTaskDefinition, pxTaskDefinition_Depth, pxCreatedTask, pxCreatedTask_Depth, cmock_retval) xTaskCreateRestricted_CMockExpectWithArrayAndReturn(__LINE__, pxTaskDefinition, pxTaskDefinition_Depth, pxCreatedTask, pxCreatedTask_Depth, cmock_retval)
void xTaskCreateRestricted_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const TaskParameters_t* const pxTaskDefinition, int pxTaskDefinition_Depth, TaskHandle_t* pxCreatedTask, int pxCreatedTask_Depth, BaseType_t cmock_to_return);
#define xTaskCreateRestricted_ReturnThruPtr_pxCreatedTask(pxCreatedTask) xTaskCreateRestricted_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, sizeof(TaskHandle_t))
#define xTaskCreateRestricted_ReturnArrayThruPtr_pxCreatedTask(pxCreatedTask, cmock_len) xTaskCreateRestricted_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, (int)(cmock_len * (int)sizeof(*pxCreatedTask)))
#define xTaskCreateRestricted_ReturnMemThruPtr_pxCreatedTask(pxCreatedTask, cmock_size) xTaskCreateRestricted_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, cmock_size)
void xTaskCreateRestricted_CMockReturnMemThruPtr_pxCreatedTask(UNITY_LINE_TYPE cmock_line, TaskHandle_t* pxCreatedTask, int cmock_size);
#define xTaskCreateRestricted_IgnoreArg_pxTaskDefinition() xTaskCreateRestricted_CMockIgnoreArg_pxTaskDefinition(__LINE__)
void xTaskCreateRestricted_CMockIgnoreArg_pxTaskDefinition(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateRestricted_IgnoreArg_pxCreatedTask() xTaskCreateRestricted_CMockIgnoreArg_pxCreatedTask(__LINE__)
void xTaskCreateRestricted_CMockIgnoreArg_pxCreatedTask(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateRestrictedStatic_IgnoreAndReturn(cmock_retval) xTaskCreateRestrictedStatic_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskCreateRestrictedStatic_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCreateRestrictedStatic_StopIgnore() xTaskCreateRestrictedStatic_CMockStopIgnore()
void xTaskCreateRestrictedStatic_CMockStopIgnore(void);
#define xTaskCreateRestrictedStatic_ExpectAnyArgsAndReturn(cmock_retval) xTaskCreateRestrictedStatic_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskCreateRestrictedStatic_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCreateRestrictedStatic_ExpectAndReturn(pxTaskDefinition, pxCreatedTask, cmock_retval) xTaskCreateRestrictedStatic_CMockExpectAndReturn(__LINE__, pxTaskDefinition, pxCreatedTask, cmock_retval)
void xTaskCreateRestrictedStatic_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TaskParameters_t* const pxTaskDefinition, TaskHandle_t* pxCreatedTask, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskCreateRestrictedStatic_CALLBACK)(const TaskParameters_t* const pxTaskDefinition, TaskHandle_t* pxCreatedTask, int cmock_num_calls);
void xTaskCreateRestrictedStatic_AddCallback(CMOCK_xTaskCreateRestrictedStatic_CALLBACK Callback);
void xTaskCreateRestrictedStatic_Stub(CMOCK_xTaskCreateRestrictedStatic_CALLBACK Callback);
#define xTaskCreateRestrictedStatic_StubWithCallback xTaskCreateRestrictedStatic_Stub
#define xTaskCreateRestrictedStatic_ExpectWithArrayAndReturn(pxTaskDefinition, pxTaskDefinition_Depth, pxCreatedTask, pxCreatedTask_Depth, cmock_retval) xTaskCreateRestrictedStatic_CMockExpectWithArrayAndReturn(__LINE__, pxTaskDefinition, pxTaskDefinition_Depth, pxCreatedTask, pxCreatedTask_Depth, cmock_retval)
void xTaskCreateRestrictedStatic_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const TaskParameters_t* const pxTaskDefinition, int pxTaskDefinition_Depth, TaskHandle_t* pxCreatedTask, int pxCreatedTask_Depth, BaseType_t cmock_to_return);
#define xTaskCreateRestrictedStatic_ReturnThruPtr_pxCreatedTask(pxCreatedTask) xTaskCreateRestrictedStatic_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, sizeof(TaskHandle_t))
#define xTaskCreateRestrictedStatic_ReturnArrayThruPtr_pxCreatedTask(pxCreatedTask, cmock_len) xTaskCreateRestrictedStatic_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, (int)(cmock_len * (int)sizeof(*pxCreatedTask)))
#define xTaskCreateRestrictedStatic_ReturnMemThruPtr_pxCreatedTask(pxCreatedTask, cmock_size) xTaskCreateRestrictedStatic_CMockReturnMemThruPtr_pxCreatedTask(__LINE__, pxCreatedTask, cmock_size)
void xTaskCreateRestrictedStatic_CMockReturnMemThruPtr_pxCreatedTask(UNITY_LINE_TYPE cmock_line, TaskHandle_t* pxCreatedTask, int cmock_size);
#define xTaskCreateRestrictedStatic_IgnoreArg_pxTaskDefinition() xTaskCreateRestrictedStatic_CMockIgnoreArg_pxTaskDefinition(__LINE__)
void xTaskCreateRestrictedStatic_CMockIgnoreArg_pxTaskDefinition(UNITY_LINE_TYPE cmock_line);
#define xTaskCreateRestrictedStatic_IgnoreArg_pxCreatedTask() xTaskCreateRestrictedStatic_CMockIgnoreArg_pxCreatedTask(__LINE__)
void xTaskCreateRestrictedStatic_CMockIgnoreArg_pxCreatedTask(UNITY_LINE_TYPE cmock_line);
#define vTaskAllocateMPURegions_Ignore() vTaskAllocateMPURegions_CMockIgnore()
void vTaskAllocateMPURegions_CMockIgnore(void);
#define vTaskAllocateMPURegions_StopIgnore() vTaskAllocateMPURegions_CMockStopIgnore()
void vTaskAllocateMPURegions_CMockStopIgnore(void);
#define vTaskAllocateMPURegions_ExpectAnyArgs() vTaskAllocateMPURegions_CMockExpectAnyArgs(__LINE__)
void vTaskAllocateMPURegions_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskAllocateMPURegions_Expect(xTask, pxRegions) vTaskAllocateMPURegions_CMockExpect(__LINE__, xTask, pxRegions)
void vTaskAllocateMPURegions_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, const MemoryRegion_t* const pxRegions);
typedef void (* CMOCK_vTaskAllocateMPURegions_CALLBACK)(TaskHandle_t xTask, const MemoryRegion_t* const pxRegions, int cmock_num_calls);
void vTaskAllocateMPURegions_AddCallback(CMOCK_vTaskAllocateMPURegions_CALLBACK Callback);
void vTaskAllocateMPURegions_Stub(CMOCK_vTaskAllocateMPURegions_CALLBACK Callback);
#define vTaskAllocateMPURegions_StubWithCallback vTaskAllocateMPURegions_Stub
#define vTaskAllocateMPURegions_ExpectWithArray(xTask, pxRegions, pxRegions_Depth) vTaskAllocateMPURegions_CMockExpectWithArray(__LINE__, xTask, pxRegions, pxRegions_Depth)
void vTaskAllocateMPURegions_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, const MemoryRegion_t* const pxRegions, int pxRegions_Depth);
#define vTaskAllocateMPURegions_IgnoreArg_xTask() vTaskAllocateMPURegions_CMockIgnoreArg_xTask(__LINE__)
void vTaskAllocateMPURegions_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskAllocateMPURegions_IgnoreArg_pxRegions() vTaskAllocateMPURegions_CMockIgnoreArg_pxRegions(__LINE__)
void vTaskAllocateMPURegions_CMockIgnoreArg_pxRegions(UNITY_LINE_TYPE cmock_line);
#define vTaskDelete_Ignore() vTaskDelete_CMockIgnore()
void vTaskDelete_CMockIgnore(void);
#define vTaskDelete_StopIgnore() vTaskDelete_CMockStopIgnore()
void vTaskDelete_CMockStopIgnore(void);
#define vTaskDelete_ExpectAnyArgs() vTaskDelete_CMockExpectAnyArgs(__LINE__)
void vTaskDelete_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskDelete_Expect(xTaskToDelete) vTaskDelete_CMockExpect(__LINE__, xTaskToDelete)
void vTaskDelete_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToDelete);
typedef void (* CMOCK_vTaskDelete_CALLBACK)(TaskHandle_t xTaskToDelete, int cmock_num_calls);
void vTaskDelete_AddCallback(CMOCK_vTaskDelete_CALLBACK Callback);
void vTaskDelete_Stub(CMOCK_vTaskDelete_CALLBACK Callback);
#define vTaskDelete_StubWithCallback vTaskDelete_Stub
#define vTaskDelete_IgnoreArg_xTaskToDelete() vTaskDelete_CMockIgnoreArg_xTaskToDelete(__LINE__)
void vTaskDelete_CMockIgnoreArg_xTaskToDelete(UNITY_LINE_TYPE cmock_line);
#define vTaskDelay_Ignore() vTaskDelay_CMockIgnore()
void vTaskDelay_CMockIgnore(void);
#define vTaskDelay_StopIgnore() vTaskDelay_CMockStopIgnore()
void vTaskDelay_CMockStopIgnore(void);
#define vTaskDelay_ExpectAnyArgs() vTaskDelay_CMockExpectAnyArgs(__LINE__)
void vTaskDelay_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskDelay_Expect(xTicksToDelay) vTaskDelay_CMockExpect(__LINE__, xTicksToDelay)
void vTaskDelay_CMockExpect(UNITY_LINE_TYPE cmock_line, const TickType_t xTicksToDelay);
typedef void (* CMOCK_vTaskDelay_CALLBACK)(const TickType_t xTicksToDelay, int cmock_num_calls);
void vTaskDelay_AddCallback(CMOCK_vTaskDelay_CALLBACK Callback);
void vTaskDelay_Stub(CMOCK_vTaskDelay_CALLBACK Callback);
#define vTaskDelay_StubWithCallback vTaskDelay_Stub
#define vTaskDelay_IgnoreArg_xTicksToDelay() vTaskDelay_CMockIgnoreArg_xTicksToDelay(__LINE__)
void vTaskDelay_CMockIgnoreArg_xTicksToDelay(UNITY_LINE_TYPE cmock_line);
#define vTaskDelayUntil_Ignore() vTaskDelayUntil_CMockIgnore()
void vTaskDelayUntil_CMockIgnore(void);
#define vTaskDelayUntil_StopIgnore() vTaskDelayUntil_CMockStopIgnore()
void vTaskDelayUntil_CMockStopIgnore(void);
#define vTaskDelayUntil_ExpectAnyArgs() vTaskDelayUntil_CMockExpectAnyArgs(__LINE__)
void vTaskDelayUntil_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskDelayUntil_Expect(pxPreviousWakeTime, xTimeIncrement) vTaskDelayUntil_CMockExpect(__LINE__, pxPreviousWakeTime, xTimeIncrement)
void vTaskDelayUntil_CMockExpect(UNITY_LINE_TYPE cmock_line, TickType_t* const pxPreviousWakeTime, const TickType_t xTimeIncrement);
typedef void (* CMOCK_vTaskDelayUntil_CALLBACK)(TickType_t* const pxPreviousWakeTime, const TickType_t xTimeIncrement, int cmock_num_calls);
void vTaskDelayUntil_AddCallback(CMOCK_vTaskDelayUntil_CALLBACK Callback);
void vTaskDelayUntil_Stub(CMOCK_vTaskDelayUntil_CALLBACK Callback);
#define vTaskDelayUntil_StubWithCallback vTaskDelayUntil_Stub
#define vTaskDelayUntil_ExpectWithArray(pxPreviousWakeTime, pxPreviousWakeTime_Depth, xTimeIncrement) vTaskDelayUntil_CMockExpectWithArray(__LINE__, pxPreviousWakeTime, pxPreviousWakeTime_Depth, xTimeIncrement)
void vTaskDelayUntil_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TickType_t* const pxPreviousWakeTime, int pxPreviousWakeTime_Depth, const TickType_t xTimeIncrement);
#define vTaskDelayUntil_ReturnThruPtr_pxPreviousWakeTime(pxPreviousWakeTime) vTaskDelayUntil_CMockReturnMemThruPtr_pxPreviousWakeTime(__LINE__, pxPreviousWakeTime, sizeof(TickType_t))
#define vTaskDelayUntil_ReturnArrayThruPtr_pxPreviousWakeTime(pxPreviousWakeTime, cmock_len) vTaskDelayUntil_CMockReturnMemThruPtr_pxPreviousWakeTime(__LINE__, pxPreviousWakeTime, (int)(cmock_len * (int)sizeof(*pxPreviousWakeTime)))
#define vTaskDelayUntil_ReturnMemThruPtr_pxPreviousWakeTime(pxPreviousWakeTime, cmock_size) vTaskDelayUntil_CMockReturnMemThruPtr_pxPreviousWakeTime(__LINE__, pxPreviousWakeTime, cmock_size)
void vTaskDelayUntil_CMockReturnMemThruPtr_pxPreviousWakeTime(UNITY_LINE_TYPE cmock_line, TickType_t* pxPreviousWakeTime, int cmock_size);
#define vTaskDelayUntil_IgnoreArg_pxPreviousWakeTime() vTaskDelayUntil_CMockIgnoreArg_pxPreviousWakeTime(__LINE__)
void vTaskDelayUntil_CMockIgnoreArg_pxPreviousWakeTime(UNITY_LINE_TYPE cmock_line);
#define vTaskDelayUntil_IgnoreArg_xTimeIncrement() vTaskDelayUntil_CMockIgnoreArg_xTimeIncrement(__LINE__)
void vTaskDelayUntil_CMockIgnoreArg_xTimeIncrement(UNITY_LINE_TYPE cmock_line);
#define xTaskAbortDelay_IgnoreAndReturn(cmock_retval) xTaskAbortDelay_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskAbortDelay_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskAbortDelay_StopIgnore() xTaskAbortDelay_CMockStopIgnore()
void xTaskAbortDelay_CMockStopIgnore(void);
#define xTaskAbortDelay_ExpectAnyArgsAndReturn(cmock_retval) xTaskAbortDelay_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskAbortDelay_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskAbortDelay_ExpectAndReturn(xTask, cmock_retval) xTaskAbortDelay_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void xTaskAbortDelay_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskAbortDelay_CALLBACK)(TaskHandle_t xTask, int cmock_num_calls);
void xTaskAbortDelay_AddCallback(CMOCK_xTaskAbortDelay_CALLBACK Callback);
void xTaskAbortDelay_Stub(CMOCK_xTaskAbortDelay_CALLBACK Callback);
#define xTaskAbortDelay_StubWithCallback xTaskAbortDelay_Stub
#define xTaskAbortDelay_IgnoreArg_xTask() xTaskAbortDelay_CMockIgnoreArg_xTask(__LINE__)
void xTaskAbortDelay_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define uxTaskPriorityGet_IgnoreAndReturn(cmock_retval) uxTaskPriorityGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTaskPriorityGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskPriorityGet_StopIgnore() uxTaskPriorityGet_CMockStopIgnore()
void uxTaskPriorityGet_CMockStopIgnore(void);
#define uxTaskPriorityGet_ExpectAnyArgsAndReturn(cmock_retval) uxTaskPriorityGet_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxTaskPriorityGet_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskPriorityGet_ExpectAndReturn(xTask, cmock_retval) uxTaskPriorityGet_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void uxTaskPriorityGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TaskHandle_t xTask, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxTaskPriorityGet_CALLBACK)(const TaskHandle_t xTask, int cmock_num_calls);
void uxTaskPriorityGet_AddCallback(CMOCK_uxTaskPriorityGet_CALLBACK Callback);
void uxTaskPriorityGet_Stub(CMOCK_uxTaskPriorityGet_CALLBACK Callback);
#define uxTaskPriorityGet_StubWithCallback uxTaskPriorityGet_Stub
#define uxTaskPriorityGet_IgnoreArg_xTask() uxTaskPriorityGet_CMockIgnoreArg_xTask(__LINE__)
void uxTaskPriorityGet_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define uxTaskPriorityGetFromISR_IgnoreAndReturn(cmock_retval) uxTaskPriorityGetFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTaskPriorityGetFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskPriorityGetFromISR_StopIgnore() uxTaskPriorityGetFromISR_CMockStopIgnore()
void uxTaskPriorityGetFromISR_CMockStopIgnore(void);
#define uxTaskPriorityGetFromISR_ExpectAnyArgsAndReturn(cmock_retval) uxTaskPriorityGetFromISR_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxTaskPriorityGetFromISR_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskPriorityGetFromISR_ExpectAndReturn(xTask, cmock_retval) uxTaskPriorityGetFromISR_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void uxTaskPriorityGetFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TaskHandle_t xTask, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxTaskPriorityGetFromISR_CALLBACK)(const TaskHandle_t xTask, int cmock_num_calls);
void uxTaskPriorityGetFromISR_AddCallback(CMOCK_uxTaskPriorityGetFromISR_CALLBACK Callback);
void uxTaskPriorityGetFromISR_Stub(CMOCK_uxTaskPriorityGetFromISR_CALLBACK Callback);
#define uxTaskPriorityGetFromISR_StubWithCallback uxTaskPriorityGetFromISR_Stub
#define uxTaskPriorityGetFromISR_IgnoreArg_xTask() uxTaskPriorityGetFromISR_CMockIgnoreArg_xTask(__LINE__)
void uxTaskPriorityGetFromISR_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define eTaskGetState_IgnoreAndReturn(cmock_retval) eTaskGetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eTaskGetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eTaskState cmock_to_return);
#define eTaskGetState_StopIgnore() eTaskGetState_CMockStopIgnore()
void eTaskGetState_CMockStopIgnore(void);
#define eTaskGetState_ExpectAnyArgsAndReturn(cmock_retval) eTaskGetState_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void eTaskGetState_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, eTaskState cmock_to_return);
#define eTaskGetState_ExpectAndReturn(xTask, cmock_retval) eTaskGetState_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void eTaskGetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, eTaskState cmock_to_return);
typedef eTaskState (* CMOCK_eTaskGetState_CALLBACK)(TaskHandle_t xTask, int cmock_num_calls);
void eTaskGetState_AddCallback(CMOCK_eTaskGetState_CALLBACK Callback);
void eTaskGetState_Stub(CMOCK_eTaskGetState_CALLBACK Callback);
#define eTaskGetState_StubWithCallback eTaskGetState_Stub
#define eTaskGetState_IgnoreArg_xTask() eTaskGetState_CMockIgnoreArg_xTask(__LINE__)
void eTaskGetState_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskGetInfo_Ignore() vTaskGetInfo_CMockIgnore()
void vTaskGetInfo_CMockIgnore(void);
#define vTaskGetInfo_StopIgnore() vTaskGetInfo_CMockStopIgnore()
void vTaskGetInfo_CMockStopIgnore(void);
#define vTaskGetInfo_ExpectAnyArgs() vTaskGetInfo_CMockExpectAnyArgs(__LINE__)
void vTaskGetInfo_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskGetInfo_Expect(xTask, pxTaskStatus, xGetFreeStackSpace, eState) vTaskGetInfo_CMockExpect(__LINE__, xTask, pxTaskStatus, xGetFreeStackSpace, eState)
void vTaskGetInfo_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, TaskStatus_t* pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState);
typedef void (* CMOCK_vTaskGetInfo_CALLBACK)(TaskHandle_t xTask, TaskStatus_t* pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState, int cmock_num_calls);
void vTaskGetInfo_AddCallback(CMOCK_vTaskGetInfo_CALLBACK Callback);
void vTaskGetInfo_Stub(CMOCK_vTaskGetInfo_CALLBACK Callback);
#define vTaskGetInfo_StubWithCallback vTaskGetInfo_Stub
#define vTaskGetInfo_ExpectWithArray(xTask, pxTaskStatus, pxTaskStatus_Depth, xGetFreeStackSpace, eState) vTaskGetInfo_CMockExpectWithArray(__LINE__, xTask, pxTaskStatus, pxTaskStatus_Depth, xGetFreeStackSpace, eState)
void vTaskGetInfo_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, TaskStatus_t* pxTaskStatus, int pxTaskStatus_Depth, BaseType_t xGetFreeStackSpace, eTaskState eState);
#define vTaskGetInfo_ReturnThruPtr_pxTaskStatus(pxTaskStatus) vTaskGetInfo_CMockReturnMemThruPtr_pxTaskStatus(__LINE__, pxTaskStatus, sizeof(TaskStatus_t))
#define vTaskGetInfo_ReturnArrayThruPtr_pxTaskStatus(pxTaskStatus, cmock_len) vTaskGetInfo_CMockReturnMemThruPtr_pxTaskStatus(__LINE__, pxTaskStatus, (int)(cmock_len * (int)sizeof(*pxTaskStatus)))
#define vTaskGetInfo_ReturnMemThruPtr_pxTaskStatus(pxTaskStatus, cmock_size) vTaskGetInfo_CMockReturnMemThruPtr_pxTaskStatus(__LINE__, pxTaskStatus, cmock_size)
void vTaskGetInfo_CMockReturnMemThruPtr_pxTaskStatus(UNITY_LINE_TYPE cmock_line, TaskStatus_t* pxTaskStatus, int cmock_size);
#define vTaskGetInfo_IgnoreArg_xTask() vTaskGetInfo_CMockIgnoreArg_xTask(__LINE__)
void vTaskGetInfo_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskGetInfo_IgnoreArg_pxTaskStatus() vTaskGetInfo_CMockIgnoreArg_pxTaskStatus(__LINE__)
void vTaskGetInfo_CMockIgnoreArg_pxTaskStatus(UNITY_LINE_TYPE cmock_line);
#define vTaskGetInfo_IgnoreArg_xGetFreeStackSpace() vTaskGetInfo_CMockIgnoreArg_xGetFreeStackSpace(__LINE__)
void vTaskGetInfo_CMockIgnoreArg_xGetFreeStackSpace(UNITY_LINE_TYPE cmock_line);
#define vTaskGetInfo_IgnoreArg_eState() vTaskGetInfo_CMockIgnoreArg_eState(__LINE__)
void vTaskGetInfo_CMockIgnoreArg_eState(UNITY_LINE_TYPE cmock_line);
#define vTaskPrioritySet_Ignore() vTaskPrioritySet_CMockIgnore()
void vTaskPrioritySet_CMockIgnore(void);
#define vTaskPrioritySet_StopIgnore() vTaskPrioritySet_CMockStopIgnore()
void vTaskPrioritySet_CMockStopIgnore(void);
#define vTaskPrioritySet_ExpectAnyArgs() vTaskPrioritySet_CMockExpectAnyArgs(__LINE__)
void vTaskPrioritySet_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskPrioritySet_Expect(xTask, uxNewPriority) vTaskPrioritySet_CMockExpect(__LINE__, xTask, uxNewPriority)
void vTaskPrioritySet_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, UBaseType_t uxNewPriority);
typedef void (* CMOCK_vTaskPrioritySet_CALLBACK)(TaskHandle_t xTask, UBaseType_t uxNewPriority, int cmock_num_calls);
void vTaskPrioritySet_AddCallback(CMOCK_vTaskPrioritySet_CALLBACK Callback);
void vTaskPrioritySet_Stub(CMOCK_vTaskPrioritySet_CALLBACK Callback);
#define vTaskPrioritySet_StubWithCallback vTaskPrioritySet_Stub
#define vTaskPrioritySet_IgnoreArg_xTask() vTaskPrioritySet_CMockIgnoreArg_xTask(__LINE__)
void vTaskPrioritySet_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskPrioritySet_IgnoreArg_uxNewPriority() vTaskPrioritySet_CMockIgnoreArg_uxNewPriority(__LINE__)
void vTaskPrioritySet_CMockIgnoreArg_uxNewPriority(UNITY_LINE_TYPE cmock_line);
#define vTaskSuspend_Ignore() vTaskSuspend_CMockIgnore()
void vTaskSuspend_CMockIgnore(void);
#define vTaskSuspend_StopIgnore() vTaskSuspend_CMockStopIgnore()
void vTaskSuspend_CMockStopIgnore(void);
#define vTaskSuspend_ExpectAnyArgs() vTaskSuspend_CMockExpectAnyArgs(__LINE__)
void vTaskSuspend_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskSuspend_Expect(xTaskToSuspend) vTaskSuspend_CMockExpect(__LINE__, xTaskToSuspend)
void vTaskSuspend_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToSuspend);
typedef void (* CMOCK_vTaskSuspend_CALLBACK)(TaskHandle_t xTaskToSuspend, int cmock_num_calls);
void vTaskSuspend_AddCallback(CMOCK_vTaskSuspend_CALLBACK Callback);
void vTaskSuspend_Stub(CMOCK_vTaskSuspend_CALLBACK Callback);
#define vTaskSuspend_StubWithCallback vTaskSuspend_Stub
#define vTaskSuspend_IgnoreArg_xTaskToSuspend() vTaskSuspend_CMockIgnoreArg_xTaskToSuspend(__LINE__)
void vTaskSuspend_CMockIgnoreArg_xTaskToSuspend(UNITY_LINE_TYPE cmock_line);
#define vTaskResume_Ignore() vTaskResume_CMockIgnore()
void vTaskResume_CMockIgnore(void);
#define vTaskResume_StopIgnore() vTaskResume_CMockStopIgnore()
void vTaskResume_CMockStopIgnore(void);
#define vTaskResume_ExpectAnyArgs() vTaskResume_CMockExpectAnyArgs(__LINE__)
void vTaskResume_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskResume_Expect(xTaskToResume) vTaskResume_CMockExpect(__LINE__, xTaskToResume)
void vTaskResume_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToResume);
typedef void (* CMOCK_vTaskResume_CALLBACK)(TaskHandle_t xTaskToResume, int cmock_num_calls);
void vTaskResume_AddCallback(CMOCK_vTaskResume_CALLBACK Callback);
void vTaskResume_Stub(CMOCK_vTaskResume_CALLBACK Callback);
#define vTaskResume_StubWithCallback vTaskResume_Stub
#define vTaskResume_IgnoreArg_xTaskToResume() vTaskResume_CMockIgnoreArg_xTaskToResume(__LINE__)
void vTaskResume_CMockIgnoreArg_xTaskToResume(UNITY_LINE_TYPE cmock_line);
#define xTaskResumeFromISR_IgnoreAndReturn(cmock_retval) xTaskResumeFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskResumeFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskResumeFromISR_StopIgnore() xTaskResumeFromISR_CMockStopIgnore()
void xTaskResumeFromISR_CMockStopIgnore(void);
#define xTaskResumeFromISR_ExpectAnyArgsAndReturn(cmock_retval) xTaskResumeFromISR_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskResumeFromISR_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskResumeFromISR_ExpectAndReturn(xTaskToResume, cmock_retval) xTaskResumeFromISR_CMockExpectAndReturn(__LINE__, xTaskToResume, cmock_retval)
void xTaskResumeFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToResume, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskResumeFromISR_CALLBACK)(TaskHandle_t xTaskToResume, int cmock_num_calls);
void xTaskResumeFromISR_AddCallback(CMOCK_xTaskResumeFromISR_CALLBACK Callback);
void xTaskResumeFromISR_Stub(CMOCK_xTaskResumeFromISR_CALLBACK Callback);
#define xTaskResumeFromISR_StubWithCallback xTaskResumeFromISR_Stub
#define xTaskResumeFromISR_IgnoreArg_xTaskToResume() xTaskResumeFromISR_CMockIgnoreArg_xTaskToResume(__LINE__)
void xTaskResumeFromISR_CMockIgnoreArg_xTaskToResume(UNITY_LINE_TYPE cmock_line);
#define vTaskStartScheduler_Ignore() vTaskStartScheduler_CMockIgnore()
void vTaskStartScheduler_CMockIgnore(void);
#define vTaskStartScheduler_StopIgnore() vTaskStartScheduler_CMockStopIgnore()
void vTaskStartScheduler_CMockStopIgnore(void);
#define vTaskStartScheduler_Expect() vTaskStartScheduler_CMockExpect(__LINE__)
void vTaskStartScheduler_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vTaskStartScheduler_CALLBACK)(int cmock_num_calls);
void vTaskStartScheduler_AddCallback(CMOCK_vTaskStartScheduler_CALLBACK Callback);
void vTaskStartScheduler_Stub(CMOCK_vTaskStartScheduler_CALLBACK Callback);
#define vTaskStartScheduler_StubWithCallback vTaskStartScheduler_Stub
#define vTaskEndScheduler_Ignore() vTaskEndScheduler_CMockIgnore()
void vTaskEndScheduler_CMockIgnore(void);
#define vTaskEndScheduler_StopIgnore() vTaskEndScheduler_CMockStopIgnore()
void vTaskEndScheduler_CMockStopIgnore(void);
#define vTaskEndScheduler_Expect() vTaskEndScheduler_CMockExpect(__LINE__)
void vTaskEndScheduler_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vTaskEndScheduler_CALLBACK)(int cmock_num_calls);
void vTaskEndScheduler_AddCallback(CMOCK_vTaskEndScheduler_CALLBACK Callback);
void vTaskEndScheduler_Stub(CMOCK_vTaskEndScheduler_CALLBACK Callback);
#define vTaskEndScheduler_StubWithCallback vTaskEndScheduler_Stub
#define vTaskSuspendAll_Ignore() vTaskSuspendAll_CMockIgnore()
void vTaskSuspendAll_CMockIgnore(void);
#define vTaskSuspendAll_StopIgnore() vTaskSuspendAll_CMockStopIgnore()
void vTaskSuspendAll_CMockStopIgnore(void);
#define vTaskSuspendAll_Expect() vTaskSuspendAll_CMockExpect(__LINE__)
void vTaskSuspendAll_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vTaskSuspendAll_CALLBACK)(int cmock_num_calls);
void vTaskSuspendAll_AddCallback(CMOCK_vTaskSuspendAll_CALLBACK Callback);
void vTaskSuspendAll_Stub(CMOCK_vTaskSuspendAll_CALLBACK Callback);
#define vTaskSuspendAll_StubWithCallback vTaskSuspendAll_Stub
#define xTaskResumeAll_IgnoreAndReturn(cmock_retval) xTaskResumeAll_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskResumeAll_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskResumeAll_StopIgnore() xTaskResumeAll_CMockStopIgnore()
void xTaskResumeAll_CMockStopIgnore(void);
#define xTaskResumeAll_ExpectAndReturn(cmock_retval) xTaskResumeAll_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTaskResumeAll_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskResumeAll_CALLBACK)(int cmock_num_calls);
void xTaskResumeAll_AddCallback(CMOCK_xTaskResumeAll_CALLBACK Callback);
void xTaskResumeAll_Stub(CMOCK_xTaskResumeAll_CALLBACK Callback);
#define xTaskResumeAll_StubWithCallback xTaskResumeAll_Stub
#define xTaskGetTickCount_IgnoreAndReturn(cmock_retval) xTaskGetTickCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGetTickCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define xTaskGetTickCount_StopIgnore() xTaskGetTickCount_CMockStopIgnore()
void xTaskGetTickCount_CMockStopIgnore(void);
#define xTaskGetTickCount_ExpectAndReturn(cmock_retval) xTaskGetTickCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTaskGetTickCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_xTaskGetTickCount_CALLBACK)(int cmock_num_calls);
void xTaskGetTickCount_AddCallback(CMOCK_xTaskGetTickCount_CALLBACK Callback);
void xTaskGetTickCount_Stub(CMOCK_xTaskGetTickCount_CALLBACK Callback);
#define xTaskGetTickCount_StubWithCallback xTaskGetTickCount_Stub
#define xTaskGetTickCountFromISR_IgnoreAndReturn(cmock_retval) xTaskGetTickCountFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGetTickCountFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define xTaskGetTickCountFromISR_StopIgnore() xTaskGetTickCountFromISR_CMockStopIgnore()
void xTaskGetTickCountFromISR_CMockStopIgnore(void);
#define xTaskGetTickCountFromISR_ExpectAndReturn(cmock_retval) xTaskGetTickCountFromISR_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTaskGetTickCountFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_xTaskGetTickCountFromISR_CALLBACK)(int cmock_num_calls);
void xTaskGetTickCountFromISR_AddCallback(CMOCK_xTaskGetTickCountFromISR_CALLBACK Callback);
void xTaskGetTickCountFromISR_Stub(CMOCK_xTaskGetTickCountFromISR_CALLBACK Callback);
#define xTaskGetTickCountFromISR_StubWithCallback xTaskGetTickCountFromISR_Stub
#define uxTaskGetNumberOfTasks_IgnoreAndReturn(cmock_retval) uxTaskGetNumberOfTasks_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTaskGetNumberOfTasks_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskGetNumberOfTasks_StopIgnore() uxTaskGetNumberOfTasks_CMockStopIgnore()
void uxTaskGetNumberOfTasks_CMockStopIgnore(void);
#define uxTaskGetNumberOfTasks_ExpectAndReturn(cmock_retval) uxTaskGetNumberOfTasks_CMockExpectAndReturn(__LINE__, cmock_retval)
void uxTaskGetNumberOfTasks_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxTaskGetNumberOfTasks_CALLBACK)(int cmock_num_calls);
void uxTaskGetNumberOfTasks_AddCallback(CMOCK_uxTaskGetNumberOfTasks_CALLBACK Callback);
void uxTaskGetNumberOfTasks_Stub(CMOCK_uxTaskGetNumberOfTasks_CALLBACK Callback);
#define uxTaskGetNumberOfTasks_StubWithCallback uxTaskGetNumberOfTasks_Stub
#define pcTaskGetName_IgnoreAndReturn(cmock_retval) pcTaskGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pcTaskGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define pcTaskGetName_StopIgnore() pcTaskGetName_CMockStopIgnore()
void pcTaskGetName_CMockStopIgnore(void);
#define pcTaskGetName_ExpectAnyArgsAndReturn(cmock_retval) pcTaskGetName_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pcTaskGetName_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define pcTaskGetName_ExpectAndReturn(xTaskToQuery, cmock_retval) pcTaskGetName_CMockExpectAndReturn(__LINE__, xTaskToQuery, cmock_retval)
void pcTaskGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToQuery, char* cmock_to_return);
typedef char* (* CMOCK_pcTaskGetName_CALLBACK)(TaskHandle_t xTaskToQuery, int cmock_num_calls);
void pcTaskGetName_AddCallback(CMOCK_pcTaskGetName_CALLBACK Callback);
void pcTaskGetName_Stub(CMOCK_pcTaskGetName_CALLBACK Callback);
#define pcTaskGetName_StubWithCallback pcTaskGetName_Stub
#define pcTaskGetName_IgnoreArg_xTaskToQuery() pcTaskGetName_CMockIgnoreArg_xTaskToQuery(__LINE__)
void pcTaskGetName_CMockIgnoreArg_xTaskToQuery(UNITY_LINE_TYPE cmock_line);
#define xTaskGetHandle_IgnoreAndReturn(cmock_retval) xTaskGetHandle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGetHandle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define xTaskGetHandle_StopIgnore() xTaskGetHandle_CMockStopIgnore()
void xTaskGetHandle_CMockStopIgnore(void);
#define xTaskGetHandle_ExpectAnyArgsAndReturn(cmock_retval) xTaskGetHandle_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskGetHandle_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define xTaskGetHandle_ExpectAndReturn(pcNameToQuery, cmock_retval) xTaskGetHandle_CMockExpectAndReturn(__LINE__, pcNameToQuery, cmock_retval)
void xTaskGetHandle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pcNameToQuery, TaskHandle_t cmock_to_return);
typedef TaskHandle_t (* CMOCK_xTaskGetHandle_CALLBACK)(const char* pcNameToQuery, int cmock_num_calls);
void xTaskGetHandle_AddCallback(CMOCK_xTaskGetHandle_CALLBACK Callback);
void xTaskGetHandle_Stub(CMOCK_xTaskGetHandle_CALLBACK Callback);
#define xTaskGetHandle_StubWithCallback xTaskGetHandle_Stub
#define xTaskGetHandle_IgnoreArg_pcNameToQuery() xTaskGetHandle_CMockIgnoreArg_pcNameToQuery(__LINE__)
void xTaskGetHandle_CMockIgnoreArg_pcNameToQuery(UNITY_LINE_TYPE cmock_line);
#define uxTaskGetStackHighWaterMark_IgnoreAndReturn(cmock_retval) uxTaskGetStackHighWaterMark_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTaskGetStackHighWaterMark_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskGetStackHighWaterMark_StopIgnore() uxTaskGetStackHighWaterMark_CMockStopIgnore()
void uxTaskGetStackHighWaterMark_CMockStopIgnore(void);
#define uxTaskGetStackHighWaterMark_ExpectAnyArgsAndReturn(cmock_retval) uxTaskGetStackHighWaterMark_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxTaskGetStackHighWaterMark_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskGetStackHighWaterMark_ExpectAndReturn(xTask, cmock_retval) uxTaskGetStackHighWaterMark_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void uxTaskGetStackHighWaterMark_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxTaskGetStackHighWaterMark_CALLBACK)(TaskHandle_t xTask, int cmock_num_calls);
void uxTaskGetStackHighWaterMark_AddCallback(CMOCK_uxTaskGetStackHighWaterMark_CALLBACK Callback);
void uxTaskGetStackHighWaterMark_Stub(CMOCK_uxTaskGetStackHighWaterMark_CALLBACK Callback);
#define uxTaskGetStackHighWaterMark_StubWithCallback uxTaskGetStackHighWaterMark_Stub
#define uxTaskGetStackHighWaterMark_IgnoreArg_xTask() uxTaskGetStackHighWaterMark_CMockIgnoreArg_xTask(__LINE__)
void uxTaskGetStackHighWaterMark_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define uxTaskGetStackHighWaterMark2_IgnoreAndReturn(cmock_retval) uxTaskGetStackHighWaterMark2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTaskGetStackHighWaterMark2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, configSTACK_DEPTH_TYPE cmock_to_return);
#define uxTaskGetStackHighWaterMark2_StopIgnore() uxTaskGetStackHighWaterMark2_CMockStopIgnore()
void uxTaskGetStackHighWaterMark2_CMockStopIgnore(void);
#define uxTaskGetStackHighWaterMark2_ExpectAnyArgsAndReturn(cmock_retval) uxTaskGetStackHighWaterMark2_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxTaskGetStackHighWaterMark2_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, configSTACK_DEPTH_TYPE cmock_to_return);
#define uxTaskGetStackHighWaterMark2_ExpectAndReturn(xTask, cmock_retval) uxTaskGetStackHighWaterMark2_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void uxTaskGetStackHighWaterMark2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, configSTACK_DEPTH_TYPE cmock_to_return);
typedef configSTACK_DEPTH_TYPE (* CMOCK_uxTaskGetStackHighWaterMark2_CALLBACK)(TaskHandle_t xTask, int cmock_num_calls);
void uxTaskGetStackHighWaterMark2_AddCallback(CMOCK_uxTaskGetStackHighWaterMark2_CALLBACK Callback);
void uxTaskGetStackHighWaterMark2_Stub(CMOCK_uxTaskGetStackHighWaterMark2_CALLBACK Callback);
#define uxTaskGetStackHighWaterMark2_StubWithCallback uxTaskGetStackHighWaterMark2_Stub
#define uxTaskGetStackHighWaterMark2_IgnoreArg_xTask() uxTaskGetStackHighWaterMark2_CMockIgnoreArg_xTask(__LINE__)
void uxTaskGetStackHighWaterMark2_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskSetApplicationTaskTag_Ignore() vTaskSetApplicationTaskTag_CMockIgnore()
void vTaskSetApplicationTaskTag_CMockIgnore(void);
#define vTaskSetApplicationTaskTag_StopIgnore() vTaskSetApplicationTaskTag_CMockStopIgnore()
void vTaskSetApplicationTaskTag_CMockStopIgnore(void);
#define vTaskSetApplicationTaskTag_ExpectAnyArgs() vTaskSetApplicationTaskTag_CMockExpectAnyArgs(__LINE__)
void vTaskSetApplicationTaskTag_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskSetApplicationTaskTag_Expect(xTask, pxHookFunction) vTaskSetApplicationTaskTag_CMockExpect(__LINE__, xTask, pxHookFunction)
void vTaskSetApplicationTaskTag_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, TaskHookFunction_t pxHookFunction);
typedef void (* CMOCK_vTaskSetApplicationTaskTag_CALLBACK)(TaskHandle_t xTask, TaskHookFunction_t pxHookFunction, int cmock_num_calls);
void vTaskSetApplicationTaskTag_AddCallback(CMOCK_vTaskSetApplicationTaskTag_CALLBACK Callback);
void vTaskSetApplicationTaskTag_Stub(CMOCK_vTaskSetApplicationTaskTag_CALLBACK Callback);
#define vTaskSetApplicationTaskTag_StubWithCallback vTaskSetApplicationTaskTag_Stub
#define vTaskSetApplicationTaskTag_IgnoreArg_xTask() vTaskSetApplicationTaskTag_CMockIgnoreArg_xTask(__LINE__)
void vTaskSetApplicationTaskTag_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskSetApplicationTaskTag_IgnoreArg_pxHookFunction() vTaskSetApplicationTaskTag_CMockIgnoreArg_pxHookFunction(__LINE__)
void vTaskSetApplicationTaskTag_CMockIgnoreArg_pxHookFunction(UNITY_LINE_TYPE cmock_line);
#define xTaskGetApplicationTaskTag_IgnoreAndReturn(cmock_retval) xTaskGetApplicationTaskTag_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGetApplicationTaskTag_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHookFunction_t cmock_to_return);
#define xTaskGetApplicationTaskTag_StopIgnore() xTaskGetApplicationTaskTag_CMockStopIgnore()
void xTaskGetApplicationTaskTag_CMockStopIgnore(void);
#define xTaskGetApplicationTaskTag_ExpectAnyArgsAndReturn(cmock_retval) xTaskGetApplicationTaskTag_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskGetApplicationTaskTag_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, TaskHookFunction_t cmock_to_return);
#define xTaskGetApplicationTaskTag_ExpectAndReturn(xTask, cmock_retval) xTaskGetApplicationTaskTag_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void xTaskGetApplicationTaskTag_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, TaskHookFunction_t cmock_to_return);
typedef TaskHookFunction_t (* CMOCK_xTaskGetApplicationTaskTag_CALLBACK)(TaskHandle_t xTask, int cmock_num_calls);
void xTaskGetApplicationTaskTag_AddCallback(CMOCK_xTaskGetApplicationTaskTag_CALLBACK Callback);
void xTaskGetApplicationTaskTag_Stub(CMOCK_xTaskGetApplicationTaskTag_CALLBACK Callback);
#define xTaskGetApplicationTaskTag_StubWithCallback xTaskGetApplicationTaskTag_Stub
#define xTaskGetApplicationTaskTag_IgnoreArg_xTask() xTaskGetApplicationTaskTag_CMockIgnoreArg_xTask(__LINE__)
void xTaskGetApplicationTaskTag_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define xTaskGetApplicationTaskTagFromISR_IgnoreAndReturn(cmock_retval) xTaskGetApplicationTaskTagFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGetApplicationTaskTagFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHookFunction_t cmock_to_return);
#define xTaskGetApplicationTaskTagFromISR_StopIgnore() xTaskGetApplicationTaskTagFromISR_CMockStopIgnore()
void xTaskGetApplicationTaskTagFromISR_CMockStopIgnore(void);
#define xTaskGetApplicationTaskTagFromISR_ExpectAnyArgsAndReturn(cmock_retval) xTaskGetApplicationTaskTagFromISR_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskGetApplicationTaskTagFromISR_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, TaskHookFunction_t cmock_to_return);
#define xTaskGetApplicationTaskTagFromISR_ExpectAndReturn(xTask, cmock_retval) xTaskGetApplicationTaskTagFromISR_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void xTaskGetApplicationTaskTagFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, TaskHookFunction_t cmock_to_return);
typedef TaskHookFunction_t (* CMOCK_xTaskGetApplicationTaskTagFromISR_CALLBACK)(TaskHandle_t xTask, int cmock_num_calls);
void xTaskGetApplicationTaskTagFromISR_AddCallback(CMOCK_xTaskGetApplicationTaskTagFromISR_CALLBACK Callback);
void xTaskGetApplicationTaskTagFromISR_Stub(CMOCK_xTaskGetApplicationTaskTagFromISR_CALLBACK Callback);
#define xTaskGetApplicationTaskTagFromISR_StubWithCallback xTaskGetApplicationTaskTagFromISR_Stub
#define xTaskGetApplicationTaskTagFromISR_IgnoreArg_xTask() xTaskGetApplicationTaskTagFromISR_CMockIgnoreArg_xTask(__LINE__)
void xTaskGetApplicationTaskTagFromISR_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskSetThreadLocalStoragePointer_Ignore() vTaskSetThreadLocalStoragePointer_CMockIgnore()
void vTaskSetThreadLocalStoragePointer_CMockIgnore(void);
#define vTaskSetThreadLocalStoragePointer_StopIgnore() vTaskSetThreadLocalStoragePointer_CMockStopIgnore()
void vTaskSetThreadLocalStoragePointer_CMockStopIgnore(void);
#define vTaskSetThreadLocalStoragePointer_ExpectAnyArgs() vTaskSetThreadLocalStoragePointer_CMockExpectAnyArgs(__LINE__)
void vTaskSetThreadLocalStoragePointer_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskSetThreadLocalStoragePointer_Expect(xTaskToSet, xIndex, pvValue) vTaskSetThreadLocalStoragePointer_CMockExpect(__LINE__, xTaskToSet, xIndex, pvValue)
void vTaskSetThreadLocalStoragePointer_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToSet, BaseType_t xIndex, void* pvValue);
typedef void (* CMOCK_vTaskSetThreadLocalStoragePointer_CALLBACK)(TaskHandle_t xTaskToSet, BaseType_t xIndex, void* pvValue, int cmock_num_calls);
void vTaskSetThreadLocalStoragePointer_AddCallback(CMOCK_vTaskSetThreadLocalStoragePointer_CALLBACK Callback);
void vTaskSetThreadLocalStoragePointer_Stub(CMOCK_vTaskSetThreadLocalStoragePointer_CALLBACK Callback);
#define vTaskSetThreadLocalStoragePointer_StubWithCallback vTaskSetThreadLocalStoragePointer_Stub
#define vTaskSetThreadLocalStoragePointer_ExpectWithArray(xTaskToSet, xIndex, pvValue, pvValue_Depth) vTaskSetThreadLocalStoragePointer_CMockExpectWithArray(__LINE__, xTaskToSet, xIndex, pvValue, pvValue_Depth)
void vTaskSetThreadLocalStoragePointer_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToSet, BaseType_t xIndex, void* pvValue, int pvValue_Depth);
#define vTaskSetThreadLocalStoragePointer_ReturnThruPtr_pvValue(pvValue) vTaskSetThreadLocalStoragePointer_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, sizeof(void))
#define vTaskSetThreadLocalStoragePointer_ReturnArrayThruPtr_pvValue(pvValue, cmock_len) vTaskSetThreadLocalStoragePointer_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, (int)(cmock_len * (int)sizeof(*pvValue)))
#define vTaskSetThreadLocalStoragePointer_ReturnMemThruPtr_pvValue(pvValue, cmock_size) vTaskSetThreadLocalStoragePointer_CMockReturnMemThruPtr_pvValue(__LINE__, pvValue, cmock_size)
void vTaskSetThreadLocalStoragePointer_CMockReturnMemThruPtr_pvValue(UNITY_LINE_TYPE cmock_line, void* pvValue, int cmock_size);
#define vTaskSetThreadLocalStoragePointer_IgnoreArg_xTaskToSet() vTaskSetThreadLocalStoragePointer_CMockIgnoreArg_xTaskToSet(__LINE__)
void vTaskSetThreadLocalStoragePointer_CMockIgnoreArg_xTaskToSet(UNITY_LINE_TYPE cmock_line);
#define vTaskSetThreadLocalStoragePointer_IgnoreArg_xIndex() vTaskSetThreadLocalStoragePointer_CMockIgnoreArg_xIndex(__LINE__)
void vTaskSetThreadLocalStoragePointer_CMockIgnoreArg_xIndex(UNITY_LINE_TYPE cmock_line);
#define vTaskSetThreadLocalStoragePointer_IgnoreArg_pvValue() vTaskSetThreadLocalStoragePointer_CMockIgnoreArg_pvValue(__LINE__)
void vTaskSetThreadLocalStoragePointer_CMockIgnoreArg_pvValue(UNITY_LINE_TYPE cmock_line);
#define pvTaskGetThreadLocalStoragePointer_IgnoreAndReturn(cmock_retval) pvTaskGetThreadLocalStoragePointer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pvTaskGetThreadLocalStoragePointer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define pvTaskGetThreadLocalStoragePointer_StopIgnore() pvTaskGetThreadLocalStoragePointer_CMockStopIgnore()
void pvTaskGetThreadLocalStoragePointer_CMockStopIgnore(void);
#define pvTaskGetThreadLocalStoragePointer_ExpectAnyArgsAndReturn(cmock_retval) pvTaskGetThreadLocalStoragePointer_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void pvTaskGetThreadLocalStoragePointer_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define pvTaskGetThreadLocalStoragePointer_ExpectAndReturn(xTaskToQuery, xIndex, cmock_retval) pvTaskGetThreadLocalStoragePointer_CMockExpectAndReturn(__LINE__, xTaskToQuery, xIndex, cmock_retval)
void pvTaskGetThreadLocalStoragePointer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToQuery, BaseType_t xIndex, void* cmock_to_return);
typedef void* (* CMOCK_pvTaskGetThreadLocalStoragePointer_CALLBACK)(TaskHandle_t xTaskToQuery, BaseType_t xIndex, int cmock_num_calls);
void pvTaskGetThreadLocalStoragePointer_AddCallback(CMOCK_pvTaskGetThreadLocalStoragePointer_CALLBACK Callback);
void pvTaskGetThreadLocalStoragePointer_Stub(CMOCK_pvTaskGetThreadLocalStoragePointer_CALLBACK Callback);
#define pvTaskGetThreadLocalStoragePointer_StubWithCallback pvTaskGetThreadLocalStoragePointer_Stub
#define pvTaskGetThreadLocalStoragePointer_IgnoreArg_xTaskToQuery() pvTaskGetThreadLocalStoragePointer_CMockIgnoreArg_xTaskToQuery(__LINE__)
void pvTaskGetThreadLocalStoragePointer_CMockIgnoreArg_xTaskToQuery(UNITY_LINE_TYPE cmock_line);
#define pvTaskGetThreadLocalStoragePointer_IgnoreArg_xIndex() pvTaskGetThreadLocalStoragePointer_CMockIgnoreArg_xIndex(__LINE__)
void pvTaskGetThreadLocalStoragePointer_CMockIgnoreArg_xIndex(UNITY_LINE_TYPE cmock_line);
#define xTaskCallApplicationTaskHook_IgnoreAndReturn(cmock_retval) xTaskCallApplicationTaskHook_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskCallApplicationTaskHook_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCallApplicationTaskHook_StopIgnore() xTaskCallApplicationTaskHook_CMockStopIgnore()
void xTaskCallApplicationTaskHook_CMockStopIgnore(void);
#define xTaskCallApplicationTaskHook_ExpectAnyArgsAndReturn(cmock_retval) xTaskCallApplicationTaskHook_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskCallApplicationTaskHook_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCallApplicationTaskHook_ExpectAndReturn(xTask, pvParameter, cmock_retval) xTaskCallApplicationTaskHook_CMockExpectAndReturn(__LINE__, xTask, pvParameter, cmock_retval)
void xTaskCallApplicationTaskHook_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, void* pvParameter, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskCallApplicationTaskHook_CALLBACK)(TaskHandle_t xTask, void* pvParameter, int cmock_num_calls);
void xTaskCallApplicationTaskHook_AddCallback(CMOCK_xTaskCallApplicationTaskHook_CALLBACK Callback);
void xTaskCallApplicationTaskHook_Stub(CMOCK_xTaskCallApplicationTaskHook_CALLBACK Callback);
#define xTaskCallApplicationTaskHook_StubWithCallback xTaskCallApplicationTaskHook_Stub
#define xTaskCallApplicationTaskHook_ExpectWithArrayAndReturn(xTask, pvParameter, pvParameter_Depth, cmock_retval) xTaskCallApplicationTaskHook_CMockExpectWithArrayAndReturn(__LINE__, xTask, pvParameter, pvParameter_Depth, cmock_retval)
void xTaskCallApplicationTaskHook_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, void* pvParameter, int pvParameter_Depth, BaseType_t cmock_to_return);
#define xTaskCallApplicationTaskHook_ReturnThruPtr_pvParameter(pvParameter) xTaskCallApplicationTaskHook_CMockReturnMemThruPtr_pvParameter(__LINE__, pvParameter, sizeof(void))
#define xTaskCallApplicationTaskHook_ReturnArrayThruPtr_pvParameter(pvParameter, cmock_len) xTaskCallApplicationTaskHook_CMockReturnMemThruPtr_pvParameter(__LINE__, pvParameter, (int)(cmock_len * (int)sizeof(*pvParameter)))
#define xTaskCallApplicationTaskHook_ReturnMemThruPtr_pvParameter(pvParameter, cmock_size) xTaskCallApplicationTaskHook_CMockReturnMemThruPtr_pvParameter(__LINE__, pvParameter, cmock_size)
void xTaskCallApplicationTaskHook_CMockReturnMemThruPtr_pvParameter(UNITY_LINE_TYPE cmock_line, void* pvParameter, int cmock_size);
#define xTaskCallApplicationTaskHook_IgnoreArg_xTask() xTaskCallApplicationTaskHook_CMockIgnoreArg_xTask(__LINE__)
void xTaskCallApplicationTaskHook_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define xTaskCallApplicationTaskHook_IgnoreArg_pvParameter() xTaskCallApplicationTaskHook_CMockIgnoreArg_pvParameter(__LINE__)
void xTaskCallApplicationTaskHook_CMockIgnoreArg_pvParameter(UNITY_LINE_TYPE cmock_line);
#define xTaskGetIdleTaskHandle_IgnoreAndReturn(cmock_retval) xTaskGetIdleTaskHandle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGetIdleTaskHandle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define xTaskGetIdleTaskHandle_StopIgnore() xTaskGetIdleTaskHandle_CMockStopIgnore()
void xTaskGetIdleTaskHandle_CMockStopIgnore(void);
#define xTaskGetIdleTaskHandle_ExpectAndReturn(cmock_retval) xTaskGetIdleTaskHandle_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTaskGetIdleTaskHandle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
typedef TaskHandle_t (* CMOCK_xTaskGetIdleTaskHandle_CALLBACK)(int cmock_num_calls);
void xTaskGetIdleTaskHandle_AddCallback(CMOCK_xTaskGetIdleTaskHandle_CALLBACK Callback);
void xTaskGetIdleTaskHandle_Stub(CMOCK_xTaskGetIdleTaskHandle_CALLBACK Callback);
#define xTaskGetIdleTaskHandle_StubWithCallback xTaskGetIdleTaskHandle_Stub
#define uxTaskGetSystemState_IgnoreAndReturn(cmock_retval) uxTaskGetSystemState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTaskGetSystemState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskGetSystemState_StopIgnore() uxTaskGetSystemState_CMockStopIgnore()
void uxTaskGetSystemState_CMockStopIgnore(void);
#define uxTaskGetSystemState_ExpectAnyArgsAndReturn(cmock_retval) uxTaskGetSystemState_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxTaskGetSystemState_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskGetSystemState_ExpectAndReturn(pxTaskStatusArray, uxArraySize, pulTotalRunTime, cmock_retval) uxTaskGetSystemState_CMockExpectAndReturn(__LINE__, pxTaskStatusArray, uxArraySize, pulTotalRunTime, cmock_retval)
void uxTaskGetSystemState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskStatus_t* const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t* const pulTotalRunTime, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxTaskGetSystemState_CALLBACK)(TaskStatus_t* const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t* const pulTotalRunTime, int cmock_num_calls);
void uxTaskGetSystemState_AddCallback(CMOCK_uxTaskGetSystemState_CALLBACK Callback);
void uxTaskGetSystemState_Stub(CMOCK_uxTaskGetSystemState_CALLBACK Callback);
#define uxTaskGetSystemState_StubWithCallback uxTaskGetSystemState_Stub
#define uxTaskGetSystemState_ExpectWithArrayAndReturn(pxTaskStatusArray, pxTaskStatusArray_Depth, uxArraySize, pulTotalRunTime, pulTotalRunTime_Depth, cmock_retval) uxTaskGetSystemState_CMockExpectWithArrayAndReturn(__LINE__, pxTaskStatusArray, pxTaskStatusArray_Depth, uxArraySize, pulTotalRunTime, pulTotalRunTime_Depth, cmock_retval)
void uxTaskGetSystemState_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TaskStatus_t* const pxTaskStatusArray, int pxTaskStatusArray_Depth, const UBaseType_t uxArraySize, uint32_t* const pulTotalRunTime, int pulTotalRunTime_Depth, UBaseType_t cmock_to_return);
#define uxTaskGetSystemState_ReturnThruPtr_pxTaskStatusArray(pxTaskStatusArray) uxTaskGetSystemState_CMockReturnMemThruPtr_pxTaskStatusArray(__LINE__, pxTaskStatusArray, sizeof(TaskStatus_t))
#define uxTaskGetSystemState_ReturnArrayThruPtr_pxTaskStatusArray(pxTaskStatusArray, cmock_len) uxTaskGetSystemState_CMockReturnMemThruPtr_pxTaskStatusArray(__LINE__, pxTaskStatusArray, (int)(cmock_len * (int)sizeof(*pxTaskStatusArray)))
#define uxTaskGetSystemState_ReturnMemThruPtr_pxTaskStatusArray(pxTaskStatusArray, cmock_size) uxTaskGetSystemState_CMockReturnMemThruPtr_pxTaskStatusArray(__LINE__, pxTaskStatusArray, cmock_size)
void uxTaskGetSystemState_CMockReturnMemThruPtr_pxTaskStatusArray(UNITY_LINE_TYPE cmock_line, TaskStatus_t* pxTaskStatusArray, int cmock_size);
#define uxTaskGetSystemState_ReturnThruPtr_pulTotalRunTime(pulTotalRunTime) uxTaskGetSystemState_CMockReturnMemThruPtr_pulTotalRunTime(__LINE__, pulTotalRunTime, sizeof(uint32_t))
#define uxTaskGetSystemState_ReturnArrayThruPtr_pulTotalRunTime(pulTotalRunTime, cmock_len) uxTaskGetSystemState_CMockReturnMemThruPtr_pulTotalRunTime(__LINE__, pulTotalRunTime, (int)(cmock_len * (int)sizeof(*pulTotalRunTime)))
#define uxTaskGetSystemState_ReturnMemThruPtr_pulTotalRunTime(pulTotalRunTime, cmock_size) uxTaskGetSystemState_CMockReturnMemThruPtr_pulTotalRunTime(__LINE__, pulTotalRunTime, cmock_size)
void uxTaskGetSystemState_CMockReturnMemThruPtr_pulTotalRunTime(UNITY_LINE_TYPE cmock_line, uint32_t* pulTotalRunTime, int cmock_size);
#define uxTaskGetSystemState_IgnoreArg_pxTaskStatusArray() uxTaskGetSystemState_CMockIgnoreArg_pxTaskStatusArray(__LINE__)
void uxTaskGetSystemState_CMockIgnoreArg_pxTaskStatusArray(UNITY_LINE_TYPE cmock_line);
#define uxTaskGetSystemState_IgnoreArg_uxArraySize() uxTaskGetSystemState_CMockIgnoreArg_uxArraySize(__LINE__)
void uxTaskGetSystemState_CMockIgnoreArg_uxArraySize(UNITY_LINE_TYPE cmock_line);
#define uxTaskGetSystemState_IgnoreArg_pulTotalRunTime() uxTaskGetSystemState_CMockIgnoreArg_pulTotalRunTime(__LINE__)
void uxTaskGetSystemState_CMockIgnoreArg_pulTotalRunTime(UNITY_LINE_TYPE cmock_line);
#define vTaskList_Ignore() vTaskList_CMockIgnore()
void vTaskList_CMockIgnore(void);
#define vTaskList_StopIgnore() vTaskList_CMockStopIgnore()
void vTaskList_CMockStopIgnore(void);
#define vTaskList_ExpectAnyArgs() vTaskList_CMockExpectAnyArgs(__LINE__)
void vTaskList_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskList_Expect(pcWriteBuffer) vTaskList_CMockExpect(__LINE__, pcWriteBuffer)
void vTaskList_CMockExpect(UNITY_LINE_TYPE cmock_line, char* pcWriteBuffer);
typedef void (* CMOCK_vTaskList_CALLBACK)(char* pcWriteBuffer, int cmock_num_calls);
void vTaskList_AddCallback(CMOCK_vTaskList_CALLBACK Callback);
void vTaskList_Stub(CMOCK_vTaskList_CALLBACK Callback);
#define vTaskList_StubWithCallback vTaskList_Stub
#define vTaskList_ReturnThruPtr_pcWriteBuffer(pcWriteBuffer) vTaskList_CMockReturnMemThruPtr_pcWriteBuffer(__LINE__, pcWriteBuffer, sizeof(char))
#define vTaskList_ReturnArrayThruPtr_pcWriteBuffer(pcWriteBuffer, cmock_len) vTaskList_CMockReturnMemThruPtr_pcWriteBuffer(__LINE__, pcWriteBuffer, (int)(cmock_len * (int)sizeof(*pcWriteBuffer)))
#define vTaskList_ReturnMemThruPtr_pcWriteBuffer(pcWriteBuffer, cmock_size) vTaskList_CMockReturnMemThruPtr_pcWriteBuffer(__LINE__, pcWriteBuffer, cmock_size)
void vTaskList_CMockReturnMemThruPtr_pcWriteBuffer(UNITY_LINE_TYPE cmock_line, char* pcWriteBuffer, int cmock_size);
#define vTaskList_IgnoreArg_pcWriteBuffer() vTaskList_CMockIgnoreArg_pcWriteBuffer(__LINE__)
void vTaskList_CMockIgnoreArg_pcWriteBuffer(UNITY_LINE_TYPE cmock_line);
#define vTaskGetRunTimeStats_Ignore() vTaskGetRunTimeStats_CMockIgnore()
void vTaskGetRunTimeStats_CMockIgnore(void);
#define vTaskGetRunTimeStats_StopIgnore() vTaskGetRunTimeStats_CMockStopIgnore()
void vTaskGetRunTimeStats_CMockStopIgnore(void);
#define vTaskGetRunTimeStats_ExpectAnyArgs() vTaskGetRunTimeStats_CMockExpectAnyArgs(__LINE__)
void vTaskGetRunTimeStats_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskGetRunTimeStats_Expect(pcWriteBuffer) vTaskGetRunTimeStats_CMockExpect(__LINE__, pcWriteBuffer)
void vTaskGetRunTimeStats_CMockExpect(UNITY_LINE_TYPE cmock_line, char* pcWriteBuffer);
typedef void (* CMOCK_vTaskGetRunTimeStats_CALLBACK)(char* pcWriteBuffer, int cmock_num_calls);
void vTaskGetRunTimeStats_AddCallback(CMOCK_vTaskGetRunTimeStats_CALLBACK Callback);
void vTaskGetRunTimeStats_Stub(CMOCK_vTaskGetRunTimeStats_CALLBACK Callback);
#define vTaskGetRunTimeStats_StubWithCallback vTaskGetRunTimeStats_Stub
#define vTaskGetRunTimeStats_ReturnThruPtr_pcWriteBuffer(pcWriteBuffer) vTaskGetRunTimeStats_CMockReturnMemThruPtr_pcWriteBuffer(__LINE__, pcWriteBuffer, sizeof(char))
#define vTaskGetRunTimeStats_ReturnArrayThruPtr_pcWriteBuffer(pcWriteBuffer, cmock_len) vTaskGetRunTimeStats_CMockReturnMemThruPtr_pcWriteBuffer(__LINE__, pcWriteBuffer, (int)(cmock_len * (int)sizeof(*pcWriteBuffer)))
#define vTaskGetRunTimeStats_ReturnMemThruPtr_pcWriteBuffer(pcWriteBuffer, cmock_size) vTaskGetRunTimeStats_CMockReturnMemThruPtr_pcWriteBuffer(__LINE__, pcWriteBuffer, cmock_size)
void vTaskGetRunTimeStats_CMockReturnMemThruPtr_pcWriteBuffer(UNITY_LINE_TYPE cmock_line, char* pcWriteBuffer, int cmock_size);
#define vTaskGetRunTimeStats_IgnoreArg_pcWriteBuffer() vTaskGetRunTimeStats_CMockIgnoreArg_pcWriteBuffer(__LINE__)
void vTaskGetRunTimeStats_CMockIgnoreArg_pcWriteBuffer(UNITY_LINE_TYPE cmock_line);
#define ulTaskGetIdleRunTimeCounter_IgnoreAndReturn(cmock_retval) ulTaskGetIdleRunTimeCounter_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulTaskGetIdleRunTimeCounter_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTaskGetIdleRunTimeCounter_StopIgnore() ulTaskGetIdleRunTimeCounter_CMockStopIgnore()
void ulTaskGetIdleRunTimeCounter_CMockStopIgnore(void);
#define ulTaskGetIdleRunTimeCounter_ExpectAndReturn(cmock_retval) ulTaskGetIdleRunTimeCounter_CMockExpectAndReturn(__LINE__, cmock_retval)
void ulTaskGetIdleRunTimeCounter_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulTaskGetIdleRunTimeCounter_CALLBACK)(int cmock_num_calls);
void ulTaskGetIdleRunTimeCounter_AddCallback(CMOCK_ulTaskGetIdleRunTimeCounter_CALLBACK Callback);
void ulTaskGetIdleRunTimeCounter_Stub(CMOCK_ulTaskGetIdleRunTimeCounter_CALLBACK Callback);
#define ulTaskGetIdleRunTimeCounter_StubWithCallback ulTaskGetIdleRunTimeCounter_Stub
#define xTaskGenericNotify_IgnoreAndReturn(cmock_retval) xTaskGenericNotify_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGenericNotify_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskGenericNotify_StopIgnore() xTaskGenericNotify_CMockStopIgnore()
void xTaskGenericNotify_CMockStopIgnore(void);
#define xTaskGenericNotify_ExpectAnyArgsAndReturn(cmock_retval) xTaskGenericNotify_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskGenericNotify_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskGenericNotify_ExpectAndReturn(xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, cmock_retval) xTaskGenericNotify_CMockExpectAndReturn(__LINE__, xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, cmock_retval)
void xTaskGenericNotify_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t* pulPreviousNotificationValue, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskGenericNotify_CALLBACK)(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t* pulPreviousNotificationValue, int cmock_num_calls);
void xTaskGenericNotify_AddCallback(CMOCK_xTaskGenericNotify_CALLBACK Callback);
void xTaskGenericNotify_Stub(CMOCK_xTaskGenericNotify_CALLBACK Callback);
#define xTaskGenericNotify_StubWithCallback xTaskGenericNotify_Stub
#define xTaskGenericNotify_ExpectWithArrayAndReturn(xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, pulPreviousNotificationValue_Depth, cmock_retval) xTaskGenericNotify_CMockExpectWithArrayAndReturn(__LINE__, xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, pulPreviousNotificationValue_Depth, cmock_retval)
void xTaskGenericNotify_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t* pulPreviousNotificationValue, int pulPreviousNotificationValue_Depth, BaseType_t cmock_to_return);
#define xTaskGenericNotify_ReturnThruPtr_pulPreviousNotificationValue(pulPreviousNotificationValue) xTaskGenericNotify_CMockReturnMemThruPtr_pulPreviousNotificationValue(__LINE__, pulPreviousNotificationValue, sizeof(uint32_t))
#define xTaskGenericNotify_ReturnArrayThruPtr_pulPreviousNotificationValue(pulPreviousNotificationValue, cmock_len) xTaskGenericNotify_CMockReturnMemThruPtr_pulPreviousNotificationValue(__LINE__, pulPreviousNotificationValue, (int)(cmock_len * (int)sizeof(*pulPreviousNotificationValue)))
#define xTaskGenericNotify_ReturnMemThruPtr_pulPreviousNotificationValue(pulPreviousNotificationValue, cmock_size) xTaskGenericNotify_CMockReturnMemThruPtr_pulPreviousNotificationValue(__LINE__, pulPreviousNotificationValue, cmock_size)
void xTaskGenericNotify_CMockReturnMemThruPtr_pulPreviousNotificationValue(UNITY_LINE_TYPE cmock_line, uint32_t* pulPreviousNotificationValue, int cmock_size);
#define xTaskGenericNotify_IgnoreArg_xTaskToNotify() xTaskGenericNotify_CMockIgnoreArg_xTaskToNotify(__LINE__)
void xTaskGenericNotify_CMockIgnoreArg_xTaskToNotify(UNITY_LINE_TYPE cmock_line);
#define xTaskGenericNotify_IgnoreArg_ulValue() xTaskGenericNotify_CMockIgnoreArg_ulValue(__LINE__)
void xTaskGenericNotify_CMockIgnoreArg_ulValue(UNITY_LINE_TYPE cmock_line);
#define xTaskGenericNotify_IgnoreArg_eAction() xTaskGenericNotify_CMockIgnoreArg_eAction(__LINE__)
void xTaskGenericNotify_CMockIgnoreArg_eAction(UNITY_LINE_TYPE cmock_line);
#define xTaskGenericNotify_IgnoreArg_pulPreviousNotificationValue() xTaskGenericNotify_CMockIgnoreArg_pulPreviousNotificationValue(__LINE__)
void xTaskGenericNotify_CMockIgnoreArg_pulPreviousNotificationValue(UNITY_LINE_TYPE cmock_line);
#define xTaskGenericNotifyFromISR_IgnoreAndReturn(cmock_retval) xTaskGenericNotifyFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGenericNotifyFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskGenericNotifyFromISR_StopIgnore() xTaskGenericNotifyFromISR_CMockStopIgnore()
void xTaskGenericNotifyFromISR_CMockStopIgnore(void);
#define xTaskGenericNotifyFromISR_ExpectAnyArgsAndReturn(cmock_retval) xTaskGenericNotifyFromISR_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskGenericNotifyFromISR_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskGenericNotifyFromISR_ExpectAndReturn(xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken, cmock_retval) xTaskGenericNotifyFromISR_CMockExpectAndReturn(__LINE__, xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken, cmock_retval)
void xTaskGenericNotifyFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t* pulPreviousNotificationValue, BaseType_t* pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskGenericNotifyFromISR_CALLBACK)(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t* pulPreviousNotificationValue, BaseType_t* pxHigherPriorityTaskWoken, int cmock_num_calls);
void xTaskGenericNotifyFromISR_AddCallback(CMOCK_xTaskGenericNotifyFromISR_CALLBACK Callback);
void xTaskGenericNotifyFromISR_Stub(CMOCK_xTaskGenericNotifyFromISR_CALLBACK Callback);
#define xTaskGenericNotifyFromISR_StubWithCallback xTaskGenericNotifyFromISR_Stub
#define xTaskGenericNotifyFromISR_ExpectWithArrayAndReturn(xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, pulPreviousNotificationValue_Depth, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth, cmock_retval) xTaskGenericNotifyFromISR_CMockExpectWithArrayAndReturn(__LINE__, xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, pulPreviousNotificationValue_Depth, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth, cmock_retval)
void xTaskGenericNotifyFromISR_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t* pulPreviousNotificationValue, int pulPreviousNotificationValue_Depth, BaseType_t* pxHigherPriorityTaskWoken, int pxHigherPriorityTaskWoken_Depth, BaseType_t cmock_to_return);
#define xTaskGenericNotifyFromISR_ReturnThruPtr_pulPreviousNotificationValue(pulPreviousNotificationValue) xTaskGenericNotifyFromISR_CMockReturnMemThruPtr_pulPreviousNotificationValue(__LINE__, pulPreviousNotificationValue, sizeof(uint32_t))
#define xTaskGenericNotifyFromISR_ReturnArrayThruPtr_pulPreviousNotificationValue(pulPreviousNotificationValue, cmock_len) xTaskGenericNotifyFromISR_CMockReturnMemThruPtr_pulPreviousNotificationValue(__LINE__, pulPreviousNotificationValue, (int)(cmock_len * (int)sizeof(*pulPreviousNotificationValue)))
#define xTaskGenericNotifyFromISR_ReturnMemThruPtr_pulPreviousNotificationValue(pulPreviousNotificationValue, cmock_size) xTaskGenericNotifyFromISR_CMockReturnMemThruPtr_pulPreviousNotificationValue(__LINE__, pulPreviousNotificationValue, cmock_size)
void xTaskGenericNotifyFromISR_CMockReturnMemThruPtr_pulPreviousNotificationValue(UNITY_LINE_TYPE cmock_line, uint32_t* pulPreviousNotificationValue, int cmock_size);
#define xTaskGenericNotifyFromISR_ReturnThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken) xTaskGenericNotifyFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, sizeof(BaseType_t))
#define xTaskGenericNotifyFromISR_ReturnArrayThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_len) xTaskGenericNotifyFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, (int)(cmock_len * (int)sizeof(*pxHigherPriorityTaskWoken)))
#define xTaskGenericNotifyFromISR_ReturnMemThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_size) xTaskGenericNotifyFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, cmock_size)
void xTaskGenericNotifyFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line, BaseType_t* pxHigherPriorityTaskWoken, int cmock_size);
#define xTaskGenericNotifyFromISR_IgnoreArg_xTaskToNotify() xTaskGenericNotifyFromISR_CMockIgnoreArg_xTaskToNotify(__LINE__)
void xTaskGenericNotifyFromISR_CMockIgnoreArg_xTaskToNotify(UNITY_LINE_TYPE cmock_line);
#define xTaskGenericNotifyFromISR_IgnoreArg_ulValue() xTaskGenericNotifyFromISR_CMockIgnoreArg_ulValue(__LINE__)
void xTaskGenericNotifyFromISR_CMockIgnoreArg_ulValue(UNITY_LINE_TYPE cmock_line);
#define xTaskGenericNotifyFromISR_IgnoreArg_eAction() xTaskGenericNotifyFromISR_CMockIgnoreArg_eAction(__LINE__)
void xTaskGenericNotifyFromISR_CMockIgnoreArg_eAction(UNITY_LINE_TYPE cmock_line);
#define xTaskGenericNotifyFromISR_IgnoreArg_pulPreviousNotificationValue() xTaskGenericNotifyFromISR_CMockIgnoreArg_pulPreviousNotificationValue(__LINE__)
void xTaskGenericNotifyFromISR_CMockIgnoreArg_pulPreviousNotificationValue(UNITY_LINE_TYPE cmock_line);
#define xTaskGenericNotifyFromISR_IgnoreArg_pxHigherPriorityTaskWoken() xTaskGenericNotifyFromISR_CMockIgnoreArg_pxHigherPriorityTaskWoken(__LINE__)
void xTaskGenericNotifyFromISR_CMockIgnoreArg_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line);
#define xTaskNotifyWait_IgnoreAndReturn(cmock_retval) xTaskNotifyWait_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskNotifyWait_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskNotifyWait_StopIgnore() xTaskNotifyWait_CMockStopIgnore()
void xTaskNotifyWait_CMockStopIgnore(void);
#define xTaskNotifyWait_ExpectAnyArgsAndReturn(cmock_retval) xTaskNotifyWait_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskNotifyWait_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskNotifyWait_ExpectAndReturn(ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait, cmock_retval) xTaskNotifyWait_CMockExpectAndReturn(__LINE__, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait, cmock_retval)
void xTaskNotifyWait_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t* pulNotificationValue, TickType_t xTicksToWait, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskNotifyWait_CALLBACK)(uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t* pulNotificationValue, TickType_t xTicksToWait, int cmock_num_calls);
void xTaskNotifyWait_AddCallback(CMOCK_xTaskNotifyWait_CALLBACK Callback);
void xTaskNotifyWait_Stub(CMOCK_xTaskNotifyWait_CALLBACK Callback);
#define xTaskNotifyWait_StubWithCallback xTaskNotifyWait_Stub
#define xTaskNotifyWait_ExpectWithArrayAndReturn(ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, pulNotificationValue_Depth, xTicksToWait, cmock_retval) xTaskNotifyWait_CMockExpectWithArrayAndReturn(__LINE__, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, pulNotificationValue_Depth, xTicksToWait, cmock_retval)
void xTaskNotifyWait_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t* pulNotificationValue, int pulNotificationValue_Depth, TickType_t xTicksToWait, BaseType_t cmock_to_return);
#define xTaskNotifyWait_ReturnThruPtr_pulNotificationValue(pulNotificationValue) xTaskNotifyWait_CMockReturnMemThruPtr_pulNotificationValue(__LINE__, pulNotificationValue, sizeof(uint32_t))
#define xTaskNotifyWait_ReturnArrayThruPtr_pulNotificationValue(pulNotificationValue, cmock_len) xTaskNotifyWait_CMockReturnMemThruPtr_pulNotificationValue(__LINE__, pulNotificationValue, (int)(cmock_len * (int)sizeof(*pulNotificationValue)))
#define xTaskNotifyWait_ReturnMemThruPtr_pulNotificationValue(pulNotificationValue, cmock_size) xTaskNotifyWait_CMockReturnMemThruPtr_pulNotificationValue(__LINE__, pulNotificationValue, cmock_size)
void xTaskNotifyWait_CMockReturnMemThruPtr_pulNotificationValue(UNITY_LINE_TYPE cmock_line, uint32_t* pulNotificationValue, int cmock_size);
#define xTaskNotifyWait_IgnoreArg_ulBitsToClearOnEntry() xTaskNotifyWait_CMockIgnoreArg_ulBitsToClearOnEntry(__LINE__)
void xTaskNotifyWait_CMockIgnoreArg_ulBitsToClearOnEntry(UNITY_LINE_TYPE cmock_line);
#define xTaskNotifyWait_IgnoreArg_ulBitsToClearOnExit() xTaskNotifyWait_CMockIgnoreArg_ulBitsToClearOnExit(__LINE__)
void xTaskNotifyWait_CMockIgnoreArg_ulBitsToClearOnExit(UNITY_LINE_TYPE cmock_line);
#define xTaskNotifyWait_IgnoreArg_pulNotificationValue() xTaskNotifyWait_CMockIgnoreArg_pulNotificationValue(__LINE__)
void xTaskNotifyWait_CMockIgnoreArg_pulNotificationValue(UNITY_LINE_TYPE cmock_line);
#define xTaskNotifyWait_IgnoreArg_xTicksToWait() xTaskNotifyWait_CMockIgnoreArg_xTicksToWait(__LINE__)
void xTaskNotifyWait_CMockIgnoreArg_xTicksToWait(UNITY_LINE_TYPE cmock_line);
#define vTaskNotifyGiveFromISR_Ignore() vTaskNotifyGiveFromISR_CMockIgnore()
void vTaskNotifyGiveFromISR_CMockIgnore(void);
#define vTaskNotifyGiveFromISR_StopIgnore() vTaskNotifyGiveFromISR_CMockStopIgnore()
void vTaskNotifyGiveFromISR_CMockStopIgnore(void);
#define vTaskNotifyGiveFromISR_ExpectAnyArgs() vTaskNotifyGiveFromISR_CMockExpectAnyArgs(__LINE__)
void vTaskNotifyGiveFromISR_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskNotifyGiveFromISR_Expect(xTaskToNotify, pxHigherPriorityTaskWoken) vTaskNotifyGiveFromISR_CMockExpect(__LINE__, xTaskToNotify, pxHigherPriorityTaskWoken)
void vTaskNotifyGiveFromISR_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToNotify, BaseType_t* pxHigherPriorityTaskWoken);
typedef void (* CMOCK_vTaskNotifyGiveFromISR_CALLBACK)(TaskHandle_t xTaskToNotify, BaseType_t* pxHigherPriorityTaskWoken, int cmock_num_calls);
void vTaskNotifyGiveFromISR_AddCallback(CMOCK_vTaskNotifyGiveFromISR_CALLBACK Callback);
void vTaskNotifyGiveFromISR_Stub(CMOCK_vTaskNotifyGiveFromISR_CALLBACK Callback);
#define vTaskNotifyGiveFromISR_StubWithCallback vTaskNotifyGiveFromISR_Stub
#define vTaskNotifyGiveFromISR_ExpectWithArray(xTaskToNotify, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth) vTaskNotifyGiveFromISR_CMockExpectWithArray(__LINE__, xTaskToNotify, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth)
void vTaskNotifyGiveFromISR_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTaskToNotify, BaseType_t* pxHigherPriorityTaskWoken, int pxHigherPriorityTaskWoken_Depth);
#define vTaskNotifyGiveFromISR_ReturnThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken) vTaskNotifyGiveFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, sizeof(BaseType_t))
#define vTaskNotifyGiveFromISR_ReturnArrayThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_len) vTaskNotifyGiveFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, (int)(cmock_len * (int)sizeof(*pxHigherPriorityTaskWoken)))
#define vTaskNotifyGiveFromISR_ReturnMemThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_size) vTaskNotifyGiveFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, cmock_size)
void vTaskNotifyGiveFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line, BaseType_t* pxHigherPriorityTaskWoken, int cmock_size);
#define vTaskNotifyGiveFromISR_IgnoreArg_xTaskToNotify() vTaskNotifyGiveFromISR_CMockIgnoreArg_xTaskToNotify(__LINE__)
void vTaskNotifyGiveFromISR_CMockIgnoreArg_xTaskToNotify(UNITY_LINE_TYPE cmock_line);
#define vTaskNotifyGiveFromISR_IgnoreArg_pxHigherPriorityTaskWoken() vTaskNotifyGiveFromISR_CMockIgnoreArg_pxHigherPriorityTaskWoken(__LINE__)
void vTaskNotifyGiveFromISR_CMockIgnoreArg_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line);
#define ulTaskNotifyTake_IgnoreAndReturn(cmock_retval) ulTaskNotifyTake_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulTaskNotifyTake_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTaskNotifyTake_StopIgnore() ulTaskNotifyTake_CMockStopIgnore()
void ulTaskNotifyTake_CMockStopIgnore(void);
#define ulTaskNotifyTake_ExpectAnyArgsAndReturn(cmock_retval) ulTaskNotifyTake_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulTaskNotifyTake_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTaskNotifyTake_ExpectAndReturn(xClearCountOnExit, xTicksToWait, cmock_retval) ulTaskNotifyTake_CMockExpectAndReturn(__LINE__, xClearCountOnExit, xTicksToWait, cmock_retval)
void ulTaskNotifyTake_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t xClearCountOnExit, TickType_t xTicksToWait, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulTaskNotifyTake_CALLBACK)(BaseType_t xClearCountOnExit, TickType_t xTicksToWait, int cmock_num_calls);
void ulTaskNotifyTake_AddCallback(CMOCK_ulTaskNotifyTake_CALLBACK Callback);
void ulTaskNotifyTake_Stub(CMOCK_ulTaskNotifyTake_CALLBACK Callback);
#define ulTaskNotifyTake_StubWithCallback ulTaskNotifyTake_Stub
#define ulTaskNotifyTake_IgnoreArg_xClearCountOnExit() ulTaskNotifyTake_CMockIgnoreArg_xClearCountOnExit(__LINE__)
void ulTaskNotifyTake_CMockIgnoreArg_xClearCountOnExit(UNITY_LINE_TYPE cmock_line);
#define ulTaskNotifyTake_IgnoreArg_xTicksToWait() ulTaskNotifyTake_CMockIgnoreArg_xTicksToWait(__LINE__)
void ulTaskNotifyTake_CMockIgnoreArg_xTicksToWait(UNITY_LINE_TYPE cmock_line);
#define xTaskNotifyStateClear_IgnoreAndReturn(cmock_retval) xTaskNotifyStateClear_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskNotifyStateClear_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskNotifyStateClear_StopIgnore() xTaskNotifyStateClear_CMockStopIgnore()
void xTaskNotifyStateClear_CMockStopIgnore(void);
#define xTaskNotifyStateClear_ExpectAnyArgsAndReturn(cmock_retval) xTaskNotifyStateClear_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskNotifyStateClear_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskNotifyStateClear_ExpectAndReturn(xTask, cmock_retval) xTaskNotifyStateClear_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void xTaskNotifyStateClear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskNotifyStateClear_CALLBACK)(TaskHandle_t xTask, int cmock_num_calls);
void xTaskNotifyStateClear_AddCallback(CMOCK_xTaskNotifyStateClear_CALLBACK Callback);
void xTaskNotifyStateClear_Stub(CMOCK_xTaskNotifyStateClear_CALLBACK Callback);
#define xTaskNotifyStateClear_StubWithCallback xTaskNotifyStateClear_Stub
#define xTaskNotifyStateClear_IgnoreArg_xTask() xTaskNotifyStateClear_CMockIgnoreArg_xTask(__LINE__)
void xTaskNotifyStateClear_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define ulTaskNotifyValueClear_IgnoreAndReturn(cmock_retval) ulTaskNotifyValueClear_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulTaskNotifyValueClear_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTaskNotifyValueClear_StopIgnore() ulTaskNotifyValueClear_CMockStopIgnore()
void ulTaskNotifyValueClear_CMockStopIgnore(void);
#define ulTaskNotifyValueClear_ExpectAnyArgsAndReturn(cmock_retval) ulTaskNotifyValueClear_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ulTaskNotifyValueClear_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define ulTaskNotifyValueClear_ExpectAndReturn(xTask, ulBitsToClear, cmock_retval) ulTaskNotifyValueClear_CMockExpectAndReturn(__LINE__, xTask, ulBitsToClear, cmock_retval)
void ulTaskNotifyValueClear_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, uint32_t ulBitsToClear, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_ulTaskNotifyValueClear_CALLBACK)(TaskHandle_t xTask, uint32_t ulBitsToClear, int cmock_num_calls);
void ulTaskNotifyValueClear_AddCallback(CMOCK_ulTaskNotifyValueClear_CALLBACK Callback);
void ulTaskNotifyValueClear_Stub(CMOCK_ulTaskNotifyValueClear_CALLBACK Callback);
#define ulTaskNotifyValueClear_StubWithCallback ulTaskNotifyValueClear_Stub
#define ulTaskNotifyValueClear_IgnoreArg_xTask() ulTaskNotifyValueClear_CMockIgnoreArg_xTask(__LINE__)
void ulTaskNotifyValueClear_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define ulTaskNotifyValueClear_IgnoreArg_ulBitsToClear() ulTaskNotifyValueClear_CMockIgnoreArg_ulBitsToClear(__LINE__)
void ulTaskNotifyValueClear_CMockIgnoreArg_ulBitsToClear(UNITY_LINE_TYPE cmock_line);
#define vTaskSetTimeOutState_Ignore() vTaskSetTimeOutState_CMockIgnore()
void vTaskSetTimeOutState_CMockIgnore(void);
#define vTaskSetTimeOutState_StopIgnore() vTaskSetTimeOutState_CMockStopIgnore()
void vTaskSetTimeOutState_CMockStopIgnore(void);
#define vTaskSetTimeOutState_ExpectAnyArgs() vTaskSetTimeOutState_CMockExpectAnyArgs(__LINE__)
void vTaskSetTimeOutState_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskSetTimeOutState_Expect(pxTimeOut) vTaskSetTimeOutState_CMockExpect(__LINE__, pxTimeOut)
void vTaskSetTimeOutState_CMockExpect(UNITY_LINE_TYPE cmock_line, TimeOut_t* const pxTimeOut);
typedef void (* CMOCK_vTaskSetTimeOutState_CALLBACK)(TimeOut_t* const pxTimeOut, int cmock_num_calls);
void vTaskSetTimeOutState_AddCallback(CMOCK_vTaskSetTimeOutState_CALLBACK Callback);
void vTaskSetTimeOutState_Stub(CMOCK_vTaskSetTimeOutState_CALLBACK Callback);
#define vTaskSetTimeOutState_StubWithCallback vTaskSetTimeOutState_Stub
#define vTaskSetTimeOutState_ExpectWithArray(pxTimeOut, pxTimeOut_Depth) vTaskSetTimeOutState_CMockExpectWithArray(__LINE__, pxTimeOut, pxTimeOut_Depth)
void vTaskSetTimeOutState_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TimeOut_t* const pxTimeOut, int pxTimeOut_Depth);
#define vTaskSetTimeOutState_ReturnThruPtr_pxTimeOut(pxTimeOut) vTaskSetTimeOutState_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, sizeof(TimeOut_t))
#define vTaskSetTimeOutState_ReturnArrayThruPtr_pxTimeOut(pxTimeOut, cmock_len) vTaskSetTimeOutState_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, (int)(cmock_len * (int)sizeof(*pxTimeOut)))
#define vTaskSetTimeOutState_ReturnMemThruPtr_pxTimeOut(pxTimeOut, cmock_size) vTaskSetTimeOutState_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, cmock_size)
void vTaskSetTimeOutState_CMockReturnMemThruPtr_pxTimeOut(UNITY_LINE_TYPE cmock_line, TimeOut_t* pxTimeOut, int cmock_size);
#define vTaskSetTimeOutState_IgnoreArg_pxTimeOut() vTaskSetTimeOutState_CMockIgnoreArg_pxTimeOut(__LINE__)
void vTaskSetTimeOutState_CMockIgnoreArg_pxTimeOut(UNITY_LINE_TYPE cmock_line);
#define xTaskCheckForTimeOut_IgnoreAndReturn(cmock_retval) xTaskCheckForTimeOut_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskCheckForTimeOut_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCheckForTimeOut_StopIgnore() xTaskCheckForTimeOut_CMockStopIgnore()
void xTaskCheckForTimeOut_CMockStopIgnore(void);
#define xTaskCheckForTimeOut_ExpectAnyArgsAndReturn(cmock_retval) xTaskCheckForTimeOut_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskCheckForTimeOut_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCheckForTimeOut_ExpectAndReturn(pxTimeOut, pxTicksToWait, cmock_retval) xTaskCheckForTimeOut_CMockExpectAndReturn(__LINE__, pxTimeOut, pxTicksToWait, cmock_retval)
void xTaskCheckForTimeOut_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimeOut_t* const pxTimeOut, TickType_t* const pxTicksToWait, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskCheckForTimeOut_CALLBACK)(TimeOut_t* const pxTimeOut, TickType_t* const pxTicksToWait, int cmock_num_calls);
void xTaskCheckForTimeOut_AddCallback(CMOCK_xTaskCheckForTimeOut_CALLBACK Callback);
void xTaskCheckForTimeOut_Stub(CMOCK_xTaskCheckForTimeOut_CALLBACK Callback);
#define xTaskCheckForTimeOut_StubWithCallback xTaskCheckForTimeOut_Stub
#define xTaskCheckForTimeOut_ExpectWithArrayAndReturn(pxTimeOut, pxTimeOut_Depth, pxTicksToWait, pxTicksToWait_Depth, cmock_retval) xTaskCheckForTimeOut_CMockExpectWithArrayAndReturn(__LINE__, pxTimeOut, pxTimeOut_Depth, pxTicksToWait, pxTicksToWait_Depth, cmock_retval)
void xTaskCheckForTimeOut_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TimeOut_t* const pxTimeOut, int pxTimeOut_Depth, TickType_t* const pxTicksToWait, int pxTicksToWait_Depth, BaseType_t cmock_to_return);
#define xTaskCheckForTimeOut_ReturnThruPtr_pxTimeOut(pxTimeOut) xTaskCheckForTimeOut_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, sizeof(TimeOut_t))
#define xTaskCheckForTimeOut_ReturnArrayThruPtr_pxTimeOut(pxTimeOut, cmock_len) xTaskCheckForTimeOut_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, (int)(cmock_len * (int)sizeof(*pxTimeOut)))
#define xTaskCheckForTimeOut_ReturnMemThruPtr_pxTimeOut(pxTimeOut, cmock_size) xTaskCheckForTimeOut_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, cmock_size)
void xTaskCheckForTimeOut_CMockReturnMemThruPtr_pxTimeOut(UNITY_LINE_TYPE cmock_line, TimeOut_t* pxTimeOut, int cmock_size);
#define xTaskCheckForTimeOut_ReturnThruPtr_pxTicksToWait(pxTicksToWait) xTaskCheckForTimeOut_CMockReturnMemThruPtr_pxTicksToWait(__LINE__, pxTicksToWait, sizeof(TickType_t))
#define xTaskCheckForTimeOut_ReturnArrayThruPtr_pxTicksToWait(pxTicksToWait, cmock_len) xTaskCheckForTimeOut_CMockReturnMemThruPtr_pxTicksToWait(__LINE__, pxTicksToWait, (int)(cmock_len * (int)sizeof(*pxTicksToWait)))
#define xTaskCheckForTimeOut_ReturnMemThruPtr_pxTicksToWait(pxTicksToWait, cmock_size) xTaskCheckForTimeOut_CMockReturnMemThruPtr_pxTicksToWait(__LINE__, pxTicksToWait, cmock_size)
void xTaskCheckForTimeOut_CMockReturnMemThruPtr_pxTicksToWait(UNITY_LINE_TYPE cmock_line, TickType_t* pxTicksToWait, int cmock_size);
#define xTaskCheckForTimeOut_IgnoreArg_pxTimeOut() xTaskCheckForTimeOut_CMockIgnoreArg_pxTimeOut(__LINE__)
void xTaskCheckForTimeOut_CMockIgnoreArg_pxTimeOut(UNITY_LINE_TYPE cmock_line);
#define xTaskCheckForTimeOut_IgnoreArg_pxTicksToWait() xTaskCheckForTimeOut_CMockIgnoreArg_pxTicksToWait(__LINE__)
void xTaskCheckForTimeOut_CMockIgnoreArg_pxTicksToWait(UNITY_LINE_TYPE cmock_line);
#define xTaskIncrementTick_IgnoreAndReturn(cmock_retval) xTaskIncrementTick_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskIncrementTick_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskIncrementTick_StopIgnore() xTaskIncrementTick_CMockStopIgnore()
void xTaskIncrementTick_CMockStopIgnore(void);
#define xTaskIncrementTick_ExpectAndReturn(cmock_retval) xTaskIncrementTick_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTaskIncrementTick_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskIncrementTick_CALLBACK)(int cmock_num_calls);
void xTaskIncrementTick_AddCallback(CMOCK_xTaskIncrementTick_CALLBACK Callback);
void xTaskIncrementTick_Stub(CMOCK_xTaskIncrementTick_CALLBACK Callback);
#define xTaskIncrementTick_StubWithCallback xTaskIncrementTick_Stub
#define vTaskPlaceOnEventList_Ignore() vTaskPlaceOnEventList_CMockIgnore()
void vTaskPlaceOnEventList_CMockIgnore(void);
#define vTaskPlaceOnEventList_StopIgnore() vTaskPlaceOnEventList_CMockStopIgnore()
void vTaskPlaceOnEventList_CMockStopIgnore(void);
#define vTaskPlaceOnEventList_ExpectAnyArgs() vTaskPlaceOnEventList_CMockExpectAnyArgs(__LINE__)
void vTaskPlaceOnEventList_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnEventList_Expect(pxEventList, xTicksToWait) vTaskPlaceOnEventList_CMockExpect(__LINE__, pxEventList, xTicksToWait)
void vTaskPlaceOnEventList_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* const pxEventList, const TickType_t xTicksToWait);
typedef void (* CMOCK_vTaskPlaceOnEventList_CALLBACK)(List_t* const pxEventList, const TickType_t xTicksToWait, int cmock_num_calls);
void vTaskPlaceOnEventList_AddCallback(CMOCK_vTaskPlaceOnEventList_CALLBACK Callback);
void vTaskPlaceOnEventList_Stub(CMOCK_vTaskPlaceOnEventList_CALLBACK Callback);
#define vTaskPlaceOnEventList_StubWithCallback vTaskPlaceOnEventList_Stub
#define vTaskPlaceOnEventList_ExpectWithArray(pxEventList, pxEventList_Depth, xTicksToWait) vTaskPlaceOnEventList_CMockExpectWithArray(__LINE__, pxEventList, pxEventList_Depth, xTicksToWait)
void vTaskPlaceOnEventList_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* const pxEventList, int pxEventList_Depth, const TickType_t xTicksToWait);
#define vTaskPlaceOnEventList_ReturnThruPtr_pxEventList(pxEventList) vTaskPlaceOnEventList_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, sizeof(List_t))
#define vTaskPlaceOnEventList_ReturnArrayThruPtr_pxEventList(pxEventList, cmock_len) vTaskPlaceOnEventList_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, (int)(cmock_len * (int)sizeof(*pxEventList)))
#define vTaskPlaceOnEventList_ReturnMemThruPtr_pxEventList(pxEventList, cmock_size) vTaskPlaceOnEventList_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, cmock_size)
void vTaskPlaceOnEventList_CMockReturnMemThruPtr_pxEventList(UNITY_LINE_TYPE cmock_line, List_t* pxEventList, int cmock_size);
#define vTaskPlaceOnEventList_IgnoreArg_pxEventList() vTaskPlaceOnEventList_CMockIgnoreArg_pxEventList(__LINE__)
void vTaskPlaceOnEventList_CMockIgnoreArg_pxEventList(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnEventList_IgnoreArg_xTicksToWait() vTaskPlaceOnEventList_CMockIgnoreArg_xTicksToWait(__LINE__)
void vTaskPlaceOnEventList_CMockIgnoreArg_xTicksToWait(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnUnorderedEventList_Ignore() vTaskPlaceOnUnorderedEventList_CMockIgnore()
void vTaskPlaceOnUnorderedEventList_CMockIgnore(void);
#define vTaskPlaceOnUnorderedEventList_StopIgnore() vTaskPlaceOnUnorderedEventList_CMockStopIgnore()
void vTaskPlaceOnUnorderedEventList_CMockStopIgnore(void);
#define vTaskPlaceOnUnorderedEventList_ExpectAnyArgs() vTaskPlaceOnUnorderedEventList_CMockExpectAnyArgs(__LINE__)
void vTaskPlaceOnUnorderedEventList_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnUnorderedEventList_Expect(pxEventList, xItemValue, xTicksToWait) vTaskPlaceOnUnorderedEventList_CMockExpect(__LINE__, pxEventList, xItemValue, xTicksToWait)
void vTaskPlaceOnUnorderedEventList_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait);
typedef void (* CMOCK_vTaskPlaceOnUnorderedEventList_CALLBACK)(List_t* pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait, int cmock_num_calls);
void vTaskPlaceOnUnorderedEventList_AddCallback(CMOCK_vTaskPlaceOnUnorderedEventList_CALLBACK Callback);
void vTaskPlaceOnUnorderedEventList_Stub(CMOCK_vTaskPlaceOnUnorderedEventList_CALLBACK Callback);
#define vTaskPlaceOnUnorderedEventList_StubWithCallback vTaskPlaceOnUnorderedEventList_Stub
#define vTaskPlaceOnUnorderedEventList_ExpectWithArray(pxEventList, pxEventList_Depth, xItemValue, xTicksToWait) vTaskPlaceOnUnorderedEventList_CMockExpectWithArray(__LINE__, pxEventList, pxEventList_Depth, xItemValue, xTicksToWait)
void vTaskPlaceOnUnorderedEventList_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* pxEventList, int pxEventList_Depth, const TickType_t xItemValue, const TickType_t xTicksToWait);
#define vTaskPlaceOnUnorderedEventList_ReturnThruPtr_pxEventList(pxEventList) vTaskPlaceOnUnorderedEventList_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, sizeof(List_t))
#define vTaskPlaceOnUnorderedEventList_ReturnArrayThruPtr_pxEventList(pxEventList, cmock_len) vTaskPlaceOnUnorderedEventList_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, (int)(cmock_len * (int)sizeof(*pxEventList)))
#define vTaskPlaceOnUnorderedEventList_ReturnMemThruPtr_pxEventList(pxEventList, cmock_size) vTaskPlaceOnUnorderedEventList_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, cmock_size)
void vTaskPlaceOnUnorderedEventList_CMockReturnMemThruPtr_pxEventList(UNITY_LINE_TYPE cmock_line, List_t* pxEventList, int cmock_size);
#define vTaskPlaceOnUnorderedEventList_IgnoreArg_pxEventList() vTaskPlaceOnUnorderedEventList_CMockIgnoreArg_pxEventList(__LINE__)
void vTaskPlaceOnUnorderedEventList_CMockIgnoreArg_pxEventList(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnUnorderedEventList_IgnoreArg_xItemValue() vTaskPlaceOnUnorderedEventList_CMockIgnoreArg_xItemValue(__LINE__)
void vTaskPlaceOnUnorderedEventList_CMockIgnoreArg_xItemValue(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnUnorderedEventList_IgnoreArg_xTicksToWait() vTaskPlaceOnUnorderedEventList_CMockIgnoreArg_xTicksToWait(__LINE__)
void vTaskPlaceOnUnorderedEventList_CMockIgnoreArg_xTicksToWait(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnEventListRestricted_Ignore() vTaskPlaceOnEventListRestricted_CMockIgnore()
void vTaskPlaceOnEventListRestricted_CMockIgnore(void);
#define vTaskPlaceOnEventListRestricted_StopIgnore() vTaskPlaceOnEventListRestricted_CMockStopIgnore()
void vTaskPlaceOnEventListRestricted_CMockStopIgnore(void);
#define vTaskPlaceOnEventListRestricted_ExpectAnyArgs() vTaskPlaceOnEventListRestricted_CMockExpectAnyArgs(__LINE__)
void vTaskPlaceOnEventListRestricted_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnEventListRestricted_Expect(pxEventList, xTicksToWait, xWaitIndefinitely) vTaskPlaceOnEventListRestricted_CMockExpect(__LINE__, pxEventList, xTicksToWait, xWaitIndefinitely)
void vTaskPlaceOnEventListRestricted_CMockExpect(UNITY_LINE_TYPE cmock_line, List_t* const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely);
typedef void (* CMOCK_vTaskPlaceOnEventListRestricted_CALLBACK)(List_t* const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely, int cmock_num_calls);
void vTaskPlaceOnEventListRestricted_AddCallback(CMOCK_vTaskPlaceOnEventListRestricted_CALLBACK Callback);
void vTaskPlaceOnEventListRestricted_Stub(CMOCK_vTaskPlaceOnEventListRestricted_CALLBACK Callback);
#define vTaskPlaceOnEventListRestricted_StubWithCallback vTaskPlaceOnEventListRestricted_Stub
#define vTaskPlaceOnEventListRestricted_ExpectWithArray(pxEventList, pxEventList_Depth, xTicksToWait, xWaitIndefinitely) vTaskPlaceOnEventListRestricted_CMockExpectWithArray(__LINE__, pxEventList, pxEventList_Depth, xTicksToWait, xWaitIndefinitely)
void vTaskPlaceOnEventListRestricted_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, List_t* const pxEventList, int pxEventList_Depth, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely);
#define vTaskPlaceOnEventListRestricted_ReturnThruPtr_pxEventList(pxEventList) vTaskPlaceOnEventListRestricted_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, sizeof(List_t))
#define vTaskPlaceOnEventListRestricted_ReturnArrayThruPtr_pxEventList(pxEventList, cmock_len) vTaskPlaceOnEventListRestricted_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, (int)(cmock_len * (int)sizeof(*pxEventList)))
#define vTaskPlaceOnEventListRestricted_ReturnMemThruPtr_pxEventList(pxEventList, cmock_size) vTaskPlaceOnEventListRestricted_CMockReturnMemThruPtr_pxEventList(__LINE__, pxEventList, cmock_size)
void vTaskPlaceOnEventListRestricted_CMockReturnMemThruPtr_pxEventList(UNITY_LINE_TYPE cmock_line, List_t* pxEventList, int cmock_size);
#define vTaskPlaceOnEventListRestricted_IgnoreArg_pxEventList() vTaskPlaceOnEventListRestricted_CMockIgnoreArg_pxEventList(__LINE__)
void vTaskPlaceOnEventListRestricted_CMockIgnoreArg_pxEventList(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnEventListRestricted_IgnoreArg_xTicksToWait() vTaskPlaceOnEventListRestricted_CMockIgnoreArg_xTicksToWait(__LINE__)
void vTaskPlaceOnEventListRestricted_CMockIgnoreArg_xTicksToWait(UNITY_LINE_TYPE cmock_line);
#define vTaskPlaceOnEventListRestricted_IgnoreArg_xWaitIndefinitely() vTaskPlaceOnEventListRestricted_CMockIgnoreArg_xWaitIndefinitely(__LINE__)
void vTaskPlaceOnEventListRestricted_CMockIgnoreArg_xWaitIndefinitely(UNITY_LINE_TYPE cmock_line);
#define xTaskRemoveFromEventList_IgnoreAndReturn(cmock_retval) xTaskRemoveFromEventList_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskRemoveFromEventList_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskRemoveFromEventList_StopIgnore() xTaskRemoveFromEventList_CMockStopIgnore()
void xTaskRemoveFromEventList_CMockStopIgnore(void);
#define xTaskRemoveFromEventList_ExpectAnyArgsAndReturn(cmock_retval) xTaskRemoveFromEventList_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskRemoveFromEventList_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskRemoveFromEventList_ExpectAndReturn(pxEventList, cmock_retval) xTaskRemoveFromEventList_CMockExpectAndReturn(__LINE__, pxEventList, cmock_retval)
void xTaskRemoveFromEventList_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const List_t* const pxEventList, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskRemoveFromEventList_CALLBACK)(const List_t* const pxEventList, int cmock_num_calls);
void xTaskRemoveFromEventList_AddCallback(CMOCK_xTaskRemoveFromEventList_CALLBACK Callback);
void xTaskRemoveFromEventList_Stub(CMOCK_xTaskRemoveFromEventList_CALLBACK Callback);
#define xTaskRemoveFromEventList_StubWithCallback xTaskRemoveFromEventList_Stub
#define xTaskRemoveFromEventList_ExpectWithArrayAndReturn(pxEventList, pxEventList_Depth, cmock_retval) xTaskRemoveFromEventList_CMockExpectWithArrayAndReturn(__LINE__, pxEventList, pxEventList_Depth, cmock_retval)
void xTaskRemoveFromEventList_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const List_t* const pxEventList, int pxEventList_Depth, BaseType_t cmock_to_return);
#define xTaskRemoveFromEventList_IgnoreArg_pxEventList() xTaskRemoveFromEventList_CMockIgnoreArg_pxEventList(__LINE__)
void xTaskRemoveFromEventList_CMockIgnoreArg_pxEventList(UNITY_LINE_TYPE cmock_line);
#define vTaskRemoveFromUnorderedEventList_Ignore() vTaskRemoveFromUnorderedEventList_CMockIgnore()
void vTaskRemoveFromUnorderedEventList_CMockIgnore(void);
#define vTaskRemoveFromUnorderedEventList_StopIgnore() vTaskRemoveFromUnorderedEventList_CMockStopIgnore()
void vTaskRemoveFromUnorderedEventList_CMockStopIgnore(void);
#define vTaskRemoveFromUnorderedEventList_ExpectAnyArgs() vTaskRemoveFromUnorderedEventList_CMockExpectAnyArgs(__LINE__)
void vTaskRemoveFromUnorderedEventList_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskRemoveFromUnorderedEventList_Expect(pxEventListItem, xItemValue) vTaskRemoveFromUnorderedEventList_CMockExpect(__LINE__, pxEventListItem, xItemValue)
void vTaskRemoveFromUnorderedEventList_CMockExpect(UNITY_LINE_TYPE cmock_line, ListItem_t* pxEventListItem, const TickType_t xItemValue);
typedef void (* CMOCK_vTaskRemoveFromUnorderedEventList_CALLBACK)(ListItem_t* pxEventListItem, const TickType_t xItemValue, int cmock_num_calls);
void vTaskRemoveFromUnorderedEventList_AddCallback(CMOCK_vTaskRemoveFromUnorderedEventList_CALLBACK Callback);
void vTaskRemoveFromUnorderedEventList_Stub(CMOCK_vTaskRemoveFromUnorderedEventList_CALLBACK Callback);
#define vTaskRemoveFromUnorderedEventList_StubWithCallback vTaskRemoveFromUnorderedEventList_Stub
#define vTaskRemoveFromUnorderedEventList_ExpectWithArray(pxEventListItem, pxEventListItem_Depth, xItemValue) vTaskRemoveFromUnorderedEventList_CMockExpectWithArray(__LINE__, pxEventListItem, pxEventListItem_Depth, xItemValue)
void vTaskRemoveFromUnorderedEventList_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, ListItem_t* pxEventListItem, int pxEventListItem_Depth, const TickType_t xItemValue);
#define vTaskRemoveFromUnorderedEventList_ReturnThruPtr_pxEventListItem(pxEventListItem) vTaskRemoveFromUnorderedEventList_CMockReturnMemThruPtr_pxEventListItem(__LINE__, pxEventListItem, sizeof(ListItem_t))
#define vTaskRemoveFromUnorderedEventList_ReturnArrayThruPtr_pxEventListItem(pxEventListItem, cmock_len) vTaskRemoveFromUnorderedEventList_CMockReturnMemThruPtr_pxEventListItem(__LINE__, pxEventListItem, (int)(cmock_len * (int)sizeof(*pxEventListItem)))
#define vTaskRemoveFromUnorderedEventList_ReturnMemThruPtr_pxEventListItem(pxEventListItem, cmock_size) vTaskRemoveFromUnorderedEventList_CMockReturnMemThruPtr_pxEventListItem(__LINE__, pxEventListItem, cmock_size)
void vTaskRemoveFromUnorderedEventList_CMockReturnMemThruPtr_pxEventListItem(UNITY_LINE_TYPE cmock_line, ListItem_t* pxEventListItem, int cmock_size);
#define vTaskRemoveFromUnorderedEventList_IgnoreArg_pxEventListItem() vTaskRemoveFromUnorderedEventList_CMockIgnoreArg_pxEventListItem(__LINE__)
void vTaskRemoveFromUnorderedEventList_CMockIgnoreArg_pxEventListItem(UNITY_LINE_TYPE cmock_line);
#define vTaskRemoveFromUnorderedEventList_IgnoreArg_xItemValue() vTaskRemoveFromUnorderedEventList_CMockIgnoreArg_xItemValue(__LINE__)
void vTaskRemoveFromUnorderedEventList_CMockIgnoreArg_xItemValue(UNITY_LINE_TYPE cmock_line);
#define vTaskSwitchContext_Ignore() vTaskSwitchContext_CMockIgnore()
void vTaskSwitchContext_CMockIgnore(void);
#define vTaskSwitchContext_StopIgnore() vTaskSwitchContext_CMockStopIgnore()
void vTaskSwitchContext_CMockStopIgnore(void);
#define vTaskSwitchContext_Expect() vTaskSwitchContext_CMockExpect(__LINE__)
void vTaskSwitchContext_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vTaskSwitchContext_CALLBACK)(int cmock_num_calls);
void vTaskSwitchContext_AddCallback(CMOCK_vTaskSwitchContext_CALLBACK Callback);
void vTaskSwitchContext_Stub(CMOCK_vTaskSwitchContext_CALLBACK Callback);
#define vTaskSwitchContext_StubWithCallback vTaskSwitchContext_Stub
#define uxTaskResetEventItemValue_IgnoreAndReturn(cmock_retval) uxTaskResetEventItemValue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTaskResetEventItemValue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define uxTaskResetEventItemValue_StopIgnore() uxTaskResetEventItemValue_CMockStopIgnore()
void uxTaskResetEventItemValue_CMockStopIgnore(void);
#define uxTaskResetEventItemValue_ExpectAndReturn(cmock_retval) uxTaskResetEventItemValue_CMockExpectAndReturn(__LINE__, cmock_retval)
void uxTaskResetEventItemValue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_uxTaskResetEventItemValue_CALLBACK)(int cmock_num_calls);
void uxTaskResetEventItemValue_AddCallback(CMOCK_uxTaskResetEventItemValue_CALLBACK Callback);
void uxTaskResetEventItemValue_Stub(CMOCK_uxTaskResetEventItemValue_CALLBACK Callback);
#define uxTaskResetEventItemValue_StubWithCallback uxTaskResetEventItemValue_Stub
#define xTaskGetCurrentTaskHandle_IgnoreAndReturn(cmock_retval) xTaskGetCurrentTaskHandle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGetCurrentTaskHandle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define xTaskGetCurrentTaskHandle_StopIgnore() xTaskGetCurrentTaskHandle_CMockStopIgnore()
void xTaskGetCurrentTaskHandle_CMockStopIgnore(void);
#define xTaskGetCurrentTaskHandle_ExpectAndReturn(cmock_retval) xTaskGetCurrentTaskHandle_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTaskGetCurrentTaskHandle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
typedef TaskHandle_t (* CMOCK_xTaskGetCurrentTaskHandle_CALLBACK)(int cmock_num_calls);
void xTaskGetCurrentTaskHandle_AddCallback(CMOCK_xTaskGetCurrentTaskHandle_CALLBACK Callback);
void xTaskGetCurrentTaskHandle_Stub(CMOCK_xTaskGetCurrentTaskHandle_CALLBACK Callback);
#define xTaskGetCurrentTaskHandle_StubWithCallback xTaskGetCurrentTaskHandle_Stub
#define vTaskMissedYield_Ignore() vTaskMissedYield_CMockIgnore()
void vTaskMissedYield_CMockIgnore(void);
#define vTaskMissedYield_StopIgnore() vTaskMissedYield_CMockStopIgnore()
void vTaskMissedYield_CMockStopIgnore(void);
#define vTaskMissedYield_Expect() vTaskMissedYield_CMockExpect(__LINE__)
void vTaskMissedYield_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vTaskMissedYield_CALLBACK)(int cmock_num_calls);
void vTaskMissedYield_AddCallback(CMOCK_vTaskMissedYield_CALLBACK Callback);
void vTaskMissedYield_Stub(CMOCK_vTaskMissedYield_CALLBACK Callback);
#define vTaskMissedYield_StubWithCallback vTaskMissedYield_Stub
#define xTaskGetSchedulerState_IgnoreAndReturn(cmock_retval) xTaskGetSchedulerState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskGetSchedulerState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskGetSchedulerState_StopIgnore() xTaskGetSchedulerState_CMockStopIgnore()
void xTaskGetSchedulerState_CMockStopIgnore(void);
#define xTaskGetSchedulerState_ExpectAndReturn(cmock_retval) xTaskGetSchedulerState_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTaskGetSchedulerState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskGetSchedulerState_CALLBACK)(int cmock_num_calls);
void xTaskGetSchedulerState_AddCallback(CMOCK_xTaskGetSchedulerState_CALLBACK Callback);
void xTaskGetSchedulerState_Stub(CMOCK_xTaskGetSchedulerState_CALLBACK Callback);
#define xTaskGetSchedulerState_StubWithCallback xTaskGetSchedulerState_Stub
#define xTaskPriorityInherit_IgnoreAndReturn(cmock_retval) xTaskPriorityInherit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskPriorityInherit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskPriorityInherit_StopIgnore() xTaskPriorityInherit_CMockStopIgnore()
void xTaskPriorityInherit_CMockStopIgnore(void);
#define xTaskPriorityInherit_ExpectAnyArgsAndReturn(cmock_retval) xTaskPriorityInherit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskPriorityInherit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskPriorityInherit_ExpectAndReturn(pxMutexHolder, cmock_retval) xTaskPriorityInherit_CMockExpectAndReturn(__LINE__, pxMutexHolder, cmock_retval)
void xTaskPriorityInherit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t const pxMutexHolder, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskPriorityInherit_CALLBACK)(TaskHandle_t const pxMutexHolder, int cmock_num_calls);
void xTaskPriorityInherit_AddCallback(CMOCK_xTaskPriorityInherit_CALLBACK Callback);
void xTaskPriorityInherit_Stub(CMOCK_xTaskPriorityInherit_CALLBACK Callback);
#define xTaskPriorityInherit_StubWithCallback xTaskPriorityInherit_Stub
#define xTaskPriorityInherit_IgnoreArg_pxMutexHolder() xTaskPriorityInherit_CMockIgnoreArg_pxMutexHolder(__LINE__)
void xTaskPriorityInherit_CMockIgnoreArg_pxMutexHolder(UNITY_LINE_TYPE cmock_line);
#define xTaskPriorityDisinherit_IgnoreAndReturn(cmock_retval) xTaskPriorityDisinherit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskPriorityDisinherit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskPriorityDisinherit_StopIgnore() xTaskPriorityDisinherit_CMockStopIgnore()
void xTaskPriorityDisinherit_CMockStopIgnore(void);
#define xTaskPriorityDisinherit_ExpectAnyArgsAndReturn(cmock_retval) xTaskPriorityDisinherit_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskPriorityDisinherit_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskPriorityDisinherit_ExpectAndReturn(pxMutexHolder, cmock_retval) xTaskPriorityDisinherit_CMockExpectAndReturn(__LINE__, pxMutexHolder, cmock_retval)
void xTaskPriorityDisinherit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t const pxMutexHolder, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskPriorityDisinherit_CALLBACK)(TaskHandle_t const pxMutexHolder, int cmock_num_calls);
void xTaskPriorityDisinherit_AddCallback(CMOCK_xTaskPriorityDisinherit_CALLBACK Callback);
void xTaskPriorityDisinherit_Stub(CMOCK_xTaskPriorityDisinherit_CALLBACK Callback);
#define xTaskPriorityDisinherit_StubWithCallback xTaskPriorityDisinherit_Stub
#define xTaskPriorityDisinherit_IgnoreArg_pxMutexHolder() xTaskPriorityDisinherit_CMockIgnoreArg_pxMutexHolder(__LINE__)
void xTaskPriorityDisinherit_CMockIgnoreArg_pxMutexHolder(UNITY_LINE_TYPE cmock_line);
#define vTaskPriorityDisinheritAfterTimeout_Ignore() vTaskPriorityDisinheritAfterTimeout_CMockIgnore()
void vTaskPriorityDisinheritAfterTimeout_CMockIgnore(void);
#define vTaskPriorityDisinheritAfterTimeout_StopIgnore() vTaskPriorityDisinheritAfterTimeout_CMockStopIgnore()
void vTaskPriorityDisinheritAfterTimeout_CMockStopIgnore(void);
#define vTaskPriorityDisinheritAfterTimeout_ExpectAnyArgs() vTaskPriorityDisinheritAfterTimeout_CMockExpectAnyArgs(__LINE__)
void vTaskPriorityDisinheritAfterTimeout_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskPriorityDisinheritAfterTimeout_Expect(pxMutexHolder, uxHighestPriorityWaitingTask) vTaskPriorityDisinheritAfterTimeout_CMockExpect(__LINE__, pxMutexHolder, uxHighestPriorityWaitingTask)
void vTaskPriorityDisinheritAfterTimeout_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask);
typedef void (* CMOCK_vTaskPriorityDisinheritAfterTimeout_CALLBACK)(TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask, int cmock_num_calls);
void vTaskPriorityDisinheritAfterTimeout_AddCallback(CMOCK_vTaskPriorityDisinheritAfterTimeout_CALLBACK Callback);
void vTaskPriorityDisinheritAfterTimeout_Stub(CMOCK_vTaskPriorityDisinheritAfterTimeout_CALLBACK Callback);
#define vTaskPriorityDisinheritAfterTimeout_StubWithCallback vTaskPriorityDisinheritAfterTimeout_Stub
#define vTaskPriorityDisinheritAfterTimeout_IgnoreArg_pxMutexHolder() vTaskPriorityDisinheritAfterTimeout_CMockIgnoreArg_pxMutexHolder(__LINE__)
void vTaskPriorityDisinheritAfterTimeout_CMockIgnoreArg_pxMutexHolder(UNITY_LINE_TYPE cmock_line);
#define vTaskPriorityDisinheritAfterTimeout_IgnoreArg_uxHighestPriorityWaitingTask() vTaskPriorityDisinheritAfterTimeout_CMockIgnoreArg_uxHighestPriorityWaitingTask(__LINE__)
void vTaskPriorityDisinheritAfterTimeout_CMockIgnoreArg_uxHighestPriorityWaitingTask(UNITY_LINE_TYPE cmock_line);
#define uxTaskGetTaskNumber_IgnoreAndReturn(cmock_retval) uxTaskGetTaskNumber_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTaskGetTaskNumber_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskGetTaskNumber_StopIgnore() uxTaskGetTaskNumber_CMockStopIgnore()
void uxTaskGetTaskNumber_CMockStopIgnore(void);
#define uxTaskGetTaskNumber_ExpectAnyArgsAndReturn(cmock_retval) uxTaskGetTaskNumber_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uxTaskGetTaskNumber_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTaskGetTaskNumber_ExpectAndReturn(xTask, cmock_retval) uxTaskGetTaskNumber_CMockExpectAndReturn(__LINE__, xTask, cmock_retval)
void uxTaskGetTaskNumber_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxTaskGetTaskNumber_CALLBACK)(TaskHandle_t xTask, int cmock_num_calls);
void uxTaskGetTaskNumber_AddCallback(CMOCK_uxTaskGetTaskNumber_CALLBACK Callback);
void uxTaskGetTaskNumber_Stub(CMOCK_uxTaskGetTaskNumber_CALLBACK Callback);
#define uxTaskGetTaskNumber_StubWithCallback uxTaskGetTaskNumber_Stub
#define uxTaskGetTaskNumber_IgnoreArg_xTask() uxTaskGetTaskNumber_CMockIgnoreArg_xTask(__LINE__)
void uxTaskGetTaskNumber_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskSetTaskNumber_Ignore() vTaskSetTaskNumber_CMockIgnore()
void vTaskSetTaskNumber_CMockIgnore(void);
#define vTaskSetTaskNumber_StopIgnore() vTaskSetTaskNumber_CMockStopIgnore()
void vTaskSetTaskNumber_CMockStopIgnore(void);
#define vTaskSetTaskNumber_ExpectAnyArgs() vTaskSetTaskNumber_CMockExpectAnyArgs(__LINE__)
void vTaskSetTaskNumber_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskSetTaskNumber_Expect(xTask, uxHandle) vTaskSetTaskNumber_CMockExpect(__LINE__, xTask, uxHandle)
void vTaskSetTaskNumber_CMockExpect(UNITY_LINE_TYPE cmock_line, TaskHandle_t xTask, const UBaseType_t uxHandle);
typedef void (* CMOCK_vTaskSetTaskNumber_CALLBACK)(TaskHandle_t xTask, const UBaseType_t uxHandle, int cmock_num_calls);
void vTaskSetTaskNumber_AddCallback(CMOCK_vTaskSetTaskNumber_CALLBACK Callback);
void vTaskSetTaskNumber_Stub(CMOCK_vTaskSetTaskNumber_CALLBACK Callback);
#define vTaskSetTaskNumber_StubWithCallback vTaskSetTaskNumber_Stub
#define vTaskSetTaskNumber_IgnoreArg_xTask() vTaskSetTaskNumber_CMockIgnoreArg_xTask(__LINE__)
void vTaskSetTaskNumber_CMockIgnoreArg_xTask(UNITY_LINE_TYPE cmock_line);
#define vTaskSetTaskNumber_IgnoreArg_uxHandle() vTaskSetTaskNumber_CMockIgnoreArg_uxHandle(__LINE__)
void vTaskSetTaskNumber_CMockIgnoreArg_uxHandle(UNITY_LINE_TYPE cmock_line);
#define vTaskStepTick_Ignore() vTaskStepTick_CMockIgnore()
void vTaskStepTick_CMockIgnore(void);
#define vTaskStepTick_StopIgnore() vTaskStepTick_CMockStopIgnore()
void vTaskStepTick_CMockStopIgnore(void);
#define vTaskStepTick_ExpectAnyArgs() vTaskStepTick_CMockExpectAnyArgs(__LINE__)
void vTaskStepTick_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskStepTick_Expect(xTicksToJump) vTaskStepTick_CMockExpect(__LINE__, xTicksToJump)
void vTaskStepTick_CMockExpect(UNITY_LINE_TYPE cmock_line, const TickType_t xTicksToJump);
typedef void (* CMOCK_vTaskStepTick_CALLBACK)(const TickType_t xTicksToJump, int cmock_num_calls);
void vTaskStepTick_AddCallback(CMOCK_vTaskStepTick_CALLBACK Callback);
void vTaskStepTick_Stub(CMOCK_vTaskStepTick_CALLBACK Callback);
#define vTaskStepTick_StubWithCallback vTaskStepTick_Stub
#define vTaskStepTick_IgnoreArg_xTicksToJump() vTaskStepTick_CMockIgnoreArg_xTicksToJump(__LINE__)
void vTaskStepTick_CMockIgnoreArg_xTicksToJump(UNITY_LINE_TYPE cmock_line);
#define xTaskCatchUpTicks_IgnoreAndReturn(cmock_retval) xTaskCatchUpTicks_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTaskCatchUpTicks_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCatchUpTicks_StopIgnore() xTaskCatchUpTicks_CMockStopIgnore()
void xTaskCatchUpTicks_CMockStopIgnore(void);
#define xTaskCatchUpTicks_ExpectAnyArgsAndReturn(cmock_retval) xTaskCatchUpTicks_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xTaskCatchUpTicks_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTaskCatchUpTicks_ExpectAndReturn(xTicksToCatchUp, cmock_retval) xTaskCatchUpTicks_CMockExpectAndReturn(__LINE__, xTicksToCatchUp, cmock_retval)
void xTaskCatchUpTicks_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t xTicksToCatchUp, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTaskCatchUpTicks_CALLBACK)(TickType_t xTicksToCatchUp, int cmock_num_calls);
void xTaskCatchUpTicks_AddCallback(CMOCK_xTaskCatchUpTicks_CALLBACK Callback);
void xTaskCatchUpTicks_Stub(CMOCK_xTaskCatchUpTicks_CALLBACK Callback);
#define xTaskCatchUpTicks_StubWithCallback xTaskCatchUpTicks_Stub
#define xTaskCatchUpTicks_IgnoreArg_xTicksToCatchUp() xTaskCatchUpTicks_CMockIgnoreArg_xTicksToCatchUp(__LINE__)
void xTaskCatchUpTicks_CMockIgnoreArg_xTicksToCatchUp(UNITY_LINE_TYPE cmock_line);
#define eTaskConfirmSleepModeStatus_IgnoreAndReturn(cmock_retval) eTaskConfirmSleepModeStatus_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eTaskConfirmSleepModeStatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, eSleepModeStatus cmock_to_return);
#define eTaskConfirmSleepModeStatus_StopIgnore() eTaskConfirmSleepModeStatus_CMockStopIgnore()
void eTaskConfirmSleepModeStatus_CMockStopIgnore(void);
#define eTaskConfirmSleepModeStatus_ExpectAndReturn(cmock_retval) eTaskConfirmSleepModeStatus_CMockExpectAndReturn(__LINE__, cmock_retval)
void eTaskConfirmSleepModeStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, eSleepModeStatus cmock_to_return);
typedef eSleepModeStatus (* CMOCK_eTaskConfirmSleepModeStatus_CALLBACK)(int cmock_num_calls);
void eTaskConfirmSleepModeStatus_AddCallback(CMOCK_eTaskConfirmSleepModeStatus_CALLBACK Callback);
void eTaskConfirmSleepModeStatus_Stub(CMOCK_eTaskConfirmSleepModeStatus_CALLBACK Callback);
#define eTaskConfirmSleepModeStatus_StubWithCallback eTaskConfirmSleepModeStatus_Stub
#define pvTaskIncrementMutexHeldCount_IgnoreAndReturn(cmock_retval) pvTaskIncrementMutexHeldCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pvTaskIncrementMutexHeldCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define pvTaskIncrementMutexHeldCount_StopIgnore() pvTaskIncrementMutexHeldCount_CMockStopIgnore()
void pvTaskIncrementMutexHeldCount_CMockStopIgnore(void);
#define pvTaskIncrementMutexHeldCount_ExpectAndReturn(cmock_retval) pvTaskIncrementMutexHeldCount_CMockExpectAndReturn(__LINE__, cmock_retval)
void pvTaskIncrementMutexHeldCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
typedef TaskHandle_t (* CMOCK_pvTaskIncrementMutexHeldCount_CALLBACK)(int cmock_num_calls);
void pvTaskIncrementMutexHeldCount_AddCallback(CMOCK_pvTaskIncrementMutexHeldCount_CALLBACK Callback);
void pvTaskIncrementMutexHeldCount_Stub(CMOCK_pvTaskIncrementMutexHeldCount_CALLBACK Callback);
#define pvTaskIncrementMutexHeldCount_StubWithCallback pvTaskIncrementMutexHeldCount_Stub
#define vTaskInternalSetTimeOutState_Ignore() vTaskInternalSetTimeOutState_CMockIgnore()
void vTaskInternalSetTimeOutState_CMockIgnore(void);
#define vTaskInternalSetTimeOutState_StopIgnore() vTaskInternalSetTimeOutState_CMockStopIgnore()
void vTaskInternalSetTimeOutState_CMockStopIgnore(void);
#define vTaskInternalSetTimeOutState_ExpectAnyArgs() vTaskInternalSetTimeOutState_CMockExpectAnyArgs(__LINE__)
void vTaskInternalSetTimeOutState_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vTaskInternalSetTimeOutState_Expect(pxTimeOut) vTaskInternalSetTimeOutState_CMockExpect(__LINE__, pxTimeOut)
void vTaskInternalSetTimeOutState_CMockExpect(UNITY_LINE_TYPE cmock_line, TimeOut_t* const pxTimeOut);
typedef void (* CMOCK_vTaskInternalSetTimeOutState_CALLBACK)(TimeOut_t* const pxTimeOut, int cmock_num_calls);
void vTaskInternalSetTimeOutState_AddCallback(CMOCK_vTaskInternalSetTimeOutState_CALLBACK Callback);
void vTaskInternalSetTimeOutState_Stub(CMOCK_vTaskInternalSetTimeOutState_CALLBACK Callback);
#define vTaskInternalSetTimeOutState_StubWithCallback vTaskInternalSetTimeOutState_Stub
#define vTaskInternalSetTimeOutState_ExpectWithArray(pxTimeOut, pxTimeOut_Depth) vTaskInternalSetTimeOutState_CMockExpectWithArray(__LINE__, pxTimeOut, pxTimeOut_Depth)
void vTaskInternalSetTimeOutState_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TimeOut_t* const pxTimeOut, int pxTimeOut_Depth);
#define vTaskInternalSetTimeOutState_ReturnThruPtr_pxTimeOut(pxTimeOut) vTaskInternalSetTimeOutState_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, sizeof(TimeOut_t))
#define vTaskInternalSetTimeOutState_ReturnArrayThruPtr_pxTimeOut(pxTimeOut, cmock_len) vTaskInternalSetTimeOutState_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, (int)(cmock_len * (int)sizeof(*pxTimeOut)))
#define vTaskInternalSetTimeOutState_ReturnMemThruPtr_pxTimeOut(pxTimeOut, cmock_size) vTaskInternalSetTimeOutState_CMockReturnMemThruPtr_pxTimeOut(__LINE__, pxTimeOut, cmock_size)
void vTaskInternalSetTimeOutState_CMockReturnMemThruPtr_pxTimeOut(UNITY_LINE_TYPE cmock_line, TimeOut_t* pxTimeOut, int cmock_size);
#define vTaskInternalSetTimeOutState_IgnoreArg_pxTimeOut() vTaskInternalSetTimeOutState_CMockIgnoreArg_pxTimeOut(__LINE__)
void vTaskInternalSetTimeOutState_CMockIgnoreArg_pxTimeOut(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
