/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOS_SOCKETS_H
#define _MOCK_FREERTOS_SOCKETS_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include "FreeRTOS.h"
#include "task.h"
#include "list.h"
#include "queue.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOS_Sockets.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOS_Sockets_Init(void);
void mock_FreeRTOS_Sockets_Destroy(void);
void mock_FreeRTOS_Sockets_Verify(void);




#define FreeRTOS_socket_IgnoreAndReturn(cmock_retval) FreeRTOS_socket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_socket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t cmock_to_return);
#define FreeRTOS_socket_StopIgnore() FreeRTOS_socket_CMockStopIgnore()
void FreeRTOS_socket_CMockStopIgnore(void);
#define FreeRTOS_socket_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_socket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_socket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t cmock_to_return);
#define FreeRTOS_socket_ExpectAndReturn(xDomain, xType, xProtocol, cmock_retval) FreeRTOS_socket_CMockExpectAndReturn(__LINE__, xDomain, xType, xProtocol, cmock_retval)
void FreeRTOS_socket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, Socket_t cmock_to_return);
typedef Socket_t (* CMOCK_FreeRTOS_socket_CALLBACK)(BaseType_t xDomain, BaseType_t xType, BaseType_t xProtocol, int cmock_num_calls);
void FreeRTOS_socket_AddCallback(CMOCK_FreeRTOS_socket_CALLBACK Callback);
void FreeRTOS_socket_Stub(CMOCK_FreeRTOS_socket_CALLBACK Callback);
#define FreeRTOS_socket_StubWithCallback FreeRTOS_socket_Stub
#define FreeRTOS_socket_IgnoreArg_xDomain() FreeRTOS_socket_CMockIgnoreArg_xDomain(__LINE__)
void FreeRTOS_socket_CMockIgnoreArg_xDomain(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_socket_IgnoreArg_xType() FreeRTOS_socket_CMockIgnoreArg_xType(__LINE__)
void FreeRTOS_socket_CMockIgnoreArg_xType(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_socket_IgnoreArg_xProtocol() FreeRTOS_socket_CMockIgnoreArg_xProtocol(__LINE__)
void FreeRTOS_socket_CMockIgnoreArg_xProtocol(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recvfrom_IgnoreAndReturn(cmock_retval) FreeRTOS_recvfrom_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_recvfrom_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define FreeRTOS_recvfrom_StopIgnore() FreeRTOS_recvfrom_CMockStopIgnore()
void FreeRTOS_recvfrom_CMockStopIgnore(void);
#define FreeRTOS_recvfrom_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_recvfrom_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_recvfrom_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define FreeRTOS_recvfrom_ExpectAndReturn(xSocket, pvBuffer, xBufferLength, xFlags, pxSourceAddress, pxSourceAddressLength, cmock_retval) FreeRTOS_recvfrom_CMockExpectAndReturn(__LINE__, xSocket, pvBuffer, xBufferLength, xFlags, pxSourceAddress, pxSourceAddressLength, cmock_retval)
void FreeRTOS_recvfrom_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, void* pvBuffer, size_t xBufferLength, BaseType_t xFlags, struct freertos_sockaddr* pxSourceAddress, socklen_t* pxSourceAddressLength, int32_t cmock_to_return);
typedef int32_t (* CMOCK_FreeRTOS_recvfrom_CALLBACK)(Socket_t xSocket, void* pvBuffer, size_t xBufferLength, BaseType_t xFlags, struct freertos_sockaddr* pxSourceAddress, socklen_t* pxSourceAddressLength, int cmock_num_calls);
void FreeRTOS_recvfrom_AddCallback(CMOCK_FreeRTOS_recvfrom_CALLBACK Callback);
void FreeRTOS_recvfrom_Stub(CMOCK_FreeRTOS_recvfrom_CALLBACK Callback);
#define FreeRTOS_recvfrom_StubWithCallback FreeRTOS_recvfrom_Stub
#define FreeRTOS_recvfrom_ExpectWithArrayAndReturn(xSocket, pvBuffer, pvBuffer_Depth, xBufferLength, xFlags, pxSourceAddress, pxSourceAddress_Depth, pxSourceAddressLength, pxSourceAddressLength_Depth, cmock_retval) FreeRTOS_recvfrom_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pvBuffer, pvBuffer_Depth, xBufferLength, xFlags, pxSourceAddress, pxSourceAddress_Depth, pxSourceAddressLength, pxSourceAddressLength_Depth, cmock_retval)
void FreeRTOS_recvfrom_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, void* pvBuffer, int pvBuffer_Depth, size_t xBufferLength, BaseType_t xFlags, struct freertos_sockaddr* pxSourceAddress, int pxSourceAddress_Depth, socklen_t* pxSourceAddressLength, int pxSourceAddressLength_Depth, int32_t cmock_to_return);
#define FreeRTOS_recvfrom_ReturnThruPtr_pvBuffer(pvBuffer) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(void))
#define FreeRTOS_recvfrom_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define FreeRTOS_recvfrom_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void FreeRTOS_recvfrom_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define FreeRTOS_recvfrom_ReturnThruPtr_pxSourceAddress(pxSourceAddress) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pxSourceAddress(__LINE__, pxSourceAddress, sizeof(struct freertos_sockaddr))
#define FreeRTOS_recvfrom_ReturnArrayThruPtr_pxSourceAddress(pxSourceAddress, cmock_len) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pxSourceAddress(__LINE__, pxSourceAddress, (int)(cmock_len * (int)sizeof(*pxSourceAddress)))
#define FreeRTOS_recvfrom_ReturnMemThruPtr_pxSourceAddress(pxSourceAddress, cmock_size) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pxSourceAddress(__LINE__, pxSourceAddress, cmock_size)
void FreeRTOS_recvfrom_CMockReturnMemThruPtr_pxSourceAddress(UNITY_LINE_TYPE cmock_line, struct freertos_sockaddr* pxSourceAddress, int cmock_size);
#define FreeRTOS_recvfrom_ReturnThruPtr_pxSourceAddressLength(pxSourceAddressLength) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pxSourceAddressLength(__LINE__, pxSourceAddressLength, sizeof(socklen_t))
#define FreeRTOS_recvfrom_ReturnArrayThruPtr_pxSourceAddressLength(pxSourceAddressLength, cmock_len) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pxSourceAddressLength(__LINE__, pxSourceAddressLength, (int)(cmock_len * (int)sizeof(*pxSourceAddressLength)))
#define FreeRTOS_recvfrom_ReturnMemThruPtr_pxSourceAddressLength(pxSourceAddressLength, cmock_size) FreeRTOS_recvfrom_CMockReturnMemThruPtr_pxSourceAddressLength(__LINE__, pxSourceAddressLength, cmock_size)
void FreeRTOS_recvfrom_CMockReturnMemThruPtr_pxSourceAddressLength(UNITY_LINE_TYPE cmock_line, socklen_t* pxSourceAddressLength, int cmock_size);
#define FreeRTOS_recvfrom_IgnoreArg_xSocket() FreeRTOS_recvfrom_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_recvfrom_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recvfrom_IgnoreArg_pvBuffer() FreeRTOS_recvfrom_CMockIgnoreArg_pvBuffer(__LINE__)
void FreeRTOS_recvfrom_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recvfrom_IgnoreArg_xBufferLength() FreeRTOS_recvfrom_CMockIgnoreArg_xBufferLength(__LINE__)
void FreeRTOS_recvfrom_CMockIgnoreArg_xBufferLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recvfrom_IgnoreArg_xFlags() FreeRTOS_recvfrom_CMockIgnoreArg_xFlags(__LINE__)
void FreeRTOS_recvfrom_CMockIgnoreArg_xFlags(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recvfrom_IgnoreArg_pxSourceAddress() FreeRTOS_recvfrom_CMockIgnoreArg_pxSourceAddress(__LINE__)
void FreeRTOS_recvfrom_CMockIgnoreArg_pxSourceAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recvfrom_IgnoreArg_pxSourceAddressLength() FreeRTOS_recvfrom_CMockIgnoreArg_pxSourceAddressLength(__LINE__)
void FreeRTOS_recvfrom_CMockIgnoreArg_pxSourceAddressLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_sendto_IgnoreAndReturn(cmock_retval) FreeRTOS_sendto_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_sendto_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define FreeRTOS_sendto_StopIgnore() FreeRTOS_sendto_CMockStopIgnore()
void FreeRTOS_sendto_CMockStopIgnore(void);
#define FreeRTOS_sendto_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_sendto_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_sendto_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define FreeRTOS_sendto_ExpectAndReturn(xSocket, pvBuffer, xTotalDataLength, xFlags, pxDestinationAddress, xDestinationAddressLength, cmock_retval) FreeRTOS_sendto_CMockExpectAndReturn(__LINE__, xSocket, pvBuffer, xTotalDataLength, xFlags, pxDestinationAddress, xDestinationAddressLength, cmock_retval)
void FreeRTOS_sendto_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, const void* pvBuffer, size_t xTotalDataLength, BaseType_t xFlags, const struct freertos_sockaddr* pxDestinationAddress, socklen_t xDestinationAddressLength, int32_t cmock_to_return);
typedef int32_t (* CMOCK_FreeRTOS_sendto_CALLBACK)(Socket_t xSocket, const void* pvBuffer, size_t xTotalDataLength, BaseType_t xFlags, const struct freertos_sockaddr* pxDestinationAddress, socklen_t xDestinationAddressLength, int cmock_num_calls);
void FreeRTOS_sendto_AddCallback(CMOCK_FreeRTOS_sendto_CALLBACK Callback);
void FreeRTOS_sendto_Stub(CMOCK_FreeRTOS_sendto_CALLBACK Callback);
#define FreeRTOS_sendto_StubWithCallback FreeRTOS_sendto_Stub
#define FreeRTOS_sendto_ExpectWithArrayAndReturn(xSocket, pvBuffer, pvBuffer_Depth, xTotalDataLength, xFlags, pxDestinationAddress, pxDestinationAddress_Depth, xDestinationAddressLength, cmock_retval) FreeRTOS_sendto_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pvBuffer, pvBuffer_Depth, xTotalDataLength, xFlags, pxDestinationAddress, pxDestinationAddress_Depth, xDestinationAddressLength, cmock_retval)
void FreeRTOS_sendto_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, const void* pvBuffer, int pvBuffer_Depth, size_t xTotalDataLength, BaseType_t xFlags, const struct freertos_sockaddr* pxDestinationAddress, int pxDestinationAddress_Depth, socklen_t xDestinationAddressLength, int32_t cmock_to_return);
#define FreeRTOS_sendto_IgnoreArg_xSocket() FreeRTOS_sendto_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_sendto_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_sendto_IgnoreArg_pvBuffer() FreeRTOS_sendto_CMockIgnoreArg_pvBuffer(__LINE__)
void FreeRTOS_sendto_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_sendto_IgnoreArg_xTotalDataLength() FreeRTOS_sendto_CMockIgnoreArg_xTotalDataLength(__LINE__)
void FreeRTOS_sendto_CMockIgnoreArg_xTotalDataLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_sendto_IgnoreArg_xFlags() FreeRTOS_sendto_CMockIgnoreArg_xFlags(__LINE__)
void FreeRTOS_sendto_CMockIgnoreArg_xFlags(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_sendto_IgnoreArg_pxDestinationAddress() FreeRTOS_sendto_CMockIgnoreArg_pxDestinationAddress(__LINE__)
void FreeRTOS_sendto_CMockIgnoreArg_pxDestinationAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_sendto_IgnoreArg_xDestinationAddressLength() FreeRTOS_sendto_CMockIgnoreArg_xDestinationAddressLength(__LINE__)
void FreeRTOS_sendto_CMockIgnoreArg_xDestinationAddressLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_bind_IgnoreAndReturn(cmock_retval) FreeRTOS_bind_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_bind_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_bind_StopIgnore() FreeRTOS_bind_CMockStopIgnore()
void FreeRTOS_bind_CMockStopIgnore(void);
#define FreeRTOS_bind_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_bind_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_bind_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_bind_ExpectAndReturn(xSocket, pxAddress, xAddressLength, cmock_retval) FreeRTOS_bind_CMockExpectAndReturn(__LINE__, xSocket, pxAddress, xAddressLength, cmock_retval)
void FreeRTOS_bind_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, struct freertos_sockaddr* pxAddress, socklen_t xAddressLength, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_bind_CALLBACK)(Socket_t xSocket, struct freertos_sockaddr* pxAddress, socklen_t xAddressLength, int cmock_num_calls);
void FreeRTOS_bind_AddCallback(CMOCK_FreeRTOS_bind_CALLBACK Callback);
void FreeRTOS_bind_Stub(CMOCK_FreeRTOS_bind_CALLBACK Callback);
#define FreeRTOS_bind_StubWithCallback FreeRTOS_bind_Stub
#define FreeRTOS_bind_ExpectWithArrayAndReturn(xSocket, pxAddress, pxAddress_Depth, xAddressLength, cmock_retval) FreeRTOS_bind_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pxAddress, pxAddress_Depth, xAddressLength, cmock_retval)
void FreeRTOS_bind_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, struct freertos_sockaddr* pxAddress, int pxAddress_Depth, socklen_t xAddressLength, BaseType_t cmock_to_return);
#define FreeRTOS_bind_ReturnThruPtr_pxAddress(pxAddress) FreeRTOS_bind_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, sizeof(struct freertos_sockaddr))
#define FreeRTOS_bind_ReturnArrayThruPtr_pxAddress(pxAddress, cmock_len) FreeRTOS_bind_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, (int)(cmock_len * (int)sizeof(*pxAddress)))
#define FreeRTOS_bind_ReturnMemThruPtr_pxAddress(pxAddress, cmock_size) FreeRTOS_bind_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, cmock_size)
void FreeRTOS_bind_CMockReturnMemThruPtr_pxAddress(UNITY_LINE_TYPE cmock_line, struct freertos_sockaddr* pxAddress, int cmock_size);
#define FreeRTOS_bind_IgnoreArg_xSocket() FreeRTOS_bind_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_bind_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_bind_IgnoreArg_pxAddress() FreeRTOS_bind_CMockIgnoreArg_pxAddress(__LINE__)
void FreeRTOS_bind_CMockIgnoreArg_pxAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_bind_IgnoreArg_xAddressLength() FreeRTOS_bind_CMockIgnoreArg_xAddressLength(__LINE__)
void FreeRTOS_bind_CMockIgnoreArg_xAddressLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetLocalAddress_IgnoreAndReturn(cmock_retval) FreeRTOS_GetLocalAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetLocalAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define FreeRTOS_GetLocalAddress_StopIgnore() FreeRTOS_GetLocalAddress_CMockStopIgnore()
void FreeRTOS_GetLocalAddress_CMockStopIgnore(void);
#define FreeRTOS_GetLocalAddress_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_GetLocalAddress_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetLocalAddress_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define FreeRTOS_GetLocalAddress_ExpectAndReturn(xSocket, pxAddress, cmock_retval) FreeRTOS_GetLocalAddress_CMockExpectAndReturn(__LINE__, xSocket, pxAddress, cmock_retval)
void FreeRTOS_GetLocalAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, struct freertos_sockaddr* pxAddress, size_t cmock_to_return);
typedef size_t (* CMOCK_FreeRTOS_GetLocalAddress_CALLBACK)(Socket_t xSocket, struct freertos_sockaddr* pxAddress, int cmock_num_calls);
void FreeRTOS_GetLocalAddress_AddCallback(CMOCK_FreeRTOS_GetLocalAddress_CALLBACK Callback);
void FreeRTOS_GetLocalAddress_Stub(CMOCK_FreeRTOS_GetLocalAddress_CALLBACK Callback);
#define FreeRTOS_GetLocalAddress_StubWithCallback FreeRTOS_GetLocalAddress_Stub
#define FreeRTOS_GetLocalAddress_ExpectWithArrayAndReturn(xSocket, pxAddress, pxAddress_Depth, cmock_retval) FreeRTOS_GetLocalAddress_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pxAddress, pxAddress_Depth, cmock_retval)
void FreeRTOS_GetLocalAddress_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, struct freertos_sockaddr* pxAddress, int pxAddress_Depth, size_t cmock_to_return);
#define FreeRTOS_GetLocalAddress_ReturnThruPtr_pxAddress(pxAddress) FreeRTOS_GetLocalAddress_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, sizeof(struct freertos_sockaddr))
#define FreeRTOS_GetLocalAddress_ReturnArrayThruPtr_pxAddress(pxAddress, cmock_len) FreeRTOS_GetLocalAddress_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, (int)(cmock_len * (int)sizeof(*pxAddress)))
#define FreeRTOS_GetLocalAddress_ReturnMemThruPtr_pxAddress(pxAddress, cmock_size) FreeRTOS_GetLocalAddress_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, cmock_size)
void FreeRTOS_GetLocalAddress_CMockReturnMemThruPtr_pxAddress(UNITY_LINE_TYPE cmock_line, struct freertos_sockaddr* pxAddress, int cmock_size);
#define FreeRTOS_GetLocalAddress_IgnoreArg_xSocket() FreeRTOS_GetLocalAddress_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_GetLocalAddress_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetLocalAddress_IgnoreArg_pxAddress() FreeRTOS_GetLocalAddress_CMockIgnoreArg_pxAddress(__LINE__)
void FreeRTOS_GetLocalAddress_CMockIgnoreArg_pxAddress(UNITY_LINE_TYPE cmock_line);
#define xPortHasUDPSocket_IgnoreAndReturn(cmock_retval) xPortHasUDPSocket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xPortHasUDPSocket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xPortHasUDPSocket_StopIgnore() xPortHasUDPSocket_CMockStopIgnore()
void xPortHasUDPSocket_CMockStopIgnore(void);
#define xPortHasUDPSocket_ExpectAnyArgsAndReturn(cmock_retval) xPortHasUDPSocket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void xPortHasUDPSocket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xPortHasUDPSocket_ExpectAndReturn(usPortNr, cmock_retval) xPortHasUDPSocket_CMockExpectAndReturn(__LINE__, usPortNr, cmock_retval)
void xPortHasUDPSocket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t usPortNr, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xPortHasUDPSocket_CALLBACK)(uint16_t usPortNr, int cmock_num_calls);
void xPortHasUDPSocket_AddCallback(CMOCK_xPortHasUDPSocket_CALLBACK Callback);
void xPortHasUDPSocket_Stub(CMOCK_xPortHasUDPSocket_CALLBACK Callback);
#define xPortHasUDPSocket_StubWithCallback xPortHasUDPSocket_Stub
#define xPortHasUDPSocket_IgnoreArg_usPortNr() xPortHasUDPSocket_CMockIgnoreArg_usPortNr(__LINE__)
void xPortHasUDPSocket_CMockIgnoreArg_usPortNr(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_connect_IgnoreAndReturn(cmock_retval) FreeRTOS_connect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_connect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_connect_StopIgnore() FreeRTOS_connect_CMockStopIgnore()
void FreeRTOS_connect_CMockStopIgnore(void);
#define FreeRTOS_connect_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_connect_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_connect_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_connect_ExpectAndReturn(xClientSocket, pxAddress, xAddressLength, cmock_retval) FreeRTOS_connect_CMockExpectAndReturn(__LINE__, xClientSocket, pxAddress, xAddressLength, cmock_retval)
void FreeRTOS_connect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xClientSocket, struct freertos_sockaddr* pxAddress, socklen_t xAddressLength, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_connect_CALLBACK)(Socket_t xClientSocket, struct freertos_sockaddr* pxAddress, socklen_t xAddressLength, int cmock_num_calls);
void FreeRTOS_connect_AddCallback(CMOCK_FreeRTOS_connect_CALLBACK Callback);
void FreeRTOS_connect_Stub(CMOCK_FreeRTOS_connect_CALLBACK Callback);
#define FreeRTOS_connect_StubWithCallback FreeRTOS_connect_Stub
#define FreeRTOS_connect_ExpectWithArrayAndReturn(xClientSocket, pxAddress, pxAddress_Depth, xAddressLength, cmock_retval) FreeRTOS_connect_CMockExpectWithArrayAndReturn(__LINE__, xClientSocket, pxAddress, pxAddress_Depth, xAddressLength, cmock_retval)
void FreeRTOS_connect_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xClientSocket, struct freertos_sockaddr* pxAddress, int pxAddress_Depth, socklen_t xAddressLength, BaseType_t cmock_to_return);
#define FreeRTOS_connect_ReturnThruPtr_pxAddress(pxAddress) FreeRTOS_connect_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, sizeof(struct freertos_sockaddr))
#define FreeRTOS_connect_ReturnArrayThruPtr_pxAddress(pxAddress, cmock_len) FreeRTOS_connect_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, (int)(cmock_len * (int)sizeof(*pxAddress)))
#define FreeRTOS_connect_ReturnMemThruPtr_pxAddress(pxAddress, cmock_size) FreeRTOS_connect_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, cmock_size)
void FreeRTOS_connect_CMockReturnMemThruPtr_pxAddress(UNITY_LINE_TYPE cmock_line, struct freertos_sockaddr* pxAddress, int cmock_size);
#define FreeRTOS_connect_IgnoreArg_xClientSocket() FreeRTOS_connect_CMockIgnoreArg_xClientSocket(__LINE__)
void FreeRTOS_connect_CMockIgnoreArg_xClientSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_connect_IgnoreArg_pxAddress() FreeRTOS_connect_CMockIgnoreArg_pxAddress(__LINE__)
void FreeRTOS_connect_CMockIgnoreArg_pxAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_connect_IgnoreArg_xAddressLength() FreeRTOS_connect_CMockIgnoreArg_xAddressLength(__LINE__)
void FreeRTOS_connect_CMockIgnoreArg_xAddressLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_listen_IgnoreAndReturn(cmock_retval) FreeRTOS_listen_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_listen_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_listen_StopIgnore() FreeRTOS_listen_CMockStopIgnore()
void FreeRTOS_listen_CMockStopIgnore(void);
#define FreeRTOS_listen_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_listen_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_listen_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_listen_ExpectAndReturn(xSocket, xBacklog, cmock_retval) FreeRTOS_listen_CMockExpectAndReturn(__LINE__, xSocket, xBacklog, cmock_retval)
void FreeRTOS_listen_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t xBacklog, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_listen_CALLBACK)(Socket_t xSocket, BaseType_t xBacklog, int cmock_num_calls);
void FreeRTOS_listen_AddCallback(CMOCK_FreeRTOS_listen_CALLBACK Callback);
void FreeRTOS_listen_Stub(CMOCK_FreeRTOS_listen_CALLBACK Callback);
#define FreeRTOS_listen_StubWithCallback FreeRTOS_listen_Stub
#define FreeRTOS_listen_IgnoreArg_xSocket() FreeRTOS_listen_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_listen_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_listen_IgnoreArg_xBacklog() FreeRTOS_listen_CMockIgnoreArg_xBacklog(__LINE__)
void FreeRTOS_listen_CMockIgnoreArg_xBacklog(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recv_IgnoreAndReturn(cmock_retval) FreeRTOS_recv_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_recv_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_recv_StopIgnore() FreeRTOS_recv_CMockStopIgnore()
void FreeRTOS_recv_CMockStopIgnore(void);
#define FreeRTOS_recv_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_recv_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_recv_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_recv_ExpectAndReturn(xSocket, pvBuffer, xBufferLength, xFlags, cmock_retval) FreeRTOS_recv_CMockExpectAndReturn(__LINE__, xSocket, pvBuffer, xBufferLength, xFlags, cmock_retval)
void FreeRTOS_recv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, void* pvBuffer, size_t xBufferLength, BaseType_t xFlags, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_recv_CALLBACK)(Socket_t xSocket, void* pvBuffer, size_t xBufferLength, BaseType_t xFlags, int cmock_num_calls);
void FreeRTOS_recv_AddCallback(CMOCK_FreeRTOS_recv_CALLBACK Callback);
void FreeRTOS_recv_Stub(CMOCK_FreeRTOS_recv_CALLBACK Callback);
#define FreeRTOS_recv_StubWithCallback FreeRTOS_recv_Stub
#define FreeRTOS_recv_ExpectWithArrayAndReturn(xSocket, pvBuffer, pvBuffer_Depth, xBufferLength, xFlags, cmock_retval) FreeRTOS_recv_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pvBuffer, pvBuffer_Depth, xBufferLength, xFlags, cmock_retval)
void FreeRTOS_recv_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, void* pvBuffer, int pvBuffer_Depth, size_t xBufferLength, BaseType_t xFlags, BaseType_t cmock_to_return);
#define FreeRTOS_recv_ReturnThruPtr_pvBuffer(pvBuffer) FreeRTOS_recv_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, sizeof(void))
#define FreeRTOS_recv_ReturnArrayThruPtr_pvBuffer(pvBuffer, cmock_len) FreeRTOS_recv_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, (int)(cmock_len * (int)sizeof(*pvBuffer)))
#define FreeRTOS_recv_ReturnMemThruPtr_pvBuffer(pvBuffer, cmock_size) FreeRTOS_recv_CMockReturnMemThruPtr_pvBuffer(__LINE__, pvBuffer, cmock_size)
void FreeRTOS_recv_CMockReturnMemThruPtr_pvBuffer(UNITY_LINE_TYPE cmock_line, void* pvBuffer, int cmock_size);
#define FreeRTOS_recv_IgnoreArg_xSocket() FreeRTOS_recv_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_recv_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recv_IgnoreArg_pvBuffer() FreeRTOS_recv_CMockIgnoreArg_pvBuffer(__LINE__)
void FreeRTOS_recv_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recv_IgnoreArg_xBufferLength() FreeRTOS_recv_CMockIgnoreArg_xBufferLength(__LINE__)
void FreeRTOS_recv_CMockIgnoreArg_xBufferLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_recv_IgnoreArg_xFlags() FreeRTOS_recv_CMockIgnoreArg_xFlags(__LINE__)
void FreeRTOS_recv_CMockIgnoreArg_xFlags(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_send_IgnoreAndReturn(cmock_retval) FreeRTOS_send_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_send_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_send_StopIgnore() FreeRTOS_send_CMockStopIgnore()
void FreeRTOS_send_CMockStopIgnore(void);
#define FreeRTOS_send_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_send_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_send_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_send_ExpectAndReturn(xSocket, pvBuffer, uxDataLength, xFlags, cmock_retval) FreeRTOS_send_CMockExpectAndReturn(__LINE__, xSocket, pvBuffer, uxDataLength, xFlags, cmock_retval)
void FreeRTOS_send_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, const void* pvBuffer, size_t uxDataLength, BaseType_t xFlags, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_send_CALLBACK)(Socket_t xSocket, const void* pvBuffer, size_t uxDataLength, BaseType_t xFlags, int cmock_num_calls);
void FreeRTOS_send_AddCallback(CMOCK_FreeRTOS_send_CALLBACK Callback);
void FreeRTOS_send_Stub(CMOCK_FreeRTOS_send_CALLBACK Callback);
#define FreeRTOS_send_StubWithCallback FreeRTOS_send_Stub
#define FreeRTOS_send_ExpectWithArrayAndReturn(xSocket, pvBuffer, pvBuffer_Depth, uxDataLength, xFlags, cmock_retval) FreeRTOS_send_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pvBuffer, pvBuffer_Depth, uxDataLength, xFlags, cmock_retval)
void FreeRTOS_send_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, const void* pvBuffer, int pvBuffer_Depth, size_t uxDataLength, BaseType_t xFlags, BaseType_t cmock_to_return);
#define FreeRTOS_send_IgnoreArg_xSocket() FreeRTOS_send_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_send_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_send_IgnoreArg_pvBuffer() FreeRTOS_send_CMockIgnoreArg_pvBuffer(__LINE__)
void FreeRTOS_send_CMockIgnoreArg_pvBuffer(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_send_IgnoreArg_uxDataLength() FreeRTOS_send_CMockIgnoreArg_uxDataLength(__LINE__)
void FreeRTOS_send_CMockIgnoreArg_uxDataLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_send_IgnoreArg_xFlags() FreeRTOS_send_CMockIgnoreArg_xFlags(__LINE__)
void FreeRTOS_send_CMockIgnoreArg_xFlags(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_accept_IgnoreAndReturn(cmock_retval) FreeRTOS_accept_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_accept_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t cmock_to_return);
#define FreeRTOS_accept_StopIgnore() FreeRTOS_accept_CMockStopIgnore()
void FreeRTOS_accept_CMockStopIgnore(void);
#define FreeRTOS_accept_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_accept_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_accept_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t cmock_to_return);
#define FreeRTOS_accept_ExpectAndReturn(xServerSocket, pxAddress, pxAddressLength, cmock_retval) FreeRTOS_accept_CMockExpectAndReturn(__LINE__, xServerSocket, pxAddress, pxAddressLength, cmock_retval)
void FreeRTOS_accept_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xServerSocket, struct freertos_sockaddr* pxAddress, socklen_t* pxAddressLength, Socket_t cmock_to_return);
typedef Socket_t (* CMOCK_FreeRTOS_accept_CALLBACK)(Socket_t xServerSocket, struct freertos_sockaddr* pxAddress, socklen_t* pxAddressLength, int cmock_num_calls);
void FreeRTOS_accept_AddCallback(CMOCK_FreeRTOS_accept_CALLBACK Callback);
void FreeRTOS_accept_Stub(CMOCK_FreeRTOS_accept_CALLBACK Callback);
#define FreeRTOS_accept_StubWithCallback FreeRTOS_accept_Stub
#define FreeRTOS_accept_ExpectWithArrayAndReturn(xServerSocket, pxAddress, pxAddress_Depth, pxAddressLength, pxAddressLength_Depth, cmock_retval) FreeRTOS_accept_CMockExpectWithArrayAndReturn(__LINE__, xServerSocket, pxAddress, pxAddress_Depth, pxAddressLength, pxAddressLength_Depth, cmock_retval)
void FreeRTOS_accept_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xServerSocket, struct freertos_sockaddr* pxAddress, int pxAddress_Depth, socklen_t* pxAddressLength, int pxAddressLength_Depth, Socket_t cmock_to_return);
#define FreeRTOS_accept_ReturnThruPtr_pxAddress(pxAddress) FreeRTOS_accept_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, sizeof(struct freertos_sockaddr))
#define FreeRTOS_accept_ReturnArrayThruPtr_pxAddress(pxAddress, cmock_len) FreeRTOS_accept_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, (int)(cmock_len * (int)sizeof(*pxAddress)))
#define FreeRTOS_accept_ReturnMemThruPtr_pxAddress(pxAddress, cmock_size) FreeRTOS_accept_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, cmock_size)
void FreeRTOS_accept_CMockReturnMemThruPtr_pxAddress(UNITY_LINE_TYPE cmock_line, struct freertos_sockaddr* pxAddress, int cmock_size);
#define FreeRTOS_accept_ReturnThruPtr_pxAddressLength(pxAddressLength) FreeRTOS_accept_CMockReturnMemThruPtr_pxAddressLength(__LINE__, pxAddressLength, sizeof(socklen_t))
#define FreeRTOS_accept_ReturnArrayThruPtr_pxAddressLength(pxAddressLength, cmock_len) FreeRTOS_accept_CMockReturnMemThruPtr_pxAddressLength(__LINE__, pxAddressLength, (int)(cmock_len * (int)sizeof(*pxAddressLength)))
#define FreeRTOS_accept_ReturnMemThruPtr_pxAddressLength(pxAddressLength, cmock_size) FreeRTOS_accept_CMockReturnMemThruPtr_pxAddressLength(__LINE__, pxAddressLength, cmock_size)
void FreeRTOS_accept_CMockReturnMemThruPtr_pxAddressLength(UNITY_LINE_TYPE cmock_line, socklen_t* pxAddressLength, int cmock_size);
#define FreeRTOS_accept_IgnoreArg_xServerSocket() FreeRTOS_accept_CMockIgnoreArg_xServerSocket(__LINE__)
void FreeRTOS_accept_CMockIgnoreArg_xServerSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_accept_IgnoreArg_pxAddress() FreeRTOS_accept_CMockIgnoreArg_pxAddress(__LINE__)
void FreeRTOS_accept_CMockIgnoreArg_pxAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_accept_IgnoreArg_pxAddressLength() FreeRTOS_accept_CMockIgnoreArg_pxAddressLength(__LINE__)
void FreeRTOS_accept_CMockIgnoreArg_pxAddressLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_shutdown_IgnoreAndReturn(cmock_retval) FreeRTOS_shutdown_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_shutdown_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_shutdown_StopIgnore() FreeRTOS_shutdown_CMockStopIgnore()
void FreeRTOS_shutdown_CMockStopIgnore(void);
#define FreeRTOS_shutdown_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_shutdown_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_shutdown_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_shutdown_ExpectAndReturn(xSocket, xHow, cmock_retval) FreeRTOS_shutdown_CMockExpectAndReturn(__LINE__, xSocket, xHow, cmock_retval)
void FreeRTOS_shutdown_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t xHow, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_shutdown_CALLBACK)(Socket_t xSocket, BaseType_t xHow, int cmock_num_calls);
void FreeRTOS_shutdown_AddCallback(CMOCK_FreeRTOS_shutdown_CALLBACK Callback);
void FreeRTOS_shutdown_Stub(CMOCK_FreeRTOS_shutdown_CALLBACK Callback);
#define FreeRTOS_shutdown_StubWithCallback FreeRTOS_shutdown_Stub
#define FreeRTOS_shutdown_IgnoreArg_xSocket() FreeRTOS_shutdown_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_shutdown_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_shutdown_IgnoreArg_xHow() FreeRTOS_shutdown_CMockIgnoreArg_xHow(__LINE__)
void FreeRTOS_shutdown_CMockIgnoreArg_xHow(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SignalSocket_IgnoreAndReturn(cmock_retval) FreeRTOS_SignalSocket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_SignalSocket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_SignalSocket_StopIgnore() FreeRTOS_SignalSocket_CMockStopIgnore()
void FreeRTOS_SignalSocket_CMockStopIgnore(void);
#define FreeRTOS_SignalSocket_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_SignalSocket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_SignalSocket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_SignalSocket_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_SignalSocket_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_SignalSocket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_SignalSocket_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_SignalSocket_AddCallback(CMOCK_FreeRTOS_SignalSocket_CALLBACK Callback);
void FreeRTOS_SignalSocket_Stub(CMOCK_FreeRTOS_SignalSocket_CALLBACK Callback);
#define FreeRTOS_SignalSocket_StubWithCallback FreeRTOS_SignalSocket_Stub
#define FreeRTOS_SignalSocket_IgnoreArg_xSocket() FreeRTOS_SignalSocket_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_SignalSocket_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SignalSocketFromISR_IgnoreAndReturn(cmock_retval) FreeRTOS_SignalSocketFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_SignalSocketFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_SignalSocketFromISR_StopIgnore() FreeRTOS_SignalSocketFromISR_CMockStopIgnore()
void FreeRTOS_SignalSocketFromISR_CMockStopIgnore(void);
#define FreeRTOS_SignalSocketFromISR_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_SignalSocketFromISR_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_SignalSocketFromISR_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_SignalSocketFromISR_ExpectAndReturn(xSocket, pxHigherPriorityTaskWoken, cmock_retval) FreeRTOS_SignalSocketFromISR_CMockExpectAndReturn(__LINE__, xSocket, pxHigherPriorityTaskWoken, cmock_retval)
void FreeRTOS_SignalSocketFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t* pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_SignalSocketFromISR_CALLBACK)(Socket_t xSocket, BaseType_t* pxHigherPriorityTaskWoken, int cmock_num_calls);
void FreeRTOS_SignalSocketFromISR_AddCallback(CMOCK_FreeRTOS_SignalSocketFromISR_CALLBACK Callback);
void FreeRTOS_SignalSocketFromISR_Stub(CMOCK_FreeRTOS_SignalSocketFromISR_CALLBACK Callback);
#define FreeRTOS_SignalSocketFromISR_StubWithCallback FreeRTOS_SignalSocketFromISR_Stub
#define FreeRTOS_SignalSocketFromISR_ExpectWithArrayAndReturn(xSocket, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth, cmock_retval) FreeRTOS_SignalSocketFromISR_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth, cmock_retval)
void FreeRTOS_SignalSocketFromISR_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t* pxHigherPriorityTaskWoken, int pxHigherPriorityTaskWoken_Depth, BaseType_t cmock_to_return);
#define FreeRTOS_SignalSocketFromISR_ReturnThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken) FreeRTOS_SignalSocketFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, sizeof(BaseType_t))
#define FreeRTOS_SignalSocketFromISR_ReturnArrayThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_len) FreeRTOS_SignalSocketFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, (int)(cmock_len * (int)sizeof(*pxHigherPriorityTaskWoken)))
#define FreeRTOS_SignalSocketFromISR_ReturnMemThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_size) FreeRTOS_SignalSocketFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, cmock_size)
void FreeRTOS_SignalSocketFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line, BaseType_t* pxHigherPriorityTaskWoken, int cmock_size);
#define FreeRTOS_SignalSocketFromISR_IgnoreArg_xSocket() FreeRTOS_SignalSocketFromISR_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_SignalSocketFromISR_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_SignalSocketFromISR_IgnoreArg_pxHigherPriorityTaskWoken() FreeRTOS_SignalSocketFromISR_CMockIgnoreArg_pxHigherPriorityTaskWoken(__LINE__)
void FreeRTOS_SignalSocketFromISR_CMockIgnoreArg_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetRemoteAddress_IgnoreAndReturn(cmock_retval) FreeRTOS_GetRemoteAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetRemoteAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_GetRemoteAddress_StopIgnore() FreeRTOS_GetRemoteAddress_CMockStopIgnore()
void FreeRTOS_GetRemoteAddress_CMockStopIgnore(void);
#define FreeRTOS_GetRemoteAddress_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_GetRemoteAddress_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_GetRemoteAddress_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_GetRemoteAddress_ExpectAndReturn(xSocket, pxAddress, cmock_retval) FreeRTOS_GetRemoteAddress_CMockExpectAndReturn(__LINE__, xSocket, pxAddress, cmock_retval)
void FreeRTOS_GetRemoteAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, struct freertos_sockaddr* pxAddress, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_GetRemoteAddress_CALLBACK)(Socket_t xSocket, struct freertos_sockaddr* pxAddress, int cmock_num_calls);
void FreeRTOS_GetRemoteAddress_AddCallback(CMOCK_FreeRTOS_GetRemoteAddress_CALLBACK Callback);
void FreeRTOS_GetRemoteAddress_Stub(CMOCK_FreeRTOS_GetRemoteAddress_CALLBACK Callback);
#define FreeRTOS_GetRemoteAddress_StubWithCallback FreeRTOS_GetRemoteAddress_Stub
#define FreeRTOS_GetRemoteAddress_ExpectWithArrayAndReturn(xSocket, pxAddress, pxAddress_Depth, cmock_retval) FreeRTOS_GetRemoteAddress_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pxAddress, pxAddress_Depth, cmock_retval)
void FreeRTOS_GetRemoteAddress_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, struct freertos_sockaddr* pxAddress, int pxAddress_Depth, BaseType_t cmock_to_return);
#define FreeRTOS_GetRemoteAddress_ReturnThruPtr_pxAddress(pxAddress) FreeRTOS_GetRemoteAddress_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, sizeof(struct freertos_sockaddr))
#define FreeRTOS_GetRemoteAddress_ReturnArrayThruPtr_pxAddress(pxAddress, cmock_len) FreeRTOS_GetRemoteAddress_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, (int)(cmock_len * (int)sizeof(*pxAddress)))
#define FreeRTOS_GetRemoteAddress_ReturnMemThruPtr_pxAddress(pxAddress, cmock_size) FreeRTOS_GetRemoteAddress_CMockReturnMemThruPtr_pxAddress(__LINE__, pxAddress, cmock_size)
void FreeRTOS_GetRemoteAddress_CMockReturnMemThruPtr_pxAddress(UNITY_LINE_TYPE cmock_line, struct freertos_sockaddr* pxAddress, int cmock_size);
#define FreeRTOS_GetRemoteAddress_IgnoreArg_xSocket() FreeRTOS_GetRemoteAddress_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_GetRemoteAddress_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_GetRemoteAddress_IgnoreArg_pxAddress() FreeRTOS_GetRemoteAddress_CMockIgnoreArg_pxAddress(__LINE__)
void FreeRTOS_GetRemoteAddress_CMockIgnoreArg_pxAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_issocketconnected_IgnoreAndReturn(cmock_retval) FreeRTOS_issocketconnected_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_issocketconnected_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_issocketconnected_StopIgnore() FreeRTOS_issocketconnected_CMockStopIgnore()
void FreeRTOS_issocketconnected_CMockStopIgnore(void);
#define FreeRTOS_issocketconnected_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_issocketconnected_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_issocketconnected_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_issocketconnected_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_issocketconnected_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_issocketconnected_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_issocketconnected_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_issocketconnected_AddCallback(CMOCK_FreeRTOS_issocketconnected_CALLBACK Callback);
void FreeRTOS_issocketconnected_Stub(CMOCK_FreeRTOS_issocketconnected_CALLBACK Callback);
#define FreeRTOS_issocketconnected_StubWithCallback FreeRTOS_issocketconnected_Stub
#define FreeRTOS_issocketconnected_IgnoreArg_xSocket() FreeRTOS_issocketconnected_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_issocketconnected_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_mss_IgnoreAndReturn(cmock_retval) FreeRTOS_mss_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_mss_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_mss_StopIgnore() FreeRTOS_mss_CMockStopIgnore()
void FreeRTOS_mss_CMockStopIgnore(void);
#define FreeRTOS_mss_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_mss_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_mss_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_mss_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_mss_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_mss_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_mss_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_mss_AddCallback(CMOCK_FreeRTOS_mss_CALLBACK Callback);
void FreeRTOS_mss_Stub(CMOCK_FreeRTOS_mss_CALLBACK Callback);
#define FreeRTOS_mss_StubWithCallback FreeRTOS_mss_Stub
#define FreeRTOS_mss_IgnoreArg_xSocket() FreeRTOS_mss_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_mss_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_connstatus_IgnoreAndReturn(cmock_retval) FreeRTOS_connstatus_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_connstatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_connstatus_StopIgnore() FreeRTOS_connstatus_CMockStopIgnore()
void FreeRTOS_connstatus_CMockStopIgnore(void);
#define FreeRTOS_connstatus_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_connstatus_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_connstatus_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_connstatus_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_connstatus_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_connstatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_connstatus_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_connstatus_AddCallback(CMOCK_FreeRTOS_connstatus_CALLBACK Callback);
void FreeRTOS_connstatus_Stub(CMOCK_FreeRTOS_connstatus_CALLBACK Callback);
#define FreeRTOS_connstatus_StubWithCallback FreeRTOS_connstatus_Stub
#define FreeRTOS_connstatus_IgnoreArg_xSocket() FreeRTOS_connstatus_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_connstatus_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_maywrite_IgnoreAndReturn(cmock_retval) FreeRTOS_maywrite_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_maywrite_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_maywrite_StopIgnore() FreeRTOS_maywrite_CMockStopIgnore()
void FreeRTOS_maywrite_CMockStopIgnore(void);
#define FreeRTOS_maywrite_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_maywrite_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_maywrite_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_maywrite_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_maywrite_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_maywrite_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_maywrite_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_maywrite_AddCallback(CMOCK_FreeRTOS_maywrite_CALLBACK Callback);
void FreeRTOS_maywrite_Stub(CMOCK_FreeRTOS_maywrite_CALLBACK Callback);
#define FreeRTOS_maywrite_StubWithCallback FreeRTOS_maywrite_Stub
#define FreeRTOS_maywrite_IgnoreArg_xSocket() FreeRTOS_maywrite_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_maywrite_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_rx_size_IgnoreAndReturn(cmock_retval) FreeRTOS_rx_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_rx_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_rx_size_StopIgnore() FreeRTOS_rx_size_CMockStopIgnore()
void FreeRTOS_rx_size_CMockStopIgnore(void);
#define FreeRTOS_rx_size_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_rx_size_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_rx_size_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_rx_size_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_rx_size_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_rx_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_rx_size_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_rx_size_AddCallback(CMOCK_FreeRTOS_rx_size_CALLBACK Callback);
void FreeRTOS_rx_size_Stub(CMOCK_FreeRTOS_rx_size_CALLBACK Callback);
#define FreeRTOS_rx_size_StubWithCallback FreeRTOS_rx_size_Stub
#define FreeRTOS_rx_size_IgnoreArg_xSocket() FreeRTOS_rx_size_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_rx_size_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_tx_space_IgnoreAndReturn(cmock_retval) FreeRTOS_tx_space_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_tx_space_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_tx_space_StopIgnore() FreeRTOS_tx_space_CMockStopIgnore()
void FreeRTOS_tx_space_CMockStopIgnore(void);
#define FreeRTOS_tx_space_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_tx_space_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_tx_space_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_tx_space_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_tx_space_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_tx_space_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_tx_space_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_tx_space_AddCallback(CMOCK_FreeRTOS_tx_space_CALLBACK Callback);
void FreeRTOS_tx_space_Stub(CMOCK_FreeRTOS_tx_space_CALLBACK Callback);
#define FreeRTOS_tx_space_StubWithCallback FreeRTOS_tx_space_Stub
#define FreeRTOS_tx_space_IgnoreArg_xSocket() FreeRTOS_tx_space_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_tx_space_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_tx_size_IgnoreAndReturn(cmock_retval) FreeRTOS_tx_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_tx_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_tx_size_StopIgnore() FreeRTOS_tx_size_CMockStopIgnore()
void FreeRTOS_tx_size_CMockStopIgnore(void);
#define FreeRTOS_tx_size_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_tx_size_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_tx_size_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_tx_size_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_tx_size_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_tx_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_tx_size_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_tx_size_AddCallback(CMOCK_FreeRTOS_tx_size_CALLBACK Callback);
void FreeRTOS_tx_size_Stub(CMOCK_FreeRTOS_tx_size_CALLBACK Callback);
#define FreeRTOS_tx_size_StubWithCallback FreeRTOS_tx_size_Stub
#define FreeRTOS_tx_size_IgnoreArg_xSocket() FreeRTOS_tx_size_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_tx_size_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_get_tx_head_IgnoreAndReturn(cmock_retval) FreeRTOS_get_tx_head_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_get_tx_head_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* cmock_to_return);
#define FreeRTOS_get_tx_head_StopIgnore() FreeRTOS_get_tx_head_CMockStopIgnore()
void FreeRTOS_get_tx_head_CMockStopIgnore(void);
#define FreeRTOS_get_tx_head_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_get_tx_head_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_get_tx_head_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* cmock_to_return);
#define FreeRTOS_get_tx_head_ExpectAndReturn(xSocket, pxLength, cmock_retval) FreeRTOS_get_tx_head_CMockExpectAndReturn(__LINE__, xSocket, pxLength, cmock_retval)
void FreeRTOS_get_tx_head_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t* pxLength, uint8_t* cmock_to_return);
typedef uint8_t* (* CMOCK_FreeRTOS_get_tx_head_CALLBACK)(Socket_t xSocket, BaseType_t* pxLength, int cmock_num_calls);
void FreeRTOS_get_tx_head_AddCallback(CMOCK_FreeRTOS_get_tx_head_CALLBACK Callback);
void FreeRTOS_get_tx_head_Stub(CMOCK_FreeRTOS_get_tx_head_CALLBACK Callback);
#define FreeRTOS_get_tx_head_StubWithCallback FreeRTOS_get_tx_head_Stub
#define FreeRTOS_get_tx_head_ExpectWithArrayAndReturn(xSocket, pxLength, pxLength_Depth, cmock_retval) FreeRTOS_get_tx_head_CMockExpectWithArrayAndReturn(__LINE__, xSocket, pxLength, pxLength_Depth, cmock_retval)
void FreeRTOS_get_tx_head_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t* pxLength, int pxLength_Depth, uint8_t* cmock_to_return);
#define FreeRTOS_get_tx_head_ReturnThruPtr_pxLength(pxLength) FreeRTOS_get_tx_head_CMockReturnMemThruPtr_pxLength(__LINE__, pxLength, sizeof(BaseType_t))
#define FreeRTOS_get_tx_head_ReturnArrayThruPtr_pxLength(pxLength, cmock_len) FreeRTOS_get_tx_head_CMockReturnMemThruPtr_pxLength(__LINE__, pxLength, (int)(cmock_len * (int)sizeof(*pxLength)))
#define FreeRTOS_get_tx_head_ReturnMemThruPtr_pxLength(pxLength, cmock_size) FreeRTOS_get_tx_head_CMockReturnMemThruPtr_pxLength(__LINE__, pxLength, cmock_size)
void FreeRTOS_get_tx_head_CMockReturnMemThruPtr_pxLength(UNITY_LINE_TYPE cmock_line, BaseType_t* pxLength, int cmock_size);
#define FreeRTOS_get_tx_head_IgnoreArg_xSocket() FreeRTOS_get_tx_head_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_get_tx_head_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_get_tx_head_IgnoreArg_pxLength() FreeRTOS_get_tx_head_CMockIgnoreArg_pxLength(__LINE__)
void FreeRTOS_get_tx_head_CMockIgnoreArg_pxLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_setsockopt_IgnoreAndReturn(cmock_retval) FreeRTOS_setsockopt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_setsockopt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_setsockopt_StopIgnore() FreeRTOS_setsockopt_CMockStopIgnore()
void FreeRTOS_setsockopt_CMockStopIgnore(void);
#define FreeRTOS_setsockopt_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_setsockopt_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_setsockopt_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_setsockopt_ExpectAndReturn(xSocket, lLevel, lOptionName, pvOptionValue, xOptionLength, cmock_retval) FreeRTOS_setsockopt_CMockExpectAndReturn(__LINE__, xSocket, lLevel, lOptionName, pvOptionValue, xOptionLength, cmock_retval)
void FreeRTOS_setsockopt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void* pvOptionValue, size_t xOptionLength, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_setsockopt_CALLBACK)(Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void* pvOptionValue, size_t xOptionLength, int cmock_num_calls);
void FreeRTOS_setsockopt_AddCallback(CMOCK_FreeRTOS_setsockopt_CALLBACK Callback);
void FreeRTOS_setsockopt_Stub(CMOCK_FreeRTOS_setsockopt_CALLBACK Callback);
#define FreeRTOS_setsockopt_StubWithCallback FreeRTOS_setsockopt_Stub
#define FreeRTOS_setsockopt_ExpectWithArrayAndReturn(xSocket, lLevel, lOptionName, pvOptionValue, pvOptionValue_Depth, xOptionLength, cmock_retval) FreeRTOS_setsockopt_CMockExpectWithArrayAndReturn(__LINE__, xSocket, lLevel, lOptionName, pvOptionValue, pvOptionValue_Depth, xOptionLength, cmock_retval)
void FreeRTOS_setsockopt_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, int32_t lLevel, int32_t lOptionName, const void* pvOptionValue, int pvOptionValue_Depth, size_t xOptionLength, BaseType_t cmock_to_return);
#define FreeRTOS_setsockopt_IgnoreArg_xSocket() FreeRTOS_setsockopt_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_setsockopt_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_setsockopt_IgnoreArg_lLevel() FreeRTOS_setsockopt_CMockIgnoreArg_lLevel(__LINE__)
void FreeRTOS_setsockopt_CMockIgnoreArg_lLevel(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_setsockopt_IgnoreArg_lOptionName() FreeRTOS_setsockopt_CMockIgnoreArg_lOptionName(__LINE__)
void FreeRTOS_setsockopt_CMockIgnoreArg_lOptionName(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_setsockopt_IgnoreArg_pvOptionValue() FreeRTOS_setsockopt_CMockIgnoreArg_pvOptionValue(__LINE__)
void FreeRTOS_setsockopt_CMockIgnoreArg_pvOptionValue(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_setsockopt_IgnoreArg_xOptionLength() FreeRTOS_setsockopt_CMockIgnoreArg_xOptionLength(__LINE__)
void FreeRTOS_setsockopt_CMockIgnoreArg_xOptionLength(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_closesocket_IgnoreAndReturn(cmock_retval) FreeRTOS_closesocket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_closesocket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_closesocket_StopIgnore() FreeRTOS_closesocket_CMockStopIgnore()
void FreeRTOS_closesocket_CMockStopIgnore(void);
#define FreeRTOS_closesocket_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_closesocket_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_closesocket_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_closesocket_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_closesocket_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_closesocket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_closesocket_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_closesocket_AddCallback(CMOCK_FreeRTOS_closesocket_CALLBACK Callback);
void FreeRTOS_closesocket_Stub(CMOCK_FreeRTOS_closesocket_CALLBACK Callback);
#define FreeRTOS_closesocket_StubWithCallback FreeRTOS_closesocket_Stub
#define FreeRTOS_closesocket_IgnoreArg_xSocket() FreeRTOS_closesocket_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_closesocket_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_gethostbyname_IgnoreAndReturn(cmock_retval) FreeRTOS_gethostbyname_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_gethostbyname_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_gethostbyname_StopIgnore() FreeRTOS_gethostbyname_CMockStopIgnore()
void FreeRTOS_gethostbyname_CMockStopIgnore(void);
#define FreeRTOS_gethostbyname_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_gethostbyname_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_gethostbyname_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_gethostbyname_ExpectAndReturn(pcHostName, cmock_retval) FreeRTOS_gethostbyname_CMockExpectAndReturn(__LINE__, pcHostName, cmock_retval)
void FreeRTOS_gethostbyname_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pcHostName, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_gethostbyname_CALLBACK)(const char* pcHostName, int cmock_num_calls);
void FreeRTOS_gethostbyname_AddCallback(CMOCK_FreeRTOS_gethostbyname_CALLBACK Callback);
void FreeRTOS_gethostbyname_Stub(CMOCK_FreeRTOS_gethostbyname_CALLBACK Callback);
#define FreeRTOS_gethostbyname_StubWithCallback FreeRTOS_gethostbyname_Stub
#define FreeRTOS_gethostbyname_IgnoreArg_pcHostName() FreeRTOS_gethostbyname_CMockIgnoreArg_pcHostName(__LINE__)
void FreeRTOS_gethostbyname_CMockIgnoreArg_pcHostName(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_inet_addr_IgnoreAndReturn(cmock_retval) FreeRTOS_inet_addr_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_inet_addr_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_inet_addr_StopIgnore() FreeRTOS_inet_addr_CMockStopIgnore()
void FreeRTOS_inet_addr_CMockStopIgnore(void);
#define FreeRTOS_inet_addr_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_inet_addr_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_inet_addr_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define FreeRTOS_inet_addr_ExpectAndReturn(pcIPAddress, cmock_retval) FreeRTOS_inet_addr_CMockExpectAndReturn(__LINE__, pcIPAddress, cmock_retval)
void FreeRTOS_inet_addr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* pcIPAddress, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_FreeRTOS_inet_addr_CALLBACK)(const char* pcIPAddress, int cmock_num_calls);
void FreeRTOS_inet_addr_AddCallback(CMOCK_FreeRTOS_inet_addr_CALLBACK Callback);
void FreeRTOS_inet_addr_Stub(CMOCK_FreeRTOS_inet_addr_CALLBACK Callback);
#define FreeRTOS_inet_addr_StubWithCallback FreeRTOS_inet_addr_Stub
#define FreeRTOS_inet_addr_IgnoreArg_pcIPAddress() FreeRTOS_inet_addr_CMockIgnoreArg_pcIPAddress(__LINE__)
void FreeRTOS_inet_addr_CMockIgnoreArg_pcIPAddress(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_get_rx_buf_IgnoreAndReturn(cmock_retval) FreeRTOS_get_rx_buf_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_get_rx_buf_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const struct xSTREAM_BUFFER* cmock_to_return);
#define FreeRTOS_get_rx_buf_StopIgnore() FreeRTOS_get_rx_buf_CMockStopIgnore()
void FreeRTOS_get_rx_buf_CMockStopIgnore(void);
#define FreeRTOS_get_rx_buf_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_get_rx_buf_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_get_rx_buf_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, const struct xSTREAM_BUFFER* cmock_to_return);
#define FreeRTOS_get_rx_buf_ExpectAndReturn(xSocket, cmock_retval) FreeRTOS_get_rx_buf_CMockExpectAndReturn(__LINE__, xSocket, cmock_retval)
void FreeRTOS_get_rx_buf_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, const struct xSTREAM_BUFFER* cmock_to_return);
typedef const struct xSTREAM_BUFFER* (* CMOCK_FreeRTOS_get_rx_buf_CALLBACK)(Socket_t xSocket, int cmock_num_calls);
void FreeRTOS_get_rx_buf_AddCallback(CMOCK_FreeRTOS_get_rx_buf_CALLBACK Callback);
void FreeRTOS_get_rx_buf_Stub(CMOCK_FreeRTOS_get_rx_buf_CALLBACK Callback);
#define FreeRTOS_get_rx_buf_StubWithCallback FreeRTOS_get_rx_buf_Stub
#define FreeRTOS_get_rx_buf_IgnoreArg_xSocket() FreeRTOS_get_rx_buf_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_get_rx_buf_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_CreateSocketSet_IgnoreAndReturn(cmock_retval) FreeRTOS_CreateSocketSet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_CreateSocketSet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, SocketSet_t cmock_to_return);
#define FreeRTOS_CreateSocketSet_StopIgnore() FreeRTOS_CreateSocketSet_CMockStopIgnore()
void FreeRTOS_CreateSocketSet_CMockStopIgnore(void);
#define FreeRTOS_CreateSocketSet_ExpectAndReturn(cmock_retval) FreeRTOS_CreateSocketSet_CMockExpectAndReturn(__LINE__, cmock_retval)
void FreeRTOS_CreateSocketSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SocketSet_t cmock_to_return);
typedef SocketSet_t (* CMOCK_FreeRTOS_CreateSocketSet_CALLBACK)(int cmock_num_calls);
void FreeRTOS_CreateSocketSet_AddCallback(CMOCK_FreeRTOS_CreateSocketSet_CALLBACK Callback);
void FreeRTOS_CreateSocketSet_Stub(CMOCK_FreeRTOS_CreateSocketSet_CALLBACK Callback);
#define FreeRTOS_CreateSocketSet_StubWithCallback FreeRTOS_CreateSocketSet_Stub
#define FreeRTOS_DeleteSocketSet_Ignore() FreeRTOS_DeleteSocketSet_CMockIgnore()
void FreeRTOS_DeleteSocketSet_CMockIgnore(void);
#define FreeRTOS_DeleteSocketSet_StopIgnore() FreeRTOS_DeleteSocketSet_CMockStopIgnore()
void FreeRTOS_DeleteSocketSet_CMockStopIgnore(void);
#define FreeRTOS_DeleteSocketSet_ExpectAnyArgs() FreeRTOS_DeleteSocketSet_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_DeleteSocketSet_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_DeleteSocketSet_Expect(xSocketSet) FreeRTOS_DeleteSocketSet_CMockExpect(__LINE__, xSocketSet)
void FreeRTOS_DeleteSocketSet_CMockExpect(UNITY_LINE_TYPE cmock_line, SocketSet_t xSocketSet);
typedef void (* CMOCK_FreeRTOS_DeleteSocketSet_CALLBACK)(SocketSet_t xSocketSet, int cmock_num_calls);
void FreeRTOS_DeleteSocketSet_AddCallback(CMOCK_FreeRTOS_DeleteSocketSet_CALLBACK Callback);
void FreeRTOS_DeleteSocketSet_Stub(CMOCK_FreeRTOS_DeleteSocketSet_CALLBACK Callback);
#define FreeRTOS_DeleteSocketSet_StubWithCallback FreeRTOS_DeleteSocketSet_Stub
#define FreeRTOS_DeleteSocketSet_IgnoreArg_xSocketSet() FreeRTOS_DeleteSocketSet_CMockIgnoreArg_xSocketSet(__LINE__)
void FreeRTOS_DeleteSocketSet_CMockIgnoreArg_xSocketSet(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_SET_Ignore() FreeRTOS_FD_SET_CMockIgnore()
void FreeRTOS_FD_SET_CMockIgnore(void);
#define FreeRTOS_FD_SET_StopIgnore() FreeRTOS_FD_SET_CMockStopIgnore()
void FreeRTOS_FD_SET_CMockStopIgnore(void);
#define FreeRTOS_FD_SET_ExpectAnyArgs() FreeRTOS_FD_SET_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_FD_SET_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_SET_Expect(xSocket, xSocketSet, xBitsToSet) FreeRTOS_FD_SET_CMockExpect(__LINE__, xSocket, xSocketSet, xBitsToSet)
void FreeRTOS_FD_SET_CMockExpect(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, SocketSet_t xSocketSet, EventBits_t xBitsToSet);
typedef void (* CMOCK_FreeRTOS_FD_SET_CALLBACK)(Socket_t xSocket, SocketSet_t xSocketSet, EventBits_t xBitsToSet, int cmock_num_calls);
void FreeRTOS_FD_SET_AddCallback(CMOCK_FreeRTOS_FD_SET_CALLBACK Callback);
void FreeRTOS_FD_SET_Stub(CMOCK_FreeRTOS_FD_SET_CALLBACK Callback);
#define FreeRTOS_FD_SET_StubWithCallback FreeRTOS_FD_SET_Stub
#define FreeRTOS_FD_SET_IgnoreArg_xSocket() FreeRTOS_FD_SET_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_FD_SET_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_SET_IgnoreArg_xSocketSet() FreeRTOS_FD_SET_CMockIgnoreArg_xSocketSet(__LINE__)
void FreeRTOS_FD_SET_CMockIgnoreArg_xSocketSet(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_SET_IgnoreArg_xBitsToSet() FreeRTOS_FD_SET_CMockIgnoreArg_xBitsToSet(__LINE__)
void FreeRTOS_FD_SET_CMockIgnoreArg_xBitsToSet(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_CLR_Ignore() FreeRTOS_FD_CLR_CMockIgnore()
void FreeRTOS_FD_CLR_CMockIgnore(void);
#define FreeRTOS_FD_CLR_StopIgnore() FreeRTOS_FD_CLR_CMockStopIgnore()
void FreeRTOS_FD_CLR_CMockStopIgnore(void);
#define FreeRTOS_FD_CLR_ExpectAnyArgs() FreeRTOS_FD_CLR_CMockExpectAnyArgs(__LINE__)
void FreeRTOS_FD_CLR_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_CLR_Expect(xSocket, xSocketSet, xBitsToClear) FreeRTOS_FD_CLR_CMockExpect(__LINE__, xSocket, xSocketSet, xBitsToClear)
void FreeRTOS_FD_CLR_CMockExpect(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, SocketSet_t xSocketSet, EventBits_t xBitsToClear);
typedef void (* CMOCK_FreeRTOS_FD_CLR_CALLBACK)(Socket_t xSocket, SocketSet_t xSocketSet, EventBits_t xBitsToClear, int cmock_num_calls);
void FreeRTOS_FD_CLR_AddCallback(CMOCK_FreeRTOS_FD_CLR_CALLBACK Callback);
void FreeRTOS_FD_CLR_Stub(CMOCK_FreeRTOS_FD_CLR_CALLBACK Callback);
#define FreeRTOS_FD_CLR_StubWithCallback FreeRTOS_FD_CLR_Stub
#define FreeRTOS_FD_CLR_IgnoreArg_xSocket() FreeRTOS_FD_CLR_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_FD_CLR_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_CLR_IgnoreArg_xSocketSet() FreeRTOS_FD_CLR_CMockIgnoreArg_xSocketSet(__LINE__)
void FreeRTOS_FD_CLR_CMockIgnoreArg_xSocketSet(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_CLR_IgnoreArg_xBitsToClear() FreeRTOS_FD_CLR_CMockIgnoreArg_xBitsToClear(__LINE__)
void FreeRTOS_FD_CLR_CMockIgnoreArg_xBitsToClear(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_ISSET_IgnoreAndReturn(cmock_retval) FreeRTOS_FD_ISSET_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FD_ISSET_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, EventBits_t cmock_to_return);
#define FreeRTOS_FD_ISSET_StopIgnore() FreeRTOS_FD_ISSET_CMockStopIgnore()
void FreeRTOS_FD_ISSET_CMockStopIgnore(void);
#define FreeRTOS_FD_ISSET_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_FD_ISSET_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_FD_ISSET_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, EventBits_t cmock_to_return);
#define FreeRTOS_FD_ISSET_ExpectAndReturn(xSocket, xSocketSet, cmock_retval) FreeRTOS_FD_ISSET_CMockExpectAndReturn(__LINE__, xSocket, xSocketSet, cmock_retval)
void FreeRTOS_FD_ISSET_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Socket_t xSocket, SocketSet_t xSocketSet, EventBits_t cmock_to_return);
typedef EventBits_t (* CMOCK_FreeRTOS_FD_ISSET_CALLBACK)(Socket_t xSocket, SocketSet_t xSocketSet, int cmock_num_calls);
void FreeRTOS_FD_ISSET_AddCallback(CMOCK_FreeRTOS_FD_ISSET_CALLBACK Callback);
void FreeRTOS_FD_ISSET_Stub(CMOCK_FreeRTOS_FD_ISSET_CALLBACK Callback);
#define FreeRTOS_FD_ISSET_StubWithCallback FreeRTOS_FD_ISSET_Stub
#define FreeRTOS_FD_ISSET_IgnoreArg_xSocket() FreeRTOS_FD_ISSET_CMockIgnoreArg_xSocket(__LINE__)
void FreeRTOS_FD_ISSET_CMockIgnoreArg_xSocket(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_FD_ISSET_IgnoreArg_xSocketSet() FreeRTOS_FD_ISSET_CMockIgnoreArg_xSocketSet(__LINE__)
void FreeRTOS_FD_ISSET_CMockIgnoreArg_xSocketSet(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_select_IgnoreAndReturn(cmock_retval) FreeRTOS_select_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void FreeRTOS_select_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_select_StopIgnore() FreeRTOS_select_CMockStopIgnore()
void FreeRTOS_select_CMockStopIgnore(void);
#define FreeRTOS_select_ExpectAnyArgsAndReturn(cmock_retval) FreeRTOS_select_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void FreeRTOS_select_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define FreeRTOS_select_ExpectAndReturn(xSocketSet, xBlockTimeTicks, cmock_retval) FreeRTOS_select_CMockExpectAndReturn(__LINE__, xSocketSet, xBlockTimeTicks, cmock_retval)
void FreeRTOS_select_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, SocketSet_t xSocketSet, TickType_t xBlockTimeTicks, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_FreeRTOS_select_CALLBACK)(SocketSet_t xSocketSet, TickType_t xBlockTimeTicks, int cmock_num_calls);
void FreeRTOS_select_AddCallback(CMOCK_FreeRTOS_select_CALLBACK Callback);
void FreeRTOS_select_Stub(CMOCK_FreeRTOS_select_CALLBACK Callback);
#define FreeRTOS_select_StubWithCallback FreeRTOS_select_Stub
#define FreeRTOS_select_IgnoreArg_xSocketSet() FreeRTOS_select_CMockIgnoreArg_xSocketSet(__LINE__)
void FreeRTOS_select_CMockIgnoreArg_xSocketSet(UNITY_LINE_TYPE cmock_line);
#define FreeRTOS_select_IgnoreArg_xBlockTimeTicks() FreeRTOS_select_CMockIgnoreArg_xBlockTimeTicks(__LINE__)
void FreeRTOS_select_CMockIgnoreArg_xBlockTimeTicks(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
