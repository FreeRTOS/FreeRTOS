OUTPUT_DIR := ./output
IMAGE := RTOSDemo.elf
SUB_MAKEFILE_DIR = ./library-makefiles

CC = arm-none-eabi-gcc
LD = arm-none-eabi-gcc
MAKE = make

CFLAGS += $(INCLUDE_DIRS) -nostartfiles -ffreestanding -mthumb -mcpu=cortex-m3 \
		  -Wall -Wextra -g3 -Os -ffunction-sections -fdata-sections \
		  -MMD -MP -MF"$(@:%.o=%.d)" -MT $@

#FreeRTOS kernel specifics
KERNEL_DIR += ./../../../Source
KERNEL_PORT_DIR += $(KERNEL_DIR)/portable/GCC/ARM_CM3
INCLUDE_DIRS += -I$(KERNEL_DIR)/include \
				-I$(KERNEL_PORT_DIR)
VPATH += $(KERNEL_DIR) $(KERNEL_PORT_DIR) $(KERNEL_DIR)/portable/MemMang
SOURCE_FILES += $(KERNEL_DIR)/tasks.c
SOURCE_FILES += $(KERNEL_DIR)/list.c
SOURCE_FILES += $(KERNEL_DIR)/queue.c
SOURCE_FILES += $(KERNEL_DIR)/timers.c
SOURCE_FILES += $(KERNEL_DIR)/event_groups.c
SOURCE_FILES += $(KERNEL_DIR)/stream_buffer.c
SOURCE_FILES += $(KERNEL_DIR)/portable/MemMang/heap_4.c
SOURCE_FILES += $(KERNEL_DIR)/portable/GCC/ARM_CM3/port.c

#Application specific source files
APPLICATION_DIR += ./..
VPATH += $(APPLICATION_DIR)
INCLUDE_DIRS += -I$(APPLICATION_DIR) -I$(APPLICATION_DIR)/CMSIS
SOURCE_FILES += ./startup.c
SOURCE_FILES += $(APPLICATION_DIR)/main.c
SOURCE_FILES += $(APPLICATION_DIR)/main_blinky.c
SOURCE_FILES += $(APPLICATION_DIR)/main_full.c

#Tiny printf() implementation to save stack.
PRINTF_DIR += $(APPLICATION_DIR)/../Common/ThirdParty/printf-stdarg
VPATH += $(PRINTF_DIR) 
SOURCE_FILES += $(PRINTF_DIR)/printf-stdarg.c

#Standard demo files
STANDARD_DEMO_DIR += ./../../Common/Minimal
VPATH += $(STANDARD_DEMO_DIR)
INCLUDE_DIRS += -I$(STANDARD_DEMO_DIR)/../include
SOURCE_FILES += $(STANDARD_DEMO_DIR)/AbortDelay.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/BlockQ.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/blocktim.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/countsem.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/death.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/dynamic.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/EventGroupsDemo.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/GenQTest.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/integer.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/IntQueue.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/IntQueueTimer.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/IntSemTest.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/MessageBufferAMP.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/MessageBufferDemo.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/PollQ.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/QPeek.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/QueueOverwrite.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/QueueSet.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/QueueSetPolling.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/recmutex.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/semtest.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/StaticAllocation.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/StreamBufferDemo.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/StreamBufferInterrupt.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/TaskNotify.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/TaskNotifyArray.c
SOURCE_FILES += $(STANDARD_DEMO_DIR)/TimerDemo.c

#Create a list of object files with the desired output directory path.
OBJS = $(SOURCE_FILES:%.c=%.o)
OBJS_NO_PATH = $(notdir $(OBJS))
OBJS_OUTPUT = $(OBJS_NO_PATH:%.o=$(OUTPUT_DIR)/%.o)

#Create a list of dependency files with the desired output directory path.
DEP_FILES := $(SOURCE_FILES:%.c=$(OUTPUT_DIR)/%.d)
DEP_FILES_NO_PATH = $(notdir $(DEP_FILES))
DEP_OUTPUT = $(DEP_FILES_NO_PATH:%.d=$(OUTPUT_DIR)/%.d)

all: $(OUTPUT_DIR)/$(IMAGE)

%.o : %.c
$(OUTPUT_DIR)/%.o : %.c $(OUTPUT_DIR)/%.d Makefile
	$(CC) $(CFLAGS) -c $< -o $@

$(OUTPUT_DIR)/$(IMAGE): ./mps2_m3.ld $(OBJS_OUTPUT) Makefile
	$(LD) $(OBJS_OUTPUT) $(CFLAGS) -Xlinker --gc-sections -Xlinker -T ./mps2_m3.ld \
		-Xlinker -Map=$(OUTPUT_DIR)/RTOSDemo.map -specs=nano.specs \
		-specs=nosys.specs -specs=rdimon.specs -o $(OUTPUT_DIR)/$(IMAGE)

$(DEP_OUTPUT):
include $(wildcard $(DEP_OUTPUT))

clean:
	rm -f $(OUTPUT_DIR)/$(IMAGE) $(OUTPUT_DIR)/*.o $(OUTPUT_DIR)/*.d

#use "make print-[VARIABLE_NAME] to print the value of a variable generated by
#this makefile.
print-%  : ; @echo $* = $($*)

.PHONY: all clean


