name: Build FreeRTOS+ Demos
on:
  workflow_dispatch:
  push:
    branches: ["**"]

  pull_request:
    branches: [main]

jobs:
  winsim_cellular:
    name: Windows Simulator Cellular Demos
    runs-on: windows-2019
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Interface \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/bg96 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/hl7802 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/sara-r4 \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP \
            FreeRTOS-Plus/Source/Utilities/backoff_algorithm \
            FreeRTOS-Plus/Source/coreJSON \
            FreeRTOS-Plus/Source/corePKCS11 \
            FreeRTOS-Plus/ThirdParty/mbedtls \
            FreeRTOS-Plus/ThirdParty/tinycbor
          git -C FreeRTOS-Plus/Source/corePKCS11 submodule update --checkout --init --depth 1 source/dependency/3rdparty/pkcs11

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Configure FreeRTOS+Cellular Demos
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Cellular_Interface_Windows_Simulator
        run: |
          echo '#define CELLULAR_COMM_INTERFACE_PORT ""' | tee -a */cellular_config.h
          echo '#define CELLULAR_APN ""' | tee -a */cellular_config.h

          echo '#ifndef DEMO_CONFIG_H_TEST_BUILD' | tee -a */demo_config.h
          echo '    #define DEMO_CONFIG_H_TEST_BUILD' | tee -a */demo_config.h
          echo '    #define democonfigMQTT_BROKER_ENDPOINT ""' | tee -a */demo_config.h
          echo '    #define democonfigMQTT_BROKER_PORT ( 8883 )' | tee -a */demo_config.h
          echo '    #define democonfigROOT_CA_PEM ""' | tee -a */demo_config.h
          echo '    #define democonfigCLIENT_CERTIFICATE_PEM ""' | tee -a */demo_config.h
          echo '    #define democonfigCLIENT_PRIVATE_KEY_PEM ""' | tee -a */demo_config.h
          echo '    #define democonfigUSE_AWS_IOT_CORE_BROKER ( 1 )' | tee -a */demo_config.h
          echo '#endif /* DEMO_CONFIG_H_TEST_BUILD */' | tee -a */demo_config.h

      - name: Build Cellular MQTT Demo for BG96
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Cellular_Interface_Windows_Simulator/MQTT_Mutual_Auth_Demo_with_BG96
        run: msbuild mqtt_mutual_auth_demo_with_bg96.sln -t:rebuild -property:Configuration=Debug

      - name: Build Cellular MQTT Demo for HL7802
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Cellular_Interface_Windows_Simulator/MQTT_Mutual_Auth_Demo_with_HL7802
        run: msbuild mqtt_mutual_auth_demo_with_hl7802.sln -t:rebuild -property:Configuration=Debug

      - name: Build Cellular MQTT Demo for SARA-R4
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Cellular_Interface_Windows_Simulator/MQTT_Mutual_Auth_Demo_with_SARA_R4
        run: msbuild mqtt_mutual_auth_demo_with_sara_r4.sln -t:rebuild -property:Configuration=Debug

  winsim_coreHTTP:
    name: coreHTTP WinSim Demos
    runs-on: windows-2019
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/AWS/sigv4 \
            FreeRTOS-Plus/Source/Application-Protocols/coreHTTP \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP \
            FreeRTOS-Plus/Source/Utilities/backoff_algorithm \
            FreeRTOS-Plus/Source/coreJSON \
            FreeRTOS-Plus/ThirdParty/mbedtls \
            FreeRTOS-Plus/ThirdParty/glib \
            FreeRTOS-Plus/ThirdParty/libslirp
          git -C FreeRTOS-Plus/Source/Application-Protocols/coreHTTP submodule update --checkout --init --depth 1 source/dependency/3rdparty/llhttp

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Configure coreHTTP Demos
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreHTTP_Windows_Simulator
        run: |
          echo '#ifndef DEMO_CONFIG_H_TEST_BUILD' | tee -a */demo_config.h
          echo '    #define DEMO_CONFIG_H_TEST_BUILD' | tee -a */demo_config.h
          echo '    #define democonfigSERVER_HOSTNAME ""' | tee -a */demo_config.h
          echo '    #define democonfigAWS_IOT_ENDPOINT ""' | tee -a */demo_config.h
          echo '    #define democonfigROOT_CA_PEM ""' | tee -a */demo_config.h
          echo '    #define democonfigCLIENT_CERTIFICATE_PEM ""' | tee -a */demo_config.h
          echo '    #define democonfigCLIENT_PRIVATE_KEY_PEM ""' | tee -a */demo_config.h
          echo '    #define democonfigIOT_CRED_PROVIDER_ROOT_CA_PEM ""' | tee -a */demo_config.h
          echo '    #define democonfigIOT_CREDENTIAL_PROVIDER_ENDPOINT ""' | tee -a */demo_config.h
          echo '    #define democonfigIOT_CREDENTIAL_PROVIDER_ROLE ""' | tee -a */demo_config.h
          echo '    #define democonfigIOT_THING_NAME ""' | tee -a */demo_config.h
          echo '    #define democonfigS3_PRESIGNED_GET_URL "ABCDEF"' | tee -a */demo_config.h
          echo '    #define democonfigS3_PRESIGNED_PUT_URL "ABCDEF"' | tee -a */demo_config.h
          echo '    #define democonfigS3_ROOT_CA_PEM ""' | tee -a */demo_config.h
          echo '    #define democonfigS3_BUCKET_NAME ""' | tee -a */demo_config.h
          echo '    #define democonfigS3_BUCKET_REGION ""' | tee -a */demo_config.h
          echo '    #define democonfigS3_OBJECT_NAME ""' | tee -a */demo_config.h
          echo '#endif /* DEMO_CONFIG_H_TEST_BUILD */' | tee -a */demo_config.h

      - name: Build HTTP Plain Text Demo
        id: build-http-plain-text-demo
        working-directory: FreeRTOS-Plus/Demo/coreHTTP_Windows_Simulator/HTTP_Plaintext
        run: msbuild http_plain_text_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build HTTP Mutual Auth Demo
        id: build-http-mutual-auth-demo
        working-directory: FreeRTOS-Plus/Demo/coreHTTP_Windows_Simulator/HTTP_Mutual_Auth
        run: msbuild http_mutual_auth_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build HTTP S3 Upload Demo
        id: build-http-s3-upload-demo
        working-directory: FreeRTOS-Plus/Demo/coreHTTP_Windows_Simulator/HTTP_S3_Upload
        run: msbuild http_s3_upload_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build HTTP S3 Download Multithreaded Demo
        id: build-http-s3-download-multithreaded-demo
        working-directory: FreeRTOS-Plus/Demo/coreHTTP_Windows_Simulator/HTTP_S3_Download_Multithreaded
        run: msbuild http_s3_download_multithreaded_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build HTTP S3 Download Demo
        id: build-http-s3-download-demo
        working-directory: FreeRTOS-Plus/Demo/coreHTTP_Windows_Simulator/HTTP_S3_Download
        run: msbuild http_s3_download_demo.sln -t:rebuild -property:Configuration=Debug -m

  winsim_corePKCS11:
    name: corePKCS11 WinSim Demos
    runs-on: windows-2019
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/AWS/fleet-provisioning \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP \
            FreeRTOS-Plus/Source/Utilities/backoff_algorithm \
            FreeRTOS-Plus/Source/coreJSON \
            FreeRTOS-Plus/Source/corePKCS11 \
            FreeRTOS-Plus/ThirdParty/mbedtls \
            FreeRTOS-Plus/ThirdParty/glib \
            FreeRTOS-Plus/ThirdParty/libslirp

          git -C FreeRTOS-Plus/Source/corePKCS11 submodule update --checkout --init --depth 1 source/dependency/3rdparty/pkcs11

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Install meson
        run: pip install meson

      - name: Install Glib
        continue-on-error: true
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
          cd FreeRTOS-Plus/ThirdParty/glib
          meson setup build --backend=vs2019 -Dselinux=disabled -Dxattr=false -Dbsymbolic_functions=false -Dtests=false -Dglib_debug=disabled -Dglib_assert=false --buildtype=release
          meson compile -C build

      - name: Build corePKCS11 Demo
        id: build-corePKCS11-demo
        working-directory: FreeRTOS-Plus/Demo/corePKCS11_Windows_Simulator
        run: msbuild CorePKCS11_Demos.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor corePKCS11 Demo
        if: success() || failure() && steps.build-corePKCS11-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/corePKCS11_Windows_Simulator/Debug_with_Libslirp/CorePKCS11_Demos.exe
          log-dir: demo_run_logs
          timeout-seconds: 30
          success-line: "Finished DEMO"
          success-exit-code: 0
          retry-attempts: 3

  winsim_corelibs:
    name: core Library Windows Simulator Demos
    runs-on: windows-2019
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/AWS/device-defender \
            FreeRTOS-Plus/Source/AWS/device-shadow \
            FreeRTOS-Plus/Source/AWS/fleet-provisioning \
            FreeRTOS-Plus/Source/AWS/jobs \
            FreeRTOS-Plus/Source/AWS/ota \
            FreeRTOS-Plus/Source/AWS/sigv4 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Interface \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/bg96 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/hl7802 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/sara-r4 \
            FreeRTOS-Plus/Source/Application-Protocols/coreHTTP \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT-Agent \
            FreeRTOS-Plus/Source/Application-Protocols/coreSNTP \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP \
            FreeRTOS-Plus/Source/Utilities/backoff_algorithm \
            FreeRTOS-Plus/Source/coreJSON \
            FreeRTOS-Plus/Source/corePKCS11 \
            FreeRTOS-Plus/ThirdParty/mbedtls \
            FreeRTOS-Plus/ThirdParty/tinycbor \
            FreeRTOS-Plus/ThirdParty/wolfSSL \
            FreeRTOS-Plus/ThirdParty/glib \
            FreeRTOS-Plus/ThirdParty/libslirp

          git -C FreeRTOS-Plus/Source/Application-Protocols/coreHTTP submodule update --checkout --init --depth 1 source/dependency/3rdparty/llhttp
          git -C FreeRTOS-Plus/Source/corePKCS11 submodule update --checkout --init --depth 1 source/dependency/3rdparty/pkcs11

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Install meson
        run: pip install meson

      - name: Install Glib
        continue-on-error: true
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
          cd FreeRTOS-Plus/ThirdParty/glib
          meson setup build --backend=vs2019 -Dselinux=disabled -Dxattr=false -Dbsymbolic_functions=false -Dtests=false -Dglib_debug=disabled -Dglib_assert=false --buildtype=release
          meson compile -C build

      - name: Generate SSL credentials
        id: generate-credentials
        uses: FreeRTOS/CI-CD-GitHub-Actions/ssl-credential-creator@main

      - name: Start localhost MQTT broker
        id: mqtt-broker
        uses: FreeRTOS/CI-CD-GitHub-Actions/localhost-mqtt-broker@main
        with:
          root-ca-cert-path: ${{ steps.generate-credentials.outputs.root-ca-cert-path }}
          server-priv-key-path: ${{ steps.generate-credentials.outputs.server-priv-key-path }}
          server-cert-path: ${{ steps.generate-credentials.outputs.server-cert-path }}

      - name: Update main.c to force stdout to write immediately
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/Common
        run: |
          $content = Get-Content -Path 'main.c' -Raw
          $newContent = $content -replace 'int\s+main(.*?)void(.*?)\r?\n\s*{', 'int main( void ){setvbuf( stdout, NULL, _IONBF, 0 );'
          $newContent | Set-Content -Path 'main.c'

      - name: Configure MQTT Plain Text Demo
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Plain_Text
        run: |
          echo '#define democonfigCLIENT_IDENTIFIER "mqtt_demo_test"' >> demo_config.h
          echo '#define democonfigMQTT_BROKER_ENDPOINT "127.0.0.1"' >> demo_config.h
          echo '#define democonfigMQTT_BROKER_PORT ( 1883 )' >> demo_config.h

      - name: Build MQTT Plain Text Demo
        id: build-mqtt-plain-text-demo
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Plain_Text
        run: |
          msbuild mqtt_plain_text_demo.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor MQTT Plain Text Demo
        if: success() || failure() && steps.build-mqtt-plain-text-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Plain_Text/Debug_with_Libslirp/MQTT_Plain_Text.exe
          log-dir: demo_run_logs
          timeout-seconds: 120
          success-line: "Demo completed successfully"
          retry-attempts: 3

      - name: Configure MQTT Basic TLS Demo
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Basic_TLS
        run: |
          echo '#define democonfigROOT_CA_PEM \' >> demo_config.h
          sed 's/.*/"&\\n"\\/' ${{ steps.generate-credentials.outputs.root-ca-cert-path }} >> root_ca_cert.txt
          sed '$ s/.$//' root_ca_cert.txt >> demo_config.h
          echo '#define democonfigCLIENT_IDENTIFIER "mqtt_demo_test"' >>  demo_config.h
          echo '#define democonfigMQTT_BROKER_ENDPOINT "127.0.0.1"' >> demo_config.h
          echo '#define democonfigMQTT_BROKER_PORT ( 8883 )' >> demo_config.h
          sed -i -z "s/define[[:space:]]*democonfigDISABLE_SNI[[:space:]]*([[:space:]]*[a-zA-Z0-9]\+[[:space:]]*)/define democonfigDISABLE_SNI ( pdTRUE )/g" demo_config.h

      - name: Build MQTT Basic TLS Demo
        id: build-mqtt-basic-tls-demo
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Basic_TLS
        run: msbuild mqtt_basic_tls_demo.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor MQTT Basic TLS Demo
        if: success() || failure() && steps.build-mqtt-basic-tls-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Basic_TLS/Debug_with_Libslirp/MQTT_Basic_TLS.exe
          log-dir: demo_run_logs
          timeout-seconds: 120
          success-line: "Demo completed successfully"
          retry-attempts: 3

      - name: Configure MQTT Mutual Authentication with mbedtls Demo
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Mutual_Auth
        run: |
          echo '#define democonfigROOT_CA_PEM \' >> demo_config.h
          sed 's/.*/"&\\n"\\/' ${{ steps.generate-credentials.outputs.root-ca-cert-path }} >> root_ca_cert.txt
          sed '$ s/.$//' root_ca_cert.txt >> demo_config.h
          echo '#define democonfigCLIENT_CERTIFICATE_PEM \' >> demo_config.h
          sed 's/.*/"&\\n"\\/' ${{ steps.generate-credentials.outputs.device-cert-path }} >> device_cert.txt
          sed '$ s/.$//' device_cert.txt >> demo_config.h
          echo '#define democonfigCLIENT_PRIVATE_KEY_PEM \' >> demo_config.h
          sed 's/.*/"&\\n"\\/' ${{ steps.generate-credentials.outputs.device-priv-key-path }} >> device_priv_key.txt
          sed '$ s/.$//' device_priv_key.txt >> demo_config.h
          echo '#define democonfigCLIENT_IDENTIFIER "mqtt_demo_test"' >>  demo_config.h
          echo '#define democonfigMQTT_BROKER_ENDPOINT "127.0.0.1"' >> demo_config.h
          echo '#define democonfigMQTT_BROKER_PORT ( 8883 )' >> demo_config.h
          sed -i -z "s/define[[:space:]]*democonfigDISABLE_SNI[[:space:]]*([[:space:]]*[a-zA-Z0-9]\+[[:space:]]*)/define democonfigDISABLE_SNI ( pdTRUE )/g" demo_config.h

      - name: Build MQTT Mutual Authentication with mbedtls Demo
        id: build-mqtt-mutual-auth-demo
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Mutual_Auth
        run: msbuild mqtt_mutual_auth_demo.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor MQTT Mutual Authentication with mbedtls Demo
        if: success() || failure() && steps.build-mqtt-mutual-auth-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Mutual_Auth/Debug_with_Libslirp/MQTT_Mutual_Auth.exe
          log-dir: demo_run_logs
          timeout-seconds: 120
          success-line: "Demo completed successfully"
          retry-attempts: 3

      - name: Configure MQTT Keep Alive Demo
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Keep_Alive
        run: |
          echo '#ifndef DEMO_CONFIG_H_TEST_BUILD' >> demo_config.h
          echo '    #define DEMO_CONFIG_H_TEST_BUILD' >> demo_config.h
          echo '    #define democonfigCLIENT_IDENTIFIER "mqtt_demo_test"' >> demo_config.h
          echo '    #define democonfigMQTT_BROKER_ENDPOINT "127.0.0.1"' >> demo_config.h
          echo '    #define democonfigMQTT_BROKER_PORT ( 1883 )' >> demo_config.h
          echo '#endif /* DEMO_CONFIG_H_TEST_BUILD */' >> demo_config.h

      - name: Build MQTT Keep Alive Demo
        id: build-mqtt-keep-alive-demo
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Keep_Alive
        run: msbuild mqtt_keep_alive_demo.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor MQTT Keep Alive Demo
        if: success() || failure() && steps.build-mqtt-keep-alive-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Keep_Alive/Debug_with_Libslirp/MQTT_Keep_Alive.exe
          log-dir: demo_run_logs
          timeout-seconds: 90
          success-line: "Demo completed successfully"
          retry-attempts: 3

      - name: Configure MQTT Serializer Demo
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Serializer
        run: |
          echo '#define democonfigCLIENT_IDENTIFIER "mqtt_demo_test"' >> demo_config.h
          echo '#define democonfigMQTT_BROKER_ENDPOINT "127.0.0.1"' >> demo_config.h
          echo '#define democonfigMQTT_BROKER_PORT ( 1883 )' >> demo_config.h

      - name: Build MQTT Serializer Demo
        id: build-mqtt-serializer-demo
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Serializer
        run: msbuild mqtt_serializer_demo.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor MQTT Serializer Demo
        if: success() || failure() && steps.build-mqtt-serializer-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Serializer/Debug_with_Libslirp/MQTT_Serializer.exe
          log-dir: demo_run_logs
          timeout-seconds: 90
          success-line: "Demo completed successfully"
          retry-attempts: 3

      - name: Configure MQTT Mutual Authentication with WolfSSL Demo
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Mutual_Auth_wolfSSL
        run: |
          echo '#define democonfigCREDENTIALS_IN_BUFFER 0' >>  demo_config.h
          echo '#define democonfigROOT_CA_PEM \' >> demo_config.h
          sed 's/.*/"&\\n"\\/' ${{ steps.generate-credentials.outputs.root-ca-cert-path }} >> root_ca_cert.txt
          sed '$ s/.$//' root_ca_cert.txt >> demo_config.h
          echo '#define democonfigCLIENT_CERTIFICATE_PEM \' >> demo_config.h
          sed 's/.*/"&\\n"\\/' ${{ steps.generate-credentials.outputs.device-cert-path }} >> device_cert.txt
          sed '$ s/.$//' device_cert.txt >> demo_config.h
          echo '#define democonfigCLIENT_PRIVATE_KEY_PEM \' >> demo_config.h
          sed 's/.*/"&\\n"\\/' ${{ steps.generate-credentials.outputs.device-priv-key-path }} >> device_priv_key.txt
          sed '$ s/.$//' device_priv_key.txt >> demo_config.h
          echo '#define democonfigCLIENT_IDENTIFIER "mqtt_demo_test"' >>  demo_config.h
          echo '#define democonfigMQTT_BROKER_ENDPOINT "127.0.0.1"' >> demo_config.h
          echo '#define democonfigMQTT_BROKER_PORT ( 8883 )' >> demo_config.h

      - name: Build MQTT Mutual Authentication with WolfSSL Demo
        id: build-mqtt-mutual-auth-with-wolfssl-demo
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Mutual_Auth_wolfSSL
        run: msbuild mqtt_mutual_auth_demo_wolfSSL.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor MQTT Mutual Authentication with WolfSSL Demo
        if: success() || failure() && steps.build-mqtt-mutual-auth-with-wolfssl-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Mutual_Auth_wolfSSL/Debug/RTOSDemo.exe
          log-dir: demo_run_logs
          timeout-seconds: 90
          success-line: "Demo completed successfully"
          retry-attempts: 3

      - name: Configure MQTT Multi-Task Demo
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Multitask
        run: |
          echo '#ifndef DEMO_CONFIG_H_TEST_BUILD' | tee -a demo_config.h
          echo '    #define DEMO_CONFIG_H_TEST_BUILD' | tee -a demo_config.h
          echo '    #define democonfigCLIENT_CERTIFICATE_PEM ""' | tee -a demo_config.h
          echo '    #define democonfigCLIENT_IDENTIFIER ""' | tee -a demo_config.h
          echo '    #define democonfigCLIENT_PRIVATE_KEY_PEM ""' | tee -a demo_config.h
          echo '    #define democonfigMQTT_BROKER_ENDPOINT ""' | tee -a demo_config.h
          echo '    #define democonfigMQTT_BROKER_PORT ( 8883 )' | tee -a demo_config.h
          echo '    #define democonfigROOT_CA_PEM ""' | tee -a demo_config.h
          echo '#endif /* DEMO_CONFIG_H_TEST_BUILD */' | tee -a demo_config.h

      - name: Build MQTT Multi-Task Demo
        id: build-mqtt-multitask-demo
        working-directory: FreeRTOS-Plus/Demo/coreMQTT_Windows_Simulator/MQTT_Multitask
        run: msbuild mqtt_multitask_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Configure corePKCS11_MQTT_Mutual_Auth_Windows_Simulator
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/corePKCS11_MQTT_Mutual_Auth_Windows_Simulator
        run: |
          echo '#ifndef DEMO_CONFIG_H_TEST_BUILD' | tee -a demo_config.h
          echo '    #define DEMO_CONFIG_H_TEST_BUILD' | tee -a demo_config.h
          echo '    #define democonfigCLIENT_CERTIFICATE_PEM ""' | tee -a demo_config.h
          echo '    #define democonfigCLIENT_IDENTIFIER ""' | tee -a demo_config.h
          echo '    #define democonfigTHING_NAME ""' | tee -a demo_config.h
          echo '    #define democonfigPROVISIONING_TEMPLATE_NAME ""' | tee -a demo_config.h
          echo '    #define democonfigCLIENT_PRIVATE_KEY_PEM ""' | tee -a demo_config.h
          echo '    #define democonfigCLIENT_PRIVATE_KEY_PEM ""' | tee -a demo_config.h
          echo '    #define democonfigMQTT_BROKER_ENDPOINT ""' | tee -a demo_config.h
          echo '    #define democonfigMQTT_BROKER_PORT ( 8883 )' | tee -a demo_config.h
          echo '    #define democonfigROOT_CA_PEM ""' | tee -a demo_config.h
          echo '#endif /* DEMO_CONFIG_H_TEST_BUILD */' | tee -a demo_config.h

      - name: Build corePKCS11 + coreMQTT Mutual Auth Demo
        working-directory: FreeRTOS-Plus/Demo/corePKCS11_MQTT_Mutual_Auth_Windows_Simulator
        run: msbuild corePKCS11_MQTT_Mutual_Auth.sln -t:rebuild -property:Configuration=Debug -property:Platform=Win32 -m

      - name: Configure coreSNTP_Windows_Simulator
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/coreSNTP_Windows_Simulator
        run: |
          echo '#ifndef DEMO_CONFIG_H_TEST_BUILD' | tee -a demo_config.h
          echo '    #define DEMO_CONFIG_H_TEST_BUILD' | tee -a demo_config.h
          echo '    #define democonfigLIST_OF_TIME_SERVERS ""' | tee -a demo_config.h
          echo '    #define democonfigLIST_OF_AUTHENTICATION_SYMMETRIC_KEYS ""' | tee -a demo_config.h
          echo '    #define democonfigLIST_OF_AUTHENTICATION_KEY_IDS ""' | tee -a demo_config.h
          echo '    #define democonfigSNTP_CLIENT_POLLING_INTERVAL_SECONDS 500U' | tee -a demo_config.h
          echo '#endif /* DEMO_CONFIG_H_TEST_BUILD */' | tee -a demo_config.h

      - name: Build coreSNTP Demo
        working-directory: FreeRTOS-Plus/Demo/coreSNTP_Windows_Simulator
        run: msbuild core_sntp_demo.sln -t:rebuild -property:Configuration=Debug -property:Platform=Win32 -m

  winsim_aws_iot:
    name: AWS IoT Windows Simulator Demos
    runs-on: windows-2019
    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/AWS/device-defender \
            FreeRTOS-Plus/Source/AWS/device-shadow \
            FreeRTOS-Plus/Source/AWS/fleet-provisioning \
            FreeRTOS-Plus/Source/AWS/jobs \
            FreeRTOS-Plus/Source/AWS/ota \
            FreeRTOS-Plus/Source/AWS/sigv4 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Interface \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/bg96 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/hl7802 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/sara-r4 \
            FreeRTOS-Plus/Source/Application-Protocols/coreHTTP \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT-Agent \
            FreeRTOS-Plus/Source/Application-Protocols/coreSNTP \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP \
            FreeRTOS-Plus/Source/Utilities/backoff_algorithm \
            FreeRTOS-Plus/Source/coreJSON \
            FreeRTOS-Plus/Source/corePKCS11 \
            FreeRTOS-Plus/ThirdParty/mbedtls \
            FreeRTOS-Plus/ThirdParty/tinycbor \
            FreeRTOS-Plus/ThirdParty/wolfSSL

          git -C FreeRTOS-Plus/Source/Application-Protocols/coreHTTP submodule update --checkout --init --depth 1 source/dependency/3rdparty/llhttp
          git -C FreeRTOS-Plus/Source/corePKCS11 submodule update --checkout --init --depth 1 source/dependency/3rdparty/pkcs11

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Adjust Configuration files
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/AWS
        run: |
          echo '#ifndef DEMO_CONFIG_H_TEST_BUILD' | tee -a */*/demo_config.h
          echo '    #define DEMO_CONFIG_H_TEST_BUILD' | tee -a */*/demo_config.h
          echo '    #define democonfigCLIENT_CERTIFICATE_PEM ""' | tee -a */*/demo_config.h
          echo '    #define democonfigCLIENT_IDENTIFIER ""' | tee -a */*/demo_config.h
          echo '    #define democonfigTHING_NAME ""' | tee -a */*/demo_config.h
          echo '    #define democonfigPROVISIONING_TEMPLATE_NAME ""' | tee -a */*/demo_config.h
          echo '    #define democonfigCLIENT_PRIVATE_KEY_PEM ""' | tee -a */*/demo_config.h
          echo '    #define democonfigCLIENT_PRIVATE_KEY_PEM ""' | tee -a */*/demo_config.h
          echo '    #define democonfigMQTT_BROKER_ENDPOINT ""' | tee -a */*/demo_config.h
          echo '    #define democonfigMQTT_BROKER_PORT ( 8883 )' | tee -a */*/demo_config.h
          echo '    #define democonfigROOT_CA_PEM ""' | tee -a */*/demo_config.h
          echo '#endif /* DEMO_CONFIG_H_TEST_BUILD */' | tee -a */*/demo_config.h

      - name: Build AWS IoT Device Defender Demo
        working-directory: FreeRTOS-Plus/Demo/AWS/Device_Defender_Windows_Simulator/Device_Defender_Demo
        run: msbuild defender_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build AWS IoT Device Shadow Demo
        working-directory: FreeRTOS-Plus/Demo/AWS/Device_Shadow_Windows_Simulator/Device_Shadow_Demo
        run: msbuild shadow_main_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build AWS IoT Fleet Provisioning Demo
        working-directory: FreeRTOS-Plus/Demo/AWS/Fleet_Provisioning_Windows_Simulator/Fleet_Provisioning_With_CSR_Demo
        run: msbuild fleet_provisioning_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build AWS IoT Jobs Demo
        working-directory: FreeRTOS-Plus/Demo/AWS/Jobs_Windows_Simulator/Jobs_Demo
        run: msbuild jobs_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build AWS IoT OTA over MQTT
        working-directory: FreeRTOS-Plus/Demo/AWS/Ota_Windows_Simulator/Ota_Over_Mqtt_Demo
        run: msbuild ota_over_mqtt_demo.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build AWS IoT OTA over HTTP
        working-directory: FreeRTOS-Plus/Demo/AWS/Ota_Windows_Simulator/Ota_Over_Http_Demo
        run: msbuild ota_over_http_demo.sln -t:rebuild -property:Configuration=Debug -m

  plus_tcp_posix:
    name: FreeRTOS+TCP Posix Simulator Demo
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP

      - name: Install prerequisite packages
        run: sudo apt-get install -y git build-essential libglib2.0-dev libslirp-dev

      - name: Start localhost Echo server
        id: echo-server
        uses: FreeRTOS/CI-CD-GitHub-Actions/localhost-echo-server@main
        with:
          port_number: 5000

      - name: Build FreeRTOS+TCP Echo Posix Demo
        id: build-echo-posix-demo
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_TCP_Echo_Posix
        run: |
          sed -i -z "s/define[[:space:]]*echoECHO_PORT[[:space:]]*([[:space:]]*[0-9]\+[[:space:]]*)/define echoECHO_PORT ( 5000 )/g" TCPEchoClient_SingleTasks.c
          sed -i -z "s/int[[:space:]]*main[[:space:]]*([[:space:]]*void[[:space:]]*)\n{/int main( void ){setvbuf( stdout, NULL, _IONBF, 0 );/g" main.c
          make -j TRACE_ON_ENTER=0

      - name: Run and monitor FreeRTOS+TCP Echo Posix Demo
        if: success() || failure() && steps.build-echo-posix-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/FreeRTOS_Plus_TCP_Echo_Posix/build/posix_tcp_demo
          log-dir: demo_run_logs
          timeout-seconds: 30
          success-line: "Received correct data 3 times"
          retry-attempts: 3

  plus_tcp_arm:
    name: FreeRTOS+TCP QEMU ARM MPS2 AN385
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP

      - name: Install prerequisite packages
        run: sudo apt-get install -y git make gcc-arm-none-eabi

      - name: Build FreeRTOS+TCP Minimal Demo
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_TCP_Echo_Qemu_mps2
        run: make -j

  plus_tcp_winsim:
    name: FreeRTOS+TCP Windows Simulator Demos
    runs-on: windows-2019
    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP \
            FreeRTOS-Plus/ThirdParty/mbedtls \
            FreeRTOS-Plus/ThirdParty/wolfSSL \
            FreeRTOS-Plus/ThirdParty/glib \
            FreeRTOS-Plus/ThirdParty/libslirp

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Install meson
        run: pip install meson

      - name: Install Glib
        continue-on-error: true
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
          cd FreeRTOS-Plus/ThirdParty/glib
          meson setup build --backend=vs2019 -Dselinux=disabled -Dxattr=false -Dbsymbolic_functions=false -Dtests=false -Dglib_debug=disabled -Dglib_assert=false --buildtype=release
          meson compile -C build

      - name: Start localhost Echo server
        id: echo-server
        uses: FreeRTOS/CI-CD-GitHub-Actions/localhost-echo-server@main
        with:
          port_number: 5000

      - name: Build FreeRTOS+TCP Minimal Demo
        id: build-plus-tcp-minimal-demo
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_TCP_Minimal_Windows_Simulator
        run: |
          $content = Get-Content -Path 'DemoTasks\TCPEchoClient_SingleTasks.c' -Raw
          $newContent = $content -replace '#define\s+echoECHO_PORT.*', '#define echoECHO_PORT	( 5000 )'
          $newContent | Set-Content -Path 'DemoTasks\TCPEchoClient_SingleTasks.c'
          $content = Get-Content -Path 'tcp_echo_config.h' -Raw
          $newContent = $content -replace '#define\s+configECHO_SERVER_ADDR.*', '#define configECHO_SERVER_ADDR    "127.0.0.1"'
          $newContent | Set-Content -Path 'tcp_echo_config.h'
          $content = Get-Content -Path 'main.c' -Raw
          $newContent = $content -replace 'int\s+main(.*?)void(.*?)\r?\n\s*{', 'int main( void ){setvbuf( stdout, NULL, _IONBF, 0 );'
          $newContent | Set-Content -Path 'main.c'
          msbuild FreeRTOS_Plus_TCP_Minimal.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor FreeRTOS+TCP Minimal Demo
        if: success() || failure() && steps.build-plus-tcp-minimal-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/FreeRTOS_Plus_TCP_Minimal_Windows_Simulator/Debug_with_Libslirp/FreeRTOS_Plus_TCP_Minimal.exe
          log-dir: demo_run_logs
          timeout-seconds: 30
          success-line: "Received correct data 3 times"
          retry-attempts: 3

      - name: Generate SSL credentials
        id: generate-credentials
        uses: FreeRTOS/CI-CD-GitHub-Actions/ssl-credential-creator@main

      - name: Configure FreeRTOS+WolfSSL Demo
        shell: bash
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_WolfSSL_Windows_Simulator
        run: |
          cp ${{ steps.generate-credentials.outputs.root-ca-cert-path }} .
          cp ${{ steps.generate-credentials.outputs.server-cert-path }} .
          cp ${{ steps.generate-credentials.outputs.server-priv-key-path }} .
          sed -i -z "s/ca-cert.pem/root_ca_cert.crt/g" SecureTCPServerTask.c
          sed -i -z "s/server-cert.pem/server_cert.crt/g" SecureTCPServerTask.c
          sed -i -z "s/server-key.pem/server_priv_key.key/g" SecureTCPServerTask.c
          sed -i -z "s/ca-cert.pem/root_ca_cert.crt/g" SecureTCPClientTask.c

      - name: Build FreeRTOS+WolfSSL Demo
        id: build-freertos-wolfssl-demo
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_WolfSSL_Windows_Simulator
        run: msbuild FreeRTOS_Plus_WolfSSL.sln -t:rebuild -property:Configuration=Debug_with_Libslirp -property:Platform=Win32 -m

      - name: Run and monitor FreeRTOS+WolfSSL Demo
        if: success() || failure() && steps.build-freertos-wolfssl-demo.outcome == 'success'
        uses: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor@main
        with:
          exe-path: FreeRTOS-Plus/Demo/FreeRTOS_Plus_WolfSSL_Windows_Simulator/Debug_with_Libslirp/FreeRTOS_Plus_WolfSSL_Windows_Simulator.exe
          log-dir: demo_run_logs
          timeout-seconds: 60
          success-line: "Received by the secure server: Message number 9"
          retry-attempts: 3

      - name: Build FreeRTOS+TCP UDP CLI Demo
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_TCP_UDP_Mode_CLI_Windows_Simulator
        run: msbuild FreeRTOS_Plus_UDP_with_CLI.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build FreeRTOS+WolfSSL FIPS Demo
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_WolfSSL_FIPS_Ready_Windows_Simulator
        run: msbuild FreeRTOS_Plus_WolfSSL.sln -t:rebuild -property:Configuration=Debug -m

  winsim_plus_demos:
    name: FreeRTOS+CLI Windows Simulator Demos
    runs-on: windows-2019
    continue-on-error: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch Submodules
        shell: bash
        run: |
          git submodule update --checkout --init --depth 1 \
            FreeRTOS/Source \
            FreeRTOS-Plus/Source/AWS/device-defender \
            FreeRTOS-Plus/Source/AWS/device-shadow \
            FreeRTOS-Plus/Source/AWS/fleet-provisioning \
            FreeRTOS-Plus/Source/AWS/jobs \
            FreeRTOS-Plus/Source/AWS/ota \
            FreeRTOS-Plus/Source/AWS/sigv4 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Interface \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/bg96 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/hl7802 \
            FreeRTOS-Plus/Source/FreeRTOS-Cellular-Modules/sara-r4 \
            FreeRTOS-Plus/Source/Application-Protocols/coreHTTP \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT \
            FreeRTOS-Plus/Source/Application-Protocols/coreMQTT-Agent \
            FreeRTOS-Plus/Source/Application-Protocols/coreSNTP \
            FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP \
            FreeRTOS-Plus/Source/Utilities/backoff_algorithm \
            FreeRTOS-Plus/Source/coreJSON \
            FreeRTOS-Plus/Source/corePKCS11 \
            FreeRTOS-Plus/ThirdParty/mbedtls \
            FreeRTOS-Plus/ThirdParty/tinycbor \
            FreeRTOS-Plus/ThirdParty/wolfSSL

          git -C FreeRTOS-Plus/Source/Application-Protocols/coreHTTP submodule update --checkout --init --depth 1 source/dependency/3rdparty/llhttp
          git -C FreeRTOS-Plus/Source/corePKCS11 submodule update --checkout --init --depth 1 source/dependency/3rdparty/pkcs11

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Build FreeRTOS+CLI+Trace Demo
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_CLI_with_Trace_Windows_Simulator
        run: msbuild FreeRTOS_Plus_CLI_with_Trace.sln -t:rebuild -property:Configuration=Debug -m

      - name: Build FreeRTOS+RelianceEdge+CLI Demo
        working-directory: FreeRTOS-Plus/Demo/FreeRTOS_Plus_Reliance_Edge_and_CLI_Windows_Simulator
        run: msbuild FreeRTOS_Plus_Reliance_Edge_with_CLI.sln -t:rebuild -property:Configuration=Debug -m
