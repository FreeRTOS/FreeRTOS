
:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :ignore_arg
    - :expect_any_args
    - :array
    - :callback
    - :return_thru_ptr
  :callback_include_count: true # include a count arg when calling the callback
  :callback_after_arg_check: false # check arguments before calling the callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :includes:        # This will add these includes to each mock.
    - <stdbool.h>
    - <stdint.h>
    - <fcntl.h>
  :weak: __attribute__((weak))
  :verbosity: 3
  :attributes:
    - PRIVILEGED_FUNCTION
    - 'int fcntl(int s, int cmd, ...);'
  :strippables:
    - PRIVILEGED_FUNCTION
    - portDONT_DISCARD
    - '(?:fcntl\s*\(+.*?\)+)' # this function is causing some trouble with code coverage as the annotations are calling the mocked one, so we won't mock it

    #No stop some functions from being mocked..
    - '(?:<YOUR_FUNCTION_NAME>\s*\(+.*?\)+)'
    - '(?:FreeRTOS_max_uint32\s*\(+.*?\)+)'
    - '(?:FreeRTOS_min_int32\s*\(+.*?\)+)'
    - '(?:FreeRTOS_min_uint32\s*\(+.*?\)+)'
    - '(?:FreeRTOS_round_up\s*\(+.*?\)+)'
    - '(?:FreeRTOS_round_down\s*\(+.*?\)+)'
    - '(?:FreeRTOS_min_BaseType\s*\(+.*?\)+)'
    - '(?:FreeRTOS_max_BaseType\s*\(+.*?\)+)'
    - '(?:FreeRTOS_max_UBaseType\s*\(+.*?\)+)'
    - '(?:FreeRTOS_min_UBaseType\s*\(+.*?\)+)'
    #in FreeRTOS_IP_Private.h
    - '(?:ulChar2u32\s*\(+.*?\)+)'
    - '(?:usChar2u16\s*\(+.*?\)+)'
    #declared in multiple files
    - '(?:FreeRTOS_netstat\s*\(+.*?\)+)'
  :treat_externs: :include

#  :includes_c_pre_header:
#    - "portableDefs.h"
#  :includes_h_pre_orig_headder:
#    - "portableDefs.h"
#  :includes:
#    - "portableDefs.h"
#    - "projdefs.h"
#    - "task.h"
