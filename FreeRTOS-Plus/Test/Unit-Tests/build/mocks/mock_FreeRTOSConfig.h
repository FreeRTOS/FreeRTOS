/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_FREERTOSCONFIG_H
#define _MOCK_FREERTOSCONFIG_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include <fcntl.h>
#include "FreeRTOS.h"
#include "task.h"
#include "list.h"
#include "queue.h"
#include "FreeRTOS_IP.h"
#include "FreeRTOSConfig.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_FreeRTOSConfig_Init(void);
void mock_FreeRTOSConfig_Destroy(void);
void mock_FreeRTOSConfig_Verify(void);




#define ulGetRunTimeCounterValue_IgnoreAndReturn(cmock_retval) ulGetRunTimeCounterValue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ulGetRunTimeCounterValue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, unsigned long cmock_to_return);
#define ulGetRunTimeCounterValue_StopIgnore() ulGetRunTimeCounterValue_CMockStopIgnore()
void ulGetRunTimeCounterValue_CMockStopIgnore(void);
#define ulGetRunTimeCounterValue_ExpectAndReturn(cmock_retval) ulGetRunTimeCounterValue_CMockExpectAndReturn(__LINE__, cmock_retval)
void ulGetRunTimeCounterValue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, unsigned long cmock_to_return);
typedef unsigned long (* CMOCK_ulGetRunTimeCounterValue_CALLBACK)(int cmock_num_calls);
void ulGetRunTimeCounterValue_AddCallback(CMOCK_ulGetRunTimeCounterValue_CALLBACK Callback);
void ulGetRunTimeCounterValue_Stub(CMOCK_ulGetRunTimeCounterValue_CALLBACK Callback);
#define ulGetRunTimeCounterValue_StubWithCallback ulGetRunTimeCounterValue_Stub
#define vConfigureTimerForRunTimeStats_Ignore() vConfigureTimerForRunTimeStats_CMockIgnore()
void vConfigureTimerForRunTimeStats_CMockIgnore(void);
#define vConfigureTimerForRunTimeStats_StopIgnore() vConfigureTimerForRunTimeStats_CMockStopIgnore()
void vConfigureTimerForRunTimeStats_CMockStopIgnore(void);
#define vConfigureTimerForRunTimeStats_Expect() vConfigureTimerForRunTimeStats_CMockExpect(__LINE__)
void vConfigureTimerForRunTimeStats_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_vConfigureTimerForRunTimeStats_CALLBACK)(int cmock_num_calls);
void vConfigureTimerForRunTimeStats_AddCallback(CMOCK_vConfigureTimerForRunTimeStats_CALLBACK Callback);
void vConfigureTimerForRunTimeStats_Stub(CMOCK_vConfigureTimerForRunTimeStats_CALLBACK Callback);
#define vConfigureTimerForRunTimeStats_StubWithCallback vConfigureTimerForRunTimeStats_Stub
#define vAssertCalled_Ignore() vAssertCalled_CMockIgnore()
void vAssertCalled_CMockIgnore(void);
#define vAssertCalled_StopIgnore() vAssertCalled_CMockStopIgnore()
void vAssertCalled_CMockStopIgnore(void);
#define vAssertCalled_ExpectAnyArgs() vAssertCalled_CMockExpectAnyArgs(__LINE__)
void vAssertCalled_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vAssertCalled_Expect(ulLine, pcFileName) vAssertCalled_CMockExpect(__LINE__, ulLine, pcFileName)
void vAssertCalled_CMockExpect(UNITY_LINE_TYPE cmock_line, unsigned long ulLine, const char* const pcFileName);
typedef void (* CMOCK_vAssertCalled_CALLBACK)(unsigned long ulLine, const char* const pcFileName, int cmock_num_calls);
void vAssertCalled_AddCallback(CMOCK_vAssertCalled_CALLBACK Callback);
void vAssertCalled_Stub(CMOCK_vAssertCalled_CALLBACK Callback);
#define vAssertCalled_StubWithCallback vAssertCalled_Stub
#define vAssertCalled_IgnoreArg_ulLine() vAssertCalled_CMockIgnoreArg_ulLine(__LINE__)
void vAssertCalled_CMockIgnoreArg_ulLine(UNITY_LINE_TYPE cmock_line);
#define vAssertCalled_IgnoreArg_pcFileName() vAssertCalled_CMockIgnoreArg_pcFileName(__LINE__)
void vAssertCalled_CMockIgnoreArg_pcFileName(UNITY_LINE_TYPE cmock_line);
#define vGenerateCoreBInterrupt_Ignore() vGenerateCoreBInterrupt_CMockIgnore()
void vGenerateCoreBInterrupt_CMockIgnore(void);
#define vGenerateCoreBInterrupt_StopIgnore() vGenerateCoreBInterrupt_CMockStopIgnore()
void vGenerateCoreBInterrupt_CMockStopIgnore(void);
#define vGenerateCoreBInterrupt_ExpectAnyArgs() vGenerateCoreBInterrupt_CMockExpectAnyArgs(__LINE__)
void vGenerateCoreBInterrupt_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define vGenerateCoreBInterrupt_Expect(xUpdatedMessageBuffer) vGenerateCoreBInterrupt_CMockExpect(__LINE__, xUpdatedMessageBuffer)
void vGenerateCoreBInterrupt_CMockExpect(UNITY_LINE_TYPE cmock_line, void* xUpdatedMessageBuffer);
typedef void (* CMOCK_vGenerateCoreBInterrupt_CALLBACK)(void* xUpdatedMessageBuffer, int cmock_num_calls);
void vGenerateCoreBInterrupt_AddCallback(CMOCK_vGenerateCoreBInterrupt_CALLBACK Callback);
void vGenerateCoreBInterrupt_Stub(CMOCK_vGenerateCoreBInterrupt_CALLBACK Callback);
#define vGenerateCoreBInterrupt_StubWithCallback vGenerateCoreBInterrupt_Stub
#define vGenerateCoreBInterrupt_ExpectWithArray(xUpdatedMessageBuffer, xUpdatedMessageBuffer_Depth) vGenerateCoreBInterrupt_CMockExpectWithArray(__LINE__, xUpdatedMessageBuffer, xUpdatedMessageBuffer_Depth)
void vGenerateCoreBInterrupt_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* xUpdatedMessageBuffer, int xUpdatedMessageBuffer_Depth);
#define vGenerateCoreBInterrupt_ReturnThruPtr_xUpdatedMessageBuffer(xUpdatedMessageBuffer) vGenerateCoreBInterrupt_CMockReturnMemThruPtr_xUpdatedMessageBuffer(__LINE__, xUpdatedMessageBuffer, sizeof(void))
#define vGenerateCoreBInterrupt_ReturnArrayThruPtr_xUpdatedMessageBuffer(xUpdatedMessageBuffer, cmock_len) vGenerateCoreBInterrupt_CMockReturnMemThruPtr_xUpdatedMessageBuffer(__LINE__, xUpdatedMessageBuffer, (int)(cmock_len * (int)sizeof(*xUpdatedMessageBuffer)))
#define vGenerateCoreBInterrupt_ReturnMemThruPtr_xUpdatedMessageBuffer(xUpdatedMessageBuffer, cmock_size) vGenerateCoreBInterrupt_CMockReturnMemThruPtr_xUpdatedMessageBuffer(__LINE__, xUpdatedMessageBuffer, cmock_size)
void vGenerateCoreBInterrupt_CMockReturnMemThruPtr_xUpdatedMessageBuffer(UNITY_LINE_TYPE cmock_line, void* xUpdatedMessageBuffer, int cmock_size);
#define vGenerateCoreBInterrupt_IgnoreArg_xUpdatedMessageBuffer() vGenerateCoreBInterrupt_CMockIgnoreArg_xUpdatedMessageBuffer(__LINE__)
void vGenerateCoreBInterrupt_CMockIgnoreArg_xUpdatedMessageBuffer(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
