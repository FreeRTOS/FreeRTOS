name: CI Checks

env:
  bashPass: \033[32;1mPASSED -
  bashInfo: \033[33;1mINFO -
  bashFail: \033[31;1mFAILED -
  bashEnd:  \033[0m

on:
    push:
    pull_request:
    workflow_dispatch:

jobs:
    git-secrets:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              with:
                  submodules: recursive
            - name: Checkout awslabs/git-secrets
              uses: actions/checkout@v3
              with:
                  repository: awslabs/git-secrets
                  ref: master
                  path: git-secrets
            - name: Install git-secrets
              run: cd git-secrets && sudo make install && cd ..
            - name: Run git-secrets
              run: |
                  git-secrets --register-aws
                  git-secrets --scan

    formatting:
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v3
        - name: Install Uncrustify
          run: sudo apt-get install uncrustify=0.69.0+dfsg1-1build1 dos2unix fd-find
        - env:
            stepName: Run Uncrustify
          id: uncrustify-files
          run: |
            # Uncrustify on C files while ignoring symlinks.
            # Make a collapsible section in the log to run uncrustify
            echo "::group::${{ env.bashInfo }} Uncrustify Check ${{ env.bashEnd }}"
            # GitHub automtically use "set -e" which causes scripts to fail on the first exit code
            # This would mean the first time a file fails the check that we exit without formatting all files.
            set +e
            uncrustify --version
            find FreeRTOS/Demo/Common FreeRTOS/Test \( -name ethernet -o -name drivers -o -path 'FreeRTOS/Test/CMock/CMock' \) -prune -false -o -name "*.[hc]" | xargs uncrustify --no-backup --replace --if-changed -c tools/uncrustify.cfg -l C
            echo "::endgroup::"

            echo "::group::${{ env.bashInfo }} Check for Trailing Whitespace ${{ env.bashEnd }}"
            # These checks will be captured in the git diff
            # Replace all trailing whitespace, exclude photo files
            fdfind --type=file -E '*.png' -E '*.jpg' -E '*.svg' . --exec sed -Ei 's/[[:blank:]]+$//'
            echo "::endgroup::"

            echo "::group::${{ env.bashInfo }} Check for CRLF Line Endings ${{ env.bashEnd }}"
            # Replace all line endings with LF ones instead of CRLF
            fdfind --type=file . --exec dos2unix
            echo "::endgroup::"

            # Run a git diff to print the differences if any exist, return an error code if there are any
            # Wrap in a set+e and set -e so we can keep running after the error
            echo "::group::${{ env.bashInfo }} File Difference ${{ env.bashEnd }}"
            set +e
            git diff --exit-code --color=always
            exitCode=$?
            set -e

            if [ $exitCode -eq 0 ]; then
              echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd}}"
              exit 0
            else
              # I am intentionally doing this a second time here.
              # Using tee will mask the exit code of the diff
              # And we don't want the colour to be added to the patch
              # Put it in what the 'default' path will be for the upload step
              git diff > formattingChanges.patch
              echo -e "${{ env.bashFail }} List of files with formatting errors: ${{ env.bashEnd }}"
              echo -e "${{ env.bashFail }} "$(git diff --name-only)" ${{ env.bashEnd }} "
              echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            fi
        - name: Upload Formatting Git Patch
          if: failure() && ( steps.uncrustify-files.outcome == 'failure' )
          id: upload-formatting-patch
          uses: actions/upload-artifact@v3
          with:
            name: formattingChanges
            path: formattingChanges.patch
            retention-days: 7

        - env:
            stepName: Formatting Git Patch Info
            bashPass: \033[32;1m
            bashInfo: \033[33;1m
            bashFail: \033[31;1m
            bashEnd:  \033[0
          if: failure() && ( steps.upload-formatting-patch.outcome == 'success' )
          shell: bash
          run: |
            # ${{ env.stepName }}
            echo -e "${{ env.bashInfo }} A git patch of the formatting issues has been attached to this workflow ${{ env.bashEnd }}"
            echo -e "${{ env.bashInfo }} This can be accessed by returning to the bottom of the summary page of the workflow run ${{ env.bashEnd }}"
            echo -e "${{ env.bashInfo }} At the bottom of the page will be a formattingChanges.patch file that you can download ${{ env.bashEnd }}"
            echo -e "${{ env.bashInfo }} Copy this patch to your repository and apply it using 'git apply formattingChanges.patch' ${{ env.bashEnd }}"
            exit 1


    doxygen:
      runs-on: ubuntu-latest
      steps:
        - name: Clone repository
          uses: actions/checkout@v3
          with:
              submodules: recursive
              path: freertos
        - name: Install Python3
          uses: actions/setup-python@v3

        - name: Download tag dependency of coreMQTT-Agent
          run: |
              # We don't need to generate the coreMQTT docs, we only need the tag file.
              # Therefore, we can just download it.
              mkdir -p freertos/FreeRTOS-Plus/Source/Application-Protocols/coreMQTT-Agent/source/dependency/coreMQTT/docs/doxygen/output
              wget -O freertos/FreeRTOS-Plus/Source/Application-Protocols/coreMQTT-Agent/source/dependency/coreMQTT/docs/doxygen/output/mqtt.tag \
              "https://freertos.org/Documentation/api-ref/coreMQTT/docs/doxygen/output/mqtt.tag"

        - name: Generate doxygen ZIP
          uses: FreeRTOS/CI-CD-Github-Actions/doxygen@CI-CD-Overhaul
          with:
              path: ./freertos
              # List of directories containing libraries whose doxygen output will be generated.
              libs_parent_dir_path: FreeRTOS-Plus/Source,FreeRTOS-Plus/Source/AWS,FreeRTOS-Plus/Source/Application-Protocols,FreeRTOS-Plus/Source/Utilities
              generate_zip: true
        - name: Upload doxygen artifact if main branch
          if:
              success() && ( github.ref == 'refs/heads/main' || github.ref
              == 'refs/heads/release-candidate' )
          env:
            GIT_SHA:
          uses: actions/upload-artifact@v2
          with:
              name: doxygen.zip-${{ github.sha }}
              path: ./freertos/doxygen.zip
              retention-days: 2

    spell-check:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Parent Repo
              uses: actions/checkout@v3
            - name: Run spellings check
              uses: FreeRTOS/CI-CD-GitHub-Actions/rust-spell-check@CI-CD-Overhaul

    verify-manifest:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
          with:
            submodules: true
            fetch-depth: 0
        - name: Run manifest verifier
          uses: FreeRTOS/CI-CD-GitHub-Actions/manifest-verifier@CI-CD-Overhaul
          with:
            path: ./
            fail-on-incorrect-version: true

    memory-statistics:
        runs-on: ubuntu-latest
        env:
            ARM_GCC_TOOLCHAIN_URL: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2?revision=05382cca-1721-44e1-ae19-1e7c3dc96118&la=en&hash=D7C9D18FCA2DD9F894FD9F3C3DC9228498FA281A"
        steps:
            - name: Install ARM GCC
              run:
                  wget -qO- "${{ env.ARM_GCC_TOOLCHAIN_URL }}" | sudo tar
                  --strip-components=1 -xj -C /usr/local
            - name: Clone FreeRTOS Repository with submodules
              uses: actions/checkout@v3
              with:
                  submodules: recursive
            - name: Clone mbedTLS submodule from corePKCS11
              run:
                  git submodule update --init --recursive --checkout --
                  FreeRTOS-Plus/Source/corePKCS11
            - name: Clone CI-CD-Github-Actions repository
              uses: actions/checkout@v3
              with:
                  repository: skptak/CI-CD-GitHub-Actions
                  path: tools
            - name: Run script to generate JSON memory statistics
              run:
                  tools/memory_statistics/memory_statistics.py --json_report
                  --config tools/memory_statistics/paths.json --output
                  freertos_lts_memory_estimates.json
            - name:
                  Upload memory size report as artifact (for main and
                  release-candidate ONLY)
              if:
                  success() && ( github.ref == 'refs/heads/main' || github.ref
                  == 'refs/heads/release-candidate' )
              uses: actions/upload-artifact@v2
              with:
                  name: freertos-memory-estimates
                  path: ./freertos_lts_memory_estimates.json
                  retention-days: 2

    proof_ci:
        if: ${{ github.event.pull_request }}
        runs-on: cbmc_ubuntu-latest_16-core
        steps:
            - uses: actions/checkout@v3
            - env:
                stepName: Install Dependencies
              run: |
                  echo "::group::${{ env.stepName }}"
                  git submodule update --init --checkout --recursive --depth 1
                  sudo apt-get update
                  sudo apt-get install --yes --no-install-recommends gcc-multilib
                  echo "::endgroup::"
                  echo -e "${{ env.bashPass }} ${{env.stepName}} ${{ env.bashEnd }}"

            - name: Set up CBMC runner
              uses: FreeRTOS/CI-CD-Github-Actions/set_up_cbmc_runner@CI-CD-Overhaul

            - name: Run CBMC
              uses: FreeRTOS/CI-CD-Github-Actions/run_cbmc@CI-CD-Overhaul
              with:
                  proofs_dir: FreeRTOS/Test/CBMC/proofs
